cscope 15 $HOME/memtest86+-4.21               0000443391
	@config.c

10 
	~"ã°.h
"

11 
	~"s¸ìn_buf„r.h
"

12 
	~"c⁄åﬁÀr.h
"

13 
	~"dmi.h
"

14 
	#ITER
 20

	)

16 
baû
,
bìpmode
;

17 
t£q
Åseq[];

18 
e820_ƒ
;

19 
memsz_mode
;

20 
föd_ticks_f‹_∑ss
();

23 
	gßve
[2][
POP_H
][
POP_W
];

24 
	gßve2
[2][
POP2_H
][
POP2_W
];

26 
	$gë_c⁄fig
()

28 
Êag
 = 0,
sÊag
 = 0,
i
,
¥t
 = 0;

29 
ª¥öt_s¸ìn
 = 0;

30
ul⁄g

∑ge
;

32
	`p›up
();

33
	`waô_keyup
();

34 !
Êag
) {

35
	`˝röt
(
POP_Y
+1,
POP_X
+2, "Settings:");

36
	`˝röt
(
POP_Y
+3,
POP_X
+6, "(1) Test Selection");

37
	`˝röt
(
POP_Y
+4,
POP_X
+6, "(2) Address Range");

38
	`˝röt
(
POP_Y
+5,
POP_X
+6, "(3) Memory Sizing");

39
	`˝röt
(
POP_Y
+6,
POP_X
+6, "(4) Error Report Mode");

40
	`˝röt
(
POP_Y
+7,
POP_X
+6, "(5) Show DMI Memory Info");

41
	`˝röt
(
POP_Y
+8,
POP_X
+6, "(6) ECC Mode");

42
	`˝röt
(
POP_Y
+9,
POP_X
+6, "(7) Restart");

43
	`˝röt
(
POP_Y
+10,
POP_X
+6, "(8) Refresh Screen");

44
	`˝röt
(
POP_Y
+11,
POP_X
+6, "(9) Display SPD Data");

45
	`˝röt
(
POP_Y
+12,
POP_X
+6, "(0) Continue");

49
sÊag
 = 0;

50 
	`gë_key
()) {

53
	`p›˛ór
();

54
	`˝röt
(
POP_Y
+1,
POP_X
+2, "Test Selection:");

55
	`˝röt
(
POP_Y
+3,
POP_X
+6, "(1) Default Tests");

56
	`˝röt
(
POP_Y
+4,
POP_X
+6, "(2) Skip Current Test");

57
	`˝röt
(
POP_Y
+5,
POP_X
+6, "(3) Select Test");

58
	`˝röt
(
POP_Y
+6,
POP_X
+6, "(4) Select Bit Fade Test");

60
	`˝röt
(
POP_Y
+8,
POP_X
+6, "(0) Continue");

61 i‡(
v
->
ã°£l
 < 0) {

62
	`˝röt
(
POP_Y
+3,
POP_X
+5, ">");

64
	`˝röt
(
POP_Y
+5,
POP_X
+5, ">");

66
	`waô_keyup
();

67 !
sÊag
) {

68 
	`gë_key
()) {

71 i‡(
v
->
ã°£l
 >= 9) {

72
baû
++;

74
v
->
ã°£l
 = -1;

75
	`föd_ticks_f‹_∑ss
();

76
sÊag
++;

77
	`˝röt
(
LINE_INFO
,
COL_TST
, "Std");

81
baû
++;

82
sÊag
++;

86
	`p›˛ór
();

87
	`˝röt
(
POP_Y
+1,
POP_X
+3,

89
	`˝röt
(
POP_Y
+4,
POP_X
+5,

91
i
 =
	`gëvÆ
(
POP_Y
+4,
POP_X
+24, 0);

92 i‡(
i
 <= 9) {

93 i‡(
i
 !
v
->
ã°£l
) {

94
v
->
∑ss
 = -1;

95
v
->
ã°
 = -1;

97
v
->
ã°£l
 =
i
;

99
	`föd_ticks_f‹_∑ss
();

100
sÊag
++;

101
baû
++;

102
	`˝röt
(
LINE_INFO
,
COL_TST
, "#");

103
	`d¥öt
(
LINE_INFO
,
COL_TST
+1,
i
, 2, 1);

106 i‡(
v
->
ã°£l
 != 9) {

107
v
->
∑ss
 = -1;

108
v
->
ã°
 = -1;

110
v
->
ã°£l
 = 9;

111
	`föd_ticks_f‹_∑ss
();

112
sÊag
++;

113
baû
++;

114
	`˝röt
(
LINE_INFO
,
COL_TST
, "#");

115
	`d¥öt
(
LINE_INFO
,
COL_TST
+1, 9, 3, 1);

133
sÊag
++;

137
	`p›˛ór
();

141
	`p›˛ór
();

142
	`˝röt
(
POP_Y
+1,
POP_X
+2, "Test Address Range:");

143
	`˝röt
(
POP_Y
+3,
POP_X
+6, "(1) Set Lower Limit");

144
	`˝röt
(
POP_Y
+4,
POP_X
+6, "(2) Set Upper Limit");

145
	`˝röt
(
POP_Y
+5,
POP_X
+6, "(3) Test All Memory");

146
	`˝röt
(
POP_Y
+6,
POP_X
+6, "(0) Continue");

147
	`waô_keyup
();

148 !
sÊag
) {

149 
	`gë_key
()) {

152
	`p›˛ór
();

153
	`˝röt
(
POP_Y
+2,
POP_X
+4,

155
	`˝röt
(
POP_Y
+4,
POP_X
+4,

157
	`≠röt
(
POP_Y
+4,
POP_X
+13,
v
->
∂im_lowî
);

158
	`˝röt
(
POP_Y
+6,
POP_X
+4,

160
∑ge
 =
	`gëvÆ
(
POP_Y
+6,
POP_X
+9, 12);

161 i‡(
∑ge
 + 1 <
v
->
∂im_uµî
) {

162
v
->
∂im_lowî
 =
∑ge
;

163
v
->
ã°
--;

164
baû
++;

166
	`adj_mem
();

167
	`föd_ticks_f‹_∑ss
();

168
sÊag
++;

172
	`p›˛ór
();

173
	`˝röt
(
POP_Y
+2,
POP_X
+4,

175
	`˝röt
(
POP_Y
+4,
POP_X
+4,

177
	`≠röt
(
POP_Y
+4,
POP_X
+13,
v
->
∂im_uµî
);

178
	`˝röt
(
POP_Y
+6,
POP_X
+4,

180
∑ge
 =
	`gëvÆ
(
POP_Y
+6,
POP_X
+9, 12);

181 i‡(
∑ge
 - 1 >
v
->
∂im_lowî
) {

182
v
->
∂im_uµî
 =
∑ge
;

183
v
->
ã°
--;

184
baû
++;

186
	`adj_mem
();

187
	`föd_ticks_f‹_∑ss
();

188
sÊag
++;

192
v
->
∂im_lowî
 = 0;

193
v
->
∂im_uµî
 = v->
pm≠
[v->
m£gs
 - 1].
íd
;

194
v
->
ã°
--;

195
baû
++;

196
	`adj_mem
();

197
	`föd_ticks_f‹_∑ss
();

198
sÊag
++;

203
sÊag
++;

207
	`p›˛ór
();

211
	`p›˛ór
();

212
	`˝röt
(
POP_Y
+1,
POP_X
+2, "Memory Sizing:");

213
	`˝röt
(
POP_Y
+3,
POP_X
+6, "(1) BIOS - Std");

214
	`˝röt
(
POP_Y
+4,
POP_X
+6, "(2) Probe");

215
	`˝röt
(
POP_Y
+5,
POP_X
+6, "(0) Continue");

216 if(!
e820_ƒ
){

217 i‡(
memsz_mode
 =
SZ_MODE_BIOS
) {

218
	`˝röt
(
POP_Y
+3,
POP_X
+5, ">");

220
	`˝röt
(
POP_Y
+4,
POP_X
+5, ">");

223
	`waô_keyup
();

224 !
sÊag
) {

225 
	`gë_key
()) {

227
memsz_mode
 =
SZ_MODE_BIOS
;

228
	`waô_keyup
();

229
	`ª°¨t
();

233
memsz_mode
 =
SZ_MODE_PROBE
;

234
	`waô_keyup
();

235
	`ª°¨t
();

241
sÊag
++;

245
	`p›˛ór
();

249
	`p›˛ór
();

250
	`˝röt
(
POP_Y
+1,
POP_X
+2, "Printing Mode:");

251
	`˝röt
(
POP_Y
+3,
POP_X
+6, "(1) Error Summary");

252
	`˝röt
(
POP_Y
+4,
POP_X
+6, "(2) Individual Errors");

253
	`˝röt
(
POP_Y
+5,
POP_X
+6, "(3) BadRAM Patterns");

254
	`˝röt
(
POP_Y
+6,
POP_X
+6, "(4) Error Counts Only");

255
	`˝röt
(
POP_Y
+7,
POP_X
+6, "(5) DMI Device Name");

256
	`˝röt
(
POP_Y
+8,
POP_X
+6, "(6) Beep on Error");

257
	`˝röt
(
POP_Y
+10,
POP_X
+6, "(0) Cancel");

258
	`˝röt
(
POP_Y
+3+
v
->
¥ötmode
,
POP_X
+5, ">");

259 i‡(
bìpmode
Ë{
	`˝röt
(
POP_Y
+8,
POP_X
+5, ">"); }

260
	`waô_keyup
();

261 !
sÊag
) {

262 
	`gë_key
()) {

265
v
->
¥ötmode
=
PRINTMODE_SUMMARY
;

266
v
->
îri
.
ódr
 = 0;

267
v
->
îri
.
hdr_Êag
 = 0;

268
sÊag
++;

272
v
->
¥ötmode
=
PRINTMODE_ADDRESSES
;

273
v
->
îri
.
ódr
 = 0;

274
v
->
îri
.
hdr_Êag
 = 0;

275
v
->
msg_löe
 =
LINE_SCROLL
-1;

276
sÊag
++;

280
v
->
¥ötmode
=
PRINTMODE_PATTERNS
;

281
v
->
îri
.
hdr_Êag
 = 0;

282
sÊag
++;

283
¥t
++;

287
v
->
¥ötmode
=
PRINTMODE_NONE
;

288
v
->
îri
.
hdr_Êag
 = 0;

289
sÊag
++;

293
v
->
¥ötmode
=
PRINTMODE_DMI
;

294
v
->
îri
.
hdr_Êag
 = 0;

295
sÊag
++;

299
bìpmode
 = !beepmode;

300
sÊag
++;

305
sÊag
++;

309
	`p›˛ór
();

313
	`p›2up
();

314
	`¥öt_dmi_öfo
();

315
	`p›2down
();

319
	`p›˛ór
();

320
	`˝röt
(
POP_Y
+1,
POP_X
+2, "ECC Polling Mode:");

321
	`˝röt
(
POP_Y
+3,
POP_X
+6, "(1) Recommended");

322
	`˝röt
(
POP_Y
+4,
POP_X
+6, "(2) On");

323
	`˝röt
(
POP_Y
+5,
POP_X
+6, "(3) Off");

324
	`˝röt
(
POP_Y
+6,
POP_X
+6, "(0) Continue");

325
	`waô_keyup
();

326 !
sÊag
) {

327 
	`gë_key
()) {

329
	`£t_ecc_pﬁlög
(-1);

330
sÊag
++;

333
	`£t_ecc_pﬁlög
(1);

334
sÊag
++;

337
	`£t_ecc_pﬁlög
(0);

338
sÊag
++;

343
sÊag
++;

347
	`p›˛ór
();

350
	`waô_keyup
();

351
	`ª°¨t
();

354
ª¥öt_s¸ìn
 = 1;

355
Êag
++;

358
	`p›down
();

359
	`show_•d
();

360
	`p›up
();

361
sÊag
++;

367
Êag
++;

371
	`p›down
();

372 i‡(
¥t
) {

373
	`¥öç©n
();

375 i‡(
ª¥öt_s¸ìn
){

376
	`ây_¥öt_s¸ìn
();

378
	}
}

381 
	$p›up
()

383 
i
,
j
;

384 *
µ
;

386 
i
=
POP_Y
; i<POP_Y +
POP_H
; i++) {

387 
j
=
POP_X
; j<POP_X +
POP_W
; j++) {

388
µ
 = (*)(
SCREEN_ADR
 + (
i
 * 160Ë+ (
j
 * 2));

389
ßve
[0][
i
-
POP_Y
][
j
-
POP_X
] = *
µ
;

390
	`£t_s¸n_buf
(
i
,
j
, ' ');

391 *
µ
 = ' ';

392
µ
++;

393
ßve
[1][
i
-
POP_Y
][
j
-
POP_X
] = *
µ
;

394 *
µ
 = 0x07;

397
	`ây_¥öt_ªgi⁄
(
POP_Y
,
POP_X
, POP_Y+
POP_H
, POP_X+
POP_W
);

398
	}
}

400 
	$p›down
()

402 
i
,
j
;

403 *
µ
;

405 
i
=
POP_Y
; i<POP_Y +
POP_H
; i++) {

406 
j
=
POP_X
; j<POP_X +
POP_W
; j++) {

407
µ
 = (*)(
SCREEN_ADR
 + (
i
 * 160Ë+ (
j
 * 2));

408 *
µ
 =
ßve
[0][
i
-
POP_Y
][
j
-
POP_X
];

409
	`£t_s¸n_buf
(
i
,
j
,
ßve
[0][i-
POP_Y
][j-
POP_X
]);

410
µ
++;

411 *
µ
 =
ßve
[1][
i
-
POP_Y
][
j
-
POP_X
];

414
	`ây_¥öt_ªgi⁄
(
POP_Y
,
POP_X
, POP_Y+
POP_H
, POP_X+
POP_W
);

415
	}
}

417 
	$p›˛ór
()

419 
i
,
j
;

420 *
µ
;

422 
i
=
POP_Y
; i<POP_Y +
POP_H
; i++) {

423 
j
=
POP_X
; j<POP_X +
POP_W
; j++) {

424
µ
 = (*)(
SCREEN_ADR
 + (
i
 * 160Ë+ (
j
 * 2));

425 *
µ
 = ' ';

426
	`£t_s¸n_buf
(
i
,
j
, ' ');

427
µ
++;

430
	`ây_¥öt_ªgi⁄
(
POP_Y
,
POP_X
, POP_Y+
POP_H
, POP_X+
POP_W
);

431
	}
}

434 
	$p›2up
()

436 
i
,
j
;

437 *
µ
;

439 
i
=
POP2_Y
; i<POP2_Y +
POP2_H
; i++) {

440 
j
=
POP2_X
; j<POP2_X +
POP2_W
; j++) {

441
µ
 = (*)(
SCREEN_ADR
 + (
i
 * 160Ë+ (
j
 * 2));

442
ßve2
[0][
i
-
POP2_Y
][
j
-
POP2_X
] = *
µ
;

443
	`£t_s¸n_buf
(
i
,
j
, ' ');

444 *
µ
 = ' ';

445
µ
++;

446
ßve2
[1][
i
-
POP2_Y
][
j
-
POP2_X
] = *
µ
;

447 *
µ
 = 0x07;

450
	`ây_¥öt_ªgi⁄
(
POP2_Y
,
POP2_X
, POP2_Y+
POP2_H
, POP2_X+
POP2_W
);

451
	}
}

453 
	$p›2down
()

455 
i
,
j
;

456 *
µ
;

458 
i
=
POP2_Y
; i<POP2_Y +
POP2_H
; i++) {

459 
j
=
POP2_X
; j<POP2_X +
POP2_W
; j++) {

460
µ
 = (*)(
SCREEN_ADR
 + (
i
 * 160Ë+ (
j
 * 2));

461 *
µ
 =
ßve2
[0][
i
-
POP2_Y
][
j
-
POP2_X
];

462
	`£t_s¸n_buf
(
i
,
j
,
ßve2
[0][i-
POP2_Y
][j-
POP2_X
]);

463
µ
++;

464 *
µ
 =
ßve2
[1][
i
-
POP2_Y
][
j
-
POP2_X
];

467
	`ây_¥öt_ªgi⁄
(
POP2_Y
,
POP2_X
, POP2_Y+
POP2_H
, POP2_X+
POP2_W
);

468
	}
}

470 
	$p›2˛ór
()

472 
i
,
j
;

473 *
µ
;

475 
i
=
POP2_Y
; i<POP2_Y +
POP2_H
; i++) {

476 
j
=
POP2_X
; j<POP2_X +
POP2_W
; j++) {

477
µ
 = (*)(
SCREEN_ADR
 + (
i
 * 160Ë+ (
j
 * 2));

478 *
µ
 = ' ';

479
	`£t_s¸n_buf
(
i
,
j
, ' ');

480
µ
++;

483
	`ây_¥öt_ªgi⁄
(
POP2_Y
,
POP2_X
, POP2_Y+
POP2_H
, POP2_X+
POP2_W
);

484
	}
}

486 
	$˛ór_s¸ìn
()

488 
i
;

489 vﬁ©ûê*
µ
;

491 
i
=0,
µ
=(*)(
SCREEN_ADR
); i<80*24; i++) {

492 *
µ
++ = ' ';

493 *
µ
++ = 0x07;

495
	}
}

497 
	$adj_mem
()

499 
i
;

501
v
->
£À˘ed_∑ges
 = 0;

502 
i
=0; i<
v
->
m£gs
; i++) {

504 i‡(
v
->
pm≠
[
i
].
°¨t
 >v->
∂im_lowî
 &&

505
v
->
pm≠
[
i
].
íd
 <v->
∂im_uµî
) {

506
v
->
£À˘ed_∑ges
 +(v->
pm≠
[
i
].
íd
 - v->pm≠[i].
°¨t
);

510 i‡(
v
->
pm≠
[
i
].
°¨t
 < v->
∂im_lowî
) {

512 i‡(
v
->
pm≠
[
i
].
íd
 < v->
∂im_lowî
) {

517 i‡(
v
->
pm≠
[
i
].
íd
 > v->
∂im_uµî
) {

518
v
->
£À˘ed_∑ges
 +=

519
v
->
∂im_uµî
 - v->
∂im_lowî
;

522
v
->
£À˘ed_∑ges
 +=

523 (
v
->
pm≠
[
i
].
íd
 - v->
∂im_lowî
);

528 i‡(
v
->
pm≠
[
i
].
íd
 > v->
∂im_uµî
) {

530 i‡(
v
->
pm≠
[
i
].
°¨t
 > v->
∂im_uµî
) {

534
v
->
£À˘ed_∑ges
 +=

535 (
v
->
∂im_uµî
 - v->
pm≠
[
i
].
°¨t
);

538
	}
}

	@config.h

11 
	#PARITY_MEM


	)

16 
	#SERIAL_CONSOLE_DEFAULT
 0

	)

19 
	#SERIAL_TTY
 0

	)

22 
	#SERIAL_BAUD_RATE
 9600

	)

25 
	#START_FAIL_SAFE
 0

	)

28 
	#BEEP_MODE
 0

	)

31 
	#BEEP_END_NO_ERROR
 0

	)

34 
	#FIRST_PASS_HALF_ITERATIONS
 1

	)

42 
	#APM_OFF


	)

47 
	#USB_WAR


	)

	@controller.c

11 
	~"defs.h
"

12 
	~"c⁄fig.h
"

13 
	~"ã°.h
"

14 
	~"pci.h
"

15 
	~"c⁄åﬁÀr.h
"

16 
	~"•d.h
"

17 
	~"ã°.h
"

20 
	gcﬁ
,
	gcﬁ2
;

21 
	gnhm_bus
 = 0x3F;

23 
ul⁄g

ext˛ock
;

24 
imc_ty≥
;

25 
˝u_idít

˝u_id
;

26 
Áû_ß„
;

28 
	#rdm§
(
m§
,
vÆ1
,
vÆ2
) \

29
__asm__

	`__vﬁ©ûe__
("rdmsr" \

30 : "˜" (
vÆ1
), "=d" (
vÆ2
) \

31 : "c" (
m§
))

	)

33 
	#wrm§
(
m§
,
vÆ1
,
vÆ2
) \

34
__asm__

	`__vﬁ©ûe__
("wrmsr" \

36 : "c" (
m§
), "a" (
vÆ1
), "d" (
vÆ2
))

	)

39 
	#__ECC_UNEXPECTED
 1

	)

40 
	#__ECC_DETECT
 2

	)

41 
	#__ECC_CORRECT
 4

	)

42 
	#__ECC_SCRUB
 8

	)

43 
	#__ECC_CHIPKILL
 16

	)

45 
	#ECC_UNKNOWN
 (~0ULË

	)

46 
	#ECC_NONE
 0

	)

47 
	#ECC_RESERVED

__ECC_UNEXPECTED


	)

48 
	#ECC_DETECT

__ECC_DETECT


	)

49 
	#ECC_CORRECT
 (
__ECC_DETECT
 |
__ECC_CORRECT
)

	)

50 
	#ECC_CHIPKILL
 (
__ECC_DETECT
 |
__ECC_CORRECT
 |
__ECC_CHIPKILL
)

	)

51 
	#ECC_SCRUB
 (
__ECC_DETECT
 |
__ECC_CORRECT
 |
__ECC_SCRUB
)

	)

54 
	secc_öfo
 {

55 
	mödex
;

56 
	mpﬁl
;

57 
	mbus
;

58 
	mdev
;

59 
	m‚
;

60 
	mˇp
;

61 
	mmode
;

62 }
	g˘æ
 =

64 .
ödex
 = 0,

69 .
	gbus
 = 0,

70 .
	gdev
 = 0,

71 .
	g‚
 = 0,

73 .
	gˇp
 =
ECC_UNKNOWN
,

74 .
	gmode
 =
ECC_UNKNOWN
,

77 
	spci_mem‹y_c⁄åﬁÀr
 {

78 
	mvíd‹
;

79 
	mdevi˚
;

80 *
	m«me
;

81 
	mã°ed
;

82 (*
	mpﬁl_fsb
)();

83 (*
	mpﬁl_timögs
)();

84 (*
	m£tup_ecc
)();

85 (*
	mpﬁl_îr‹s
)();

89 
	$¥öt_timögs_öfo
(
ˇs
, 
rcd
, 
Ω
, 
øs
) {

92
	`˝röt
(
LINE_CPU
+6,
cﬁ2
 +1, "/ CAS : ");

93
cﬁ2
 += 9;

96 i‡(
ˇs
 == 1.5) {

97
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "1.5"); col2 += 3;

98 } i‡(
ˇs
 == 2.5) {

99
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "2.5"); col2 += 3;

100 } i‡(
ˇs
 < 10) {

101
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
ˇs
, 1, 0); col2 += 1;

103
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
ˇs
, 2, 0); col2 += 2;

105
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "-"); col2 += 1;

108 i‡(
rcd
 < 10) {

109
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
rcd
, 1, 0);

110
cﬁ2
 += 1;

112
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
rcd
, 2, 0);

113
cﬁ2
 += 2;

115
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "-"); col2 += 1;

118 i‡(
Ω
 < 10) {

119
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
Ω
, 1, 0);

120
cﬁ2
 += 1;

122
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
Ω
, 2, 0);

123
cﬁ2
 += 2;

125
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "-"); col2 += 1;

128 i‡(
øs
 < 10) {

129
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
øs
, 1, 0);

130
cﬁ2
 += 2;

132
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
øs
, 2, 0);

133
cﬁ2
 += 3;

136
	}
}

138 
	$¥öt_fsb_öfo
(
vÆ
, c⁄° *
ãxt_fsb
, c⁄° *
ãxt_ddr
) {

140 
i
;

142
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "Settings: ");

143
cﬁ2
 += 10;

144
	`˝röt
(
LINE_CPU
+6,
cﬁ2
,
ãxt_fsb
);

145
cﬁ2
 += 6;

146
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
vÆ
 ,3 ,0);

147
cﬁ2
 += 3;

148
	`˝röt
(
LINE_CPU
+6,
cﬁ2
 +1, "MHz (");

149
cﬁ2
 += 6;

151
	`˝röt
(
LINE_CPU
+6,
cﬁ2
,
ãxt_ddr
);

152 
i
 = 0;
ãxt_ddr
[i] !'\0'; i++Ë{
cﬁ2
++; }

154 if(
vÆ
 < 500) {

155
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
vÆ
*2 ,3 ,0);

156
cﬁ2
 += 3;

158
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
vÆ
*2 ,4 ,0);

159
cﬁ2
 += 4;

161
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, ")");

162
cﬁ2
 += 1;

163
	}
}

167 
	$pﬁl_fsb_nŸhög
()

171
	}
}

173 
	$pﬁl_timögs_nŸhög
()

177
	}
}

179 
	$pﬁl_fsb_Áûß„
()

182
	`˝röt
(
LINE_CPU
+5, 0, "Chipset/IMC : ***FAIL SAFE***FAIL SAFE***FAIL SAFE***FAIL SAFE***FAIL SAFE***");

183
	`˝röt
(
LINE_CPU
+6, 0, "*** Memtest86+ isÑunning in fail safe mode. SameÑeliability,Üess details ***");

185
	}
}

186 
	$£tup_nŸhög
()

188
˘æ
.
ˇp
 =
ECC_NONE
;

189
˘æ
.
mode
 =
ECC_NONE
;

190
	}
}

192 
	$pﬁl_nŸhög
()

198
	}
}

200 
	$£tup_wmr
()

204
ul⁄g

dev0
;

205
˘æ
.
ˇp
 =
ECC_CORRECT
;

207
	`pci_c⁄f_ªad
–0, 0, 0, 0x48, 4, &
dev0
);

208 i‡(!(
dev0
 & 0x1)) {

209
	`pci_c⁄f_wrôe
–0, 0, 0, 0x48, 1,
dev0
 | 1);

212
˘æ
.
mode
 =
ECC_NONE
;

214
	}
}

217 
	$£tup_nhm
()

219 
possibÀ_nhm_bus
[] = {0xFF, 0x7F, 0x3F};

220 
did
,
vid
,
mc_c⁄åﬁ
,
mc_s§c⁄åﬁ
;

221 
i
;

224
˘æ
.
ˇp
 =
ECC_SCRUB
;

225
˘æ
.
mode
 =
ECC_NONE
;

229 
i
 = 0; i < (
possibÀ_nhm_bus
); i++) {

230
	`pci_c⁄f_ªad
–
possibÀ_nhm_bus
[
i
], 3, 4, 0x00, 2, &
vid
);

231
	`pci_c⁄f_ªad
–
possibÀ_nhm_bus
[
i
], 3, 4, 0x02, 2, &
did
);

232
vid
 &= 0xFFFF;

233
did
 &= 0xFF00;

234 if(
vid
 =0x8086 &&
did
 >= 0x2C00) {

235
nhm_bus
 =
possibÀ_nhm_bus
[
i
];

242
	`pci_c⁄f_ªad
(
nhm_bus
, 3, 0, 0x4C, 2, &
mc_c⁄åﬁ
);

243 if((
mc_c⁄åﬁ
 >> 4) & 1) {

244
˘æ
.
mode
 =
ECC_CORRECT
;

245
	`pci_c⁄f_ªad
(
nhm_bus
, 3, 2, 0x48, 2, &
mc_s§c⁄åﬁ
);

246 if(
mc_s§c⁄åﬁ
 & 3) {

247
˘æ
.
mode
 =
ECC_SCRUB
;

251
	}
}

253 
	$£tup_nhm32
()

255 
possibÀ_nhm_bus
[] = {0xFF, 0x7F, 0x3F};

256 
did
,
vid
,
mc_c⁄åﬁ
,
mc_s§c⁄åﬁ
;

257 
i
;

260
˘æ
.
ˇp
 =
ECC_SCRUB
;

261
˘æ
.
mode
 =
ECC_NONE
;

265 
i
 = 0; i < (
possibÀ_nhm_bus
); i++) {

266
	`pci_c⁄f_ªad
–
possibÀ_nhm_bus
[
i
], 3, 4, 0x00, 2, &
vid
);

267
	`pci_c⁄f_ªad
–
possibÀ_nhm_bus
[
i
], 3, 4, 0x02, 2, &
did
);

268
vid
 &= 0xFFFF;

269
did
 &= 0xFF00;

270 if(
vid
 =0x8086 &&
did
 >= 0x2C00) {

271
nhm_bus
 =
possibÀ_nhm_bus
[
i
];

277
	`pci_c⁄f_ªad
(
nhm_bus
, 3, 0, 0x48, 2, &
mc_c⁄åﬁ
);

278 if((
mc_c⁄åﬁ
 >> 1) & 1) {

279
˘æ
.
mode
 =
ECC_CORRECT
;

280
	`pci_c⁄f_ªad
(
nhm_bus
, 3, 2, 0x48, 2, &
mc_s§c⁄åﬁ
);

281 if(
mc_s§c⁄åﬁ
 & 1) {

282
˘æ
.
mode
 =
ECC_SCRUB
;

286
	}
}

288 
	$£tup_amd64
()

291 c⁄° 
ddim
[] = {
ECC_NONE
,
ECC_CORRECT
,
ECC_RESERVED
,
ECC_CHIPKILL
 };

292 
nbxcfg
;

293 
mcg§l
;

294 
mcg°h
;

295 
mˇnb
;

296 
døm˛
;

299
˘æ
.
ˇp
 =
ECC_CHIPKILL
;

302
	`pci_c⁄f_ªad
(0, 24, 2, 0x90, 4, &
døm˛
);

305 i‡(((
˝u_id
.
ext
 >> 16) & 0xF) >= 4) {

308 i‡((
døm˛
 >> 19)&1){

310
	`pci_c⁄f_ªad
(0, 24, 3, 0x44, 4, &
nbxcfg
);

311
˘æ
.
mode
 =
ddim
[(
nbxcfg
 >> 22)&3];

313
˘æ
.
mode
 =
ECC_NONE
;

316
	`rdm§
(0x017B,
mcg§l
,
mcg°h
);

317
	`wrm§
(0x017B, 0x10,
mcg°h
);

320
	`pci_c⁄f_ªad
(0, 24, 3, 0x4C, 4, &
mˇnb
);

321
	`pci_c⁄f_wrôe
(0, 24, 3, 0x4C, 4,
mˇnb
 & 0x7FFFFFFF );

326 i‡((
døm˛
 >> 17)&1){

328
	`pci_c⁄f_ªad
(0, 24, 3, 0x44, 4, &
nbxcfg
);

329
˘æ
.
mode
 =
ddim
[(
nbxcfg
 >> 22)&3];

331
˘æ
.
mode
 =
ECC_NONE
;

334
	`rdm§
(0x017B,
mcg§l
,
mcg°h
);

335
	`wrm§
(0x017B, 0x10,
mcg°h
);

338
	`pci_c⁄f_ªad
(0, 24, 3, 0x4C, 4, &
mˇnb
);

339
	`pci_c⁄f_wrôe
(0, 24, 3, 0x4C, 4,
mˇnb
 & 0x7F801EFC );

341
	}
}

343 
	$£tup_k10
()

345 c⁄° 
ddim
[] = {
ECC_NONE
,
ECC_CORRECT
,
ECC_CHIPKILL
, ECC_CHIPKILL };

346 
nbxcfg
;

347 
mcg§l
;

348 
mcg°h
;

349 
mˇnb
;

350 
døm˛
;

351
ul⁄g

m§_low
,
m§_high
;

354
˘æ
.
ˇp
 =
ECC_CHIPKILL
;

357
	`pci_c⁄f_ªad
(0, 24, 2, 0x90, 4, &
døm˛
);

359 i‡((
døm˛
 >> 19)&1){

361
	`pci_c⁄f_ªad
(0, 24, 3, 0x44, 4, &
nbxcfg
);

362
˘æ
.
mode
 =
ddim
[(
nbxcfg
 >> 22)&3];

364
˘æ
.
mode
 =
ECC_NONE
;

367
	`rdm§
(0x017B,
mcg§l
,
mcg°h
);

368
	`wrm§
(0x017B, 0x10,
mcg°h
);

371
	`pci_c⁄f_ªad
(0, 24, 3, 0x4C, 4, &
mˇnb
);

372
	`pci_c⁄f_wrôe
(0, 24, 3, 0x4C, 4,
mˇnb
 & 0x7FFFFFFF );

375
	`rdm§
(0xC001001F,
m§_low
,
m§_high
);

376
	`wrm§
(0xC001001F,
m§_low
, (
m§_high
 | 0x4000));

377
	`rdm§
(0xC001001F,
m§_low
,
m§_high
);

379
	}
}

381 
	$pﬁl_amd64
()

384 
mˇnb
;

385 
∑ge
,
off£t
;

386 
˚log_syndrome
;

387 
mˇnb_add
;

389
	`pci_c⁄f_ªad
(0, 24, 3, 0x4C, 4, &
mˇnb
);

391 i‡(((
mˇnb
 >> 31)&1) && ((mcanb >> 14)&1)) {

395
	`pci_c⁄f_ªad
(0, 24, 3, 0x50, 4, &
mˇnb_add
);

398
˚log_syndrome
 = (
mˇnb
 >> 15)&0xFF;

401
∑ge
 = (
mˇnb_add
 >> 12);

402
off£t
 = (
mˇnb_add
 >> 3) & 0xFFF;

405
	`¥öt_ecc_îr
(
∑ge
,
off£t
, 1,
˚log_syndrome
, 0);

408
	`pci_c⁄f_wrôe
(0, 24, 3, 0x4C, 4,
mˇnb
 & 0x7FFFFFFF );

410 i‡(((
mˇnb
 >> 31)&1) && ((mcanb >> 13)&1)) {

413
	`pci_c⁄f_ªad
(0, 24, 3, 0x50, 4, &
mˇnb_add
);

416
∑ge
 = (
mˇnb_add
 >> 12);

417
off£t
 = (
mˇnb_add
 >> 3) & 0xFFF;

420
	`¥öt_ecc_îr
(
∑ge
,
off£t
, 0, 0, 0);

423
	`pci_c⁄f_wrôe
(0, 24, 3, 0x4C, 4,
mˇnb
 & 0x7FFFFFF );

427
	}
}

429 
	$£tup_amd751
()

431 
døm_°©us
;

434
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x5a, 2, &
døm_°©us
);

435
˘æ
.
ˇp
 =
ECC_CORRECT
;

436
˘æ
.
mode
 = (
døm_°©us
 & (1 << 2))?
ECC_CORRECT
:
ECC_NONE
;

437
	}
}

439 
	$pﬁl_amd751
()

441 
ecc_°©us
;

442 
b™k_addr
;

443 
b™k_öfo
;

444 
∑ge
;

445 
bôs
;

446 
i
;

449
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x58, 2, &
ecc_°©us
);

450 i‡(
ecc_°©us
 & (3 << 8)) {

451 
i
 = 0; i < 6; i++) {

452 i‡(!(
ecc_°©us
 & (1 <<
i
))) {

456
b™k_addr
 = 0x40 + (
i
 << 1);

459
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
,
b™k_addr
, 2, &
b™k_öfo
);

462
∑ge
 = (
b™k_öfo
 & 0xFF80) << 4;

463
bôs
 = (((
ecc_°©us
 >> 8) &3) == 2)?1:2;

466
	`¥öt_ecc_îr
(
∑ge
, 0,
bôs
==1?1:0, 0, 0);

471
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x58, 2, 0);

473
	}
}

487 
	$£tup_amd76x
()

489 c⁄° 
ddim
[] = {
ECC_NONE
,
ECC_DETECT
,
ECC_CORRECT
, ECC_CORRECT };

490 
ecc_mode_°©us
;

493
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x48, 4, &
ecc_mode_°©us
);

494
˘æ
.
ˇp
 =
ECC_CORRECT
;

495
˘æ
.
mode
 =
ddim
[(
ecc_mode_°©us
 >> 10)&3];

496
	}
}

498 
	$pﬁl_amd76x
()

500 
ecc_mode_°©us
;

501 
b™k_addr
;

502 
b™k_öfo
;

503 
∑ge
;

506
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x48, 4, &
ecc_mode_°©us
);

508 i‡(
ecc_mode_°©us
 & (1 << 9)) {

510
b™k_addr
 = 0xC0 + (((
ecc_mode_°©us
 >> 4) & 0xf) << 2);

513
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
,
b™k_addr
, 4, &
b™k_öfo
);

516
∑ge
 = (
b™k_öfo
 & 0xFF800000) >> 12;

519
	`¥öt_ecc_îr
(
∑ge
, 0, 1, 0, 0);

523 i‡(
ecc_mode_°©us
 & (1 << 8)) {

525
b™k_addr
 = 0xC0 + (((
ecc_mode_°©us
 >> 0) & 0xf) << 2);

528
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
,
b™k_addr
, 4, &
b™k_öfo
);

531
∑ge
 = (
b™k_öfo
 & 0xFF800000) >> 12;

534
	`¥öt_ecc_îr
(
∑ge
, 0, 0, 0, 0);

538 i‡(
ecc_mode_°©us
 & (3 << 8)) {

539
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x48, 4,
ecc_mode_°©us
);

541
	}
}

543 
	$£tup_˙b20
()

546
˘æ
.
ˇp
 =
ECC_CORRECT
;

551
	}
}

553 
	$£tup_E5400
()

555 
mcs
;

559
	`pci_c⁄f_ªad
(
˘æ
.
bus
, 16, 1, 0x40, 4, &
mcs
);

562
˘æ
.
mode
 = 0;

563
˘æ
.
ˇp
 =
ECC_SCRUB
;

566 i‡(((
mcs
 >> 5) & 1) == 1) {

567
˘æ
.
mode
 |
ECC_CORRECT
;

571 i‡(((
mcs
 >> 7) & 1) == 1) {

572
˘æ
.
mode
 |
__ECC_SCRUB
;

574
	}
}

577 
	$£tup_iE7xxx
()

579 
mchcfgns
;

580 
drc
;

581 
devi˚
;

582 
dv≈
;

585
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x52, 2, &
mchcfgns
);

586
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x7C, 4, &
drc
);

589
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x02, 2, &
devi˚
);

592
˘æ
.
mode
 = 0;

593
˘æ
.
ˇp
 =
ECC_CORRECT
;

596 i‡(((
drc
 >> 20) & 3) == 2) {

597
˘æ
.
mode
 |
ECC_CORRECT
;

601 i‡(
devi˚
 != 0x255d) {

604
˘æ
.
ˇp
 =
ECC_SCRUB
;

605 i‡(
mchcfgns
 & 1) {

606
˘æ
.
mode
 |
__ECC_SCRUB
;

611
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xE0, 2, &
dv≈
);

612
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
 , 0xE0, 2, (
dv≈
 & 0xFE));

615
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
 +1, 0x88, 1, 0x0);

616
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
 +1, 0x8A, 1, 0x0);

617
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
 +1, 0x8C, 1, 0x0);

623
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
 +1, 0x80, 1, 3);

624
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
 +1, 0x82, 1, 3);

627
	}
}

629 
	$£tup_iE7520
()

631 
mchs¸b
;

632 
drc
;

633 
dv≈1
;

636
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x52, 2, &
mchs¸b
);

637
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x7C, 4, &
drc
);

640
˘æ
.
mode
 = 0;

641
˘æ
.
ˇp
 =
ECC_CORRECT
;

644 i‡(((
drc
 >> 20) & 3) != 0) {

645
˘æ
.
mode
 |
ECC_CORRECT
;

649
˘æ
.
ˇp
 =
ECC_SCRUB
;

650 i‡((
mchs¸b
 & 3) == 2) {

651
˘æ
.
mode
 |
__ECC_SCRUB
;

655
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xF4, 1, &
dv≈1
);

656
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
 , 0xF4, 1, (
dv≈1
 | 0x20));

659
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
 +1, 0x80, 2, 0x4747);

660
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
 +1, 0x82, 2, 0x4747);

661
	}
}

663 
	$pﬁl_iE7xxx
()

665 
„º
;

666 
√º
;

668
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
 +1, 0x80, 1, &
„º
);

669
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
 +1, 0x82, 1, &
√º
);

671 i‡(
„º
 & 1) {

673 
˚log_add
;

674 
˚log_syndrome
;

675 
∑ge
;

678
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
 +1, 0xA0, 4, &
˚log_add
);

680
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
 +1, 0xD0, 2, &
˚log_syndrome
);

683
∑ge
 = (
˚log_add
 & 0x0FFFFFC0) >> 6;

686
	`¥öt_ecc_îr
(
∑ge
, 0, 1,
˚log_syndrome
, 0);

689
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
 +1, 0x80, 1,
„º
 & 3);

692 i‡(
„º
 & 2) {

694 
uc˚log_add
;

695 
∑ge
;

698
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
 +1, 0xB0, 4, &
uc˚log_add
);

701
∑ge
 = (
uc˚log_add
 & 0x0FFFFFC0) >> 6;

704
	`¥öt_ecc_îr
(
∑ge
, 0, 0, 0, 0);

707
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
 +1, 0x80, 1,
„º
 & 3);

711 i‡(
√º
 & 3) {

712
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
 +1, 0x82, 1,
√º
 & 3);

715
	}
}

717 
	$£tup_i440gx
()

719 c⁄° 
ddim
[] = {
ECC_NONE
,
ECC_DETECT
,
ECC_CORRECT
, ECC_CORRECT };

720 
nbxcfg
;

723
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x50, 4, &
nbxcfg
);

724
˘æ
.
ˇp
 =
ECC_CORRECT
;

725
˘æ
.
mode
 =
ddim
[(
nbxcfg
 >> 7)&3];

726
	}
}

728 
	$pﬁl_i440gx
()

730 
îr°s
;

731 
∑ge
;

732 
bôs
;

734
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x91, 2, &
îr°s
);

735 i‡(
îr°s
 & 0x11) {

736 
óp
;

738
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x80, 4, &
óp
);

741
∑ge
 = (
óp
 & 0xFFFFF000) >> 12;

742
bôs
 = 0;

743 i‡(
óp
 &3) {

744
bôs
 = ((
óp
 & 3) == 1)?1:2;

747 i‡(
bôs
) {

749
	`¥öt_ecc_îr
(
∑ge
, 0,
bôs
==1?1:0, 0, 0);

753
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x91, 2, 0x11);

754
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x80, 4, 3);

757
	}
}

758 
	$£tup_i840
()

760 c⁄° 
ddim
[] = {
ECC_NONE
,
ECC_RESERVED
,
ECC_CORRECT
, ECC_CORRECT };

761 
mchcfg
;

764
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x50, 2, &
mchcfg
);

765
˘æ
.
ˇp
 =
ECC_CORRECT
;

766
˘æ
.
mode
 =
ddim
[(
mchcfg
 >> 7)&3];

767
	}
}

769 
	$pﬁl_i840
()

771 
îr°s
;

772 
∑ge
;

773 
syndrome
;

774 
ch™√l
;

775 
bôs
;

777
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xC8, 2, &
îr°s
);

778 i‡(
îr°s
 & 3) {

779 
óp
;

780 
dîr˘l_°s
;

782
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xE4, 4, &
óp
);

783
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xE2, 2, &
dîr˘l_°s
);

786
∑ge
 = (
óp
 & 0xFFFFF800) >> 11;

787
ch™√l
 =
óp
 & 1;

788
syndrome
 =
dîr˘l_°s
 & 0xFF;

789
bôs
 = ((
îr°s
 & 3) == 1)?1:2;

792
	`¥öt_ecc_îr
(
∑ge
, 0,
bôs
==1?1:0,
syndrome
,
ch™√l
);

795
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xE2, 2, 3 << 10);

796
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xC8, 2, 3);

798
	}
}

799 
	$£tup_i875
()

802 *
±r
;

803
ul⁄g

dev0
,
dev6
 ;

807
˘æ
.
ˇp
 =
ECC_CORRECT
;

808
˘æ
.
mode
 =
ECC_NONE
;

812
	`pci_c⁄f_ªad
–0, 0, 0, 0xF4, 1, &
dev0
);

813
	`pci_c⁄f_wrôe
–0, 0, 0, 0xF4, 1, (
dev0
 | 0x2));

816
	`pci_c⁄f_ªad
–0, 6, 0, 0x04, 2, &
dev6
);

817
	`pci_c⁄f_wrôe
–0, 6, 0, 0x04, 2, (
dev6
 | 0x2));

820
	`pci_c⁄f_ªad
–0, 6, 0, 0x10, 4, &
dev6
);

821
±r
=(*)(
dev6
+0x68);

823 i‡(((*
±r
 >> 18)&1Ë=1Ë{
˘æ
.
mode
 =
ECC_CORRECT
; }

826
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xC8, 2, 0x81);

827
	}
}

829 
	$£tup_i925
()

833
ul⁄g

dev0
,
drc
;

834 
tﬁm
;

835 *
±r
;

837
	`pci_c⁄f_ªad
–0, 0, 0, 0x54, 4, &
dev0
);

838
dev0
 = dev0 | 0x10000000;

839
	`pci_c⁄f_wrôe
–0, 0, 0, 0x54, 4,
dev0
);

842
	`pci_c⁄f_ªad
–0, 0, 0, 0x44, 4, &
dev0
);

843 i‡(!(
dev0
 & 0xFFFFC000)) {

844
	`pci_c⁄f_ªad
–0, 0, 0, 0x9C, 1, &
tﬁm
);

845
	`pci_c⁄f_wrôe
–0, 0, 0, 0x47, 1,
tﬁm
 & 0xF8);

850
˘æ
.
ˇp
 =
ECC_CORRECT
;

852
dev0
 &= 0xFFFFC000;

853
±r
=(*)(
dev0
+0x120);

854
drc
 = *
±r
 & 0xFFFFFFFF;

856 i‡(((
drc
 >> 20) & 3) == 2) {

857
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xC8, 2, 3);

858
˘æ
.
mode
 =
ECC_CORRECT
;

860
˘æ
.
mode
 =
ECC_NONE
;

863
	}
}

865 
	$£tup_p35
()

869
ul⁄g

dev0
,
ˇpid0
;

871
	`pci_c⁄f_ªad
–0, 0, 0, 0x48, 4, &
dev0
);

872 i‡(!(
dev0
 & 0x1)) {

873
	`pci_c⁄f_wrôe
–0, 0, 0, 0x48, 1,
dev0
 | 1);

877
	`pci_c⁄f_ªad
–0, 0, 0, 0xE4, 4, &
ˇpid0
);

878 i‡((
ˇpid0
 >> 8) & 1) {

879
˘æ
.
ˇp
 =
ECC_NONE
;

881
˘æ
.
ˇp
 =
ECC_CORRECT
;

884
˘æ
.
mode
 =
ECC_NONE
;

886
	}
}

888 
	$pﬁl_i875
()

890 
îr°s
;

891 
∑ge
;

892 
des
;

893 
syndrome
;

894 
ch™√l
;

895 
bôs
;

897
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xC8, 2, &
îr°s
);

898 i‡(
îr°s
 & 0x81) {

899 
óp
;

900 
dîrsyn
;

902
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x58, 4, &
óp
);

903
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x5C, 1, &
dîrsyn
);

904
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x5D, 1, &
des
);

907
∑ge
 = (
óp
 & 0xFFFFF000) >> 12;

908
syndrome
 =
dîrsyn
;

909
ch™√l
 =
des
 & 1;

910
bôs
 = (
îr°s
 & 0x80)?0:1;

913
	`¥öt_ecc_îr
(
∑ge
, 0,
bôs
,
syndrome
,
ch™√l
);

916
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xC8, 2, 0x81);

918
	}
}

920 
	$£tup_i845
()

922 c⁄° 
ddim
[] = {
ECC_NONE
,
ECC_RESERVED
,
ECC_CORRECT
, ECC_RESERVED };

923 
drc
;

926
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x7C, 4, &
drc
);

927
˘æ
.
ˇp
 =
ECC_CORRECT
;

928
˘æ
.
mode
 =
ddim
[(
drc
 >> 20)&3];

929
	}
}

931 
	$pﬁl_i845
()

933 
îr°s
;

934 
∑ge
,
off£t
;

935 
syndrome
;

936 
bôs
;

938
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xC8, 2, &
îr°s
);

939 i‡(
îr°s
 & 3) {

940 
óp
;

941 
dîrsyn
;

943
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x8C, 4, &
óp
);

944
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x86, 1, &
dîrsyn
);

947
off£t
 = (
óp
 & 0xFE) << 4;

948
∑ge
 = (
óp
 & 0x3FFFFFFE) >> 8;

949
syndrome
 =
dîrsyn
;

950
bôs
 = ((
îr°s
 & 3) == 1)?1:2;

953
	`¥öt_ecc_îr
(
∑ge
,
off£t
,
bôs
==1?1:0,
syndrome
, 0);

956
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xC8, 2, 3);

958
	}
}

959 
	$£tup_i820
()

961 c⁄° 
ddim
[] = {
ECC_NONE
,
ECC_RESERVED
,
ECC_CORRECT
, ECC_CORRECT };

962 
mchcfg
;

965
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xbe, 2, &
mchcfg
);

966
˘æ
.
ˇp
 =
ECC_CORRECT
;

967
˘æ
.
mode
 =
ddim
[(
mchcfg
 >> 7)&3];

968
	}
}

970 
	$pﬁl_i820
()

972 
îr°s
;

973 
∑ge
;

974 
syndrome
;

975 
bôs
;

977
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xC8, 2, &
îr°s
);

978 i‡(
îr°s
 & 3) {

979 
óp
;

981
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xc4, 4, &
óp
);

984
∑ge
 = (
óp
 & 0xFFFFF000) >> 4;

985
syndrome
 =
óp
 & 0xFF;

986
bôs
 = ((
îr°s
 & 3) == 1)?1:2;

989
	`¥öt_ecc_îr
(
∑ge
, 0,
bôs
==1?1:0,
syndrome
, 0);

992
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xC8, 2, 3);

994
	}
}

996 
	$£tup_i850
()

998 c⁄° 
ddim
[] = {
ECC_NONE
,
ECC_RESERVED
,
ECC_CORRECT
, ECC_RESERVED };

999 
mchcfg
;

1002
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x50, 2, &
mchcfg
);

1003
˘æ
.
ˇp
 =
ECC_CORRECT
;

1004
˘æ
.
mode
 =
ddim
[(
mchcfg
 >> 7)&3];

1005
	}
}

1007 
	$pﬁl_i850
()

1009 
îr°s
;

1010 
∑ge
;

1011 
syndrome
;

1012 
ch™√l
;

1013 
bôs
;

1015
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xC8, 2, &
îr°s
);

1016 i‡(
îr°s
 & 3) {

1017 
óp
;

1018 
dîr˘l_°s
;

1020
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xE4, 4, &
óp
);

1021
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xE2, 2, &
dîr˘l_°s
);

1024
∑ge
 = (
óp
 & 0xFFFFF800) >> 11;

1025
ch™√l
 =
óp
 & 1;

1026
syndrome
 =
dîr˘l_°s
 & 0xFF;

1027
bôs
 = ((
îr°s
 & 3) == 1)?1:2;

1030
	`¥öt_ecc_îr
(
∑ge
, 0,
bôs
==1?1:0,
syndrome
,
ch™√l
);

1033
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xC8, 2,
îr°s
 & 3);

1035
	}
}

1037 
	$£tup_i860
()

1039 c⁄° 
ddim
[] = {
ECC_NONE
,
ECC_RESERVED
,
ECC_CORRECT
, ECC_RESERVED };

1040 
mchcfg
;

1041 
îr°s
;

1044
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x50, 2, &
mchcfg
);

1045
˘æ
.
ˇp
 =
ECC_CORRECT
;

1046
˘æ
.
mode
 =
ddim
[(
mchcfg
 >> 7)&3];

1049
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xC8, 2, &
îr°s
);

1050
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xC8, 2,
îr°s
 & 3);

1051
	}
}

1053 
	$pﬁl_i860
()

1055 
îr°s
;

1056 
∑ge
;

1057 
syndrome
;

1058 
ch™√l
;

1059 
bôs
;

1061
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xC8, 2, &
îr°s
);

1062 i‡(
îr°s
 & 3) {

1063 
óp
;

1064 
dîr˘l_°s
;

1066
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xE4, 4, &
óp
);

1067
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xE2, 2, &
dîr˘l_°s
);

1070
∑ge
 = (
óp
 & 0xFFFFFE00) >> 9;

1071
ch™√l
 =
óp
 & 1;

1072
syndrome
 =
dîr˘l_°s
 & 0xFF;

1073
bôs
 = ((
îr°s
 & 3) == 1)?1:2;

1076
	`¥öt_ecc_îr
(
∑ge
, 0,
bôs
==1?1:0,
syndrome
,
ch™√l
);

1079
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xC8, 2,
îr°s
 & 3);

1081
	}
}

1083 
	$pﬁl_iE7221
()

1085 
îr°s
;

1086 
∑ge
;

1087 
syndrome
;

1088 
ch™√l
;

1089 
bôs
;

1090 
îrocc
;

1092
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xC8, 2, &
îr°s
);

1094
îrocc
 =
îr°s
 & 3;

1096 i‡((
îrocc
 == 1) || (errocc == 2)) {

1097 
óp
,
off£t
;

1098 
dîr˘l_°s
;

1101
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x58, 4, &
óp
);

1102
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0x5C, 1, &
dîr˘l_°s
);

1105
ch™√l
 =
óp
 & 1;

1106
óp
 =Éap & 0xFFFFFF80;

1107
∑ge
 =
óp
 >> 12;

1108
off£t
 =
óp
 & 0xFFF;

1109
syndrome
 =
dîr˘l_°s
 & 0xFF;

1110
bôs
 =
îrocc
 & 1;

1113
	`¥öt_ecc_îr
(
∑ge
,
off£t
,
bôs
,
syndrome
,
ch™√l
);

1116
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xC8, 2,
îr°s
 & 3);

1119 i‡(
îrocc
 == 3) {

1121
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
, 0xC8, 2,
îr°s
 & 3);

1124
	}
}

1126 
	$pﬁl_iE7520
()

1128 
„º
;

1129 
√º
;

1131
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
 +1, 0x80, 2, &
„º
);

1132
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
 +1, 0x82, 2, &
√º
);

1134 i‡(
„º
 & 0x0101) {

1136 
˚log_add
;

1137 
˚log_syndrome
;

1138 
∑ge
;

1141
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
 +1, 0xA0, 4,&
˚log_add
);

1143
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
 +1, 0xC4, 2, &
˚log_syndrome
);

1146
∑ge
 = (
˚log_add
 & 0x7FFFFFFC) >> 2;

1149
	`¥öt_ecc_îr
(
∑ge
, 0, 1,
˚log_syndrome
, 0);

1152
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
 +1, 0x80, 2,
„º
& 0x0101);

1155 i‡(
„º
 & 0x4646) {

1157 
uc˚log_add
;

1158 
∑ge
;

1161
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
 +1, 0xA4, 4, &
uc˚log_add
);

1164
∑ge
 = (
uc˚log_add
 & 0x7FFFFFFC) >> 2;

1167
	`¥öt_ecc_îr
(
∑ge
, 0, 0, 0, 0);

1170
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
 +1, 0x80, 2,
„º
 & 0x4646);

1174 i‡(
√º
 & 0x4747) {

1175
	`pci_c⁄f_wrôe
(
˘æ
.
bus
, cål.
dev
, cål.
‚
 +1, 0x82, 2,
√º
 & 0x4747);

1177
	}
}

1185 
	g©hl⁄c€f
[] = {11, 11.5, 12.0, 12.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, 10.0, 10.5};

1186 
	g©hl⁄c€f2
[] = {12, 19.0, 12.0, 20.0, 13.0, 13.5, 14.0, 21.0, 15.0, 22, 16.0, 16.5, 17.0, 18.0, 23.0, 24.0};

1187 
	gp4modñ1øtios
[] = {16, 17, 18, 19, 20, 21, 22, 23, 8, 9, 10, 11, 12, 13, 14, 15};

1189 
	$gëP4PMmu…ùlõr
()

1191 
m§_lo
,
m§_hi
;

1192 
c€f
;

1195 i‡(
˝u_id
.
ty≥
 == 6) {

1196 if((
˝u_id
.
„©uª_Êag
 >> 7) & 1) {

1197
	`rdm§
(0x198,
m§_lo
,
m§_hi
);

1198
c€f
 = ((
m§_lo
 >> 8) & 0x1F);

1199 i‡((
m§_lo
 >> 14Ë& 0x1Ë{
c€f
 = coef + 0.5f; }

1201
	`rdm§
(0x2A,
m§_lo
,
m§_hi
);

1202
c€f
 = (
m§_lo
 >> 22) & 0x1F;

1207 i‡(
˝u_id
.
modñ
 < 2)

1209
	`rdm§
(0x2A,
m§_lo
,
m§_hi
);

1210
c€f
 = (
m§_lo
 >> 8) & 0xF;

1211
c€f
 =
p4modñ1øtios
[()coef];

1215
	`rdm§
(0x2C,
m§_lo
,
m§_hi
);

1216
c€f
 = (
m§_lo
 >> 24) & 0x1F;

1219 
c€f
;

1220
	}
}

1222 
	$gëNHMmu…ùlõr
()

1224 
m§_lo
,
m§_hi
;

1225 
c€f
;

1229
	`rdm§
(0x194,
m§_lo
,
m§_hi
);

1230 if((
m§_lo
 >> 16) & 1){

1231
c€f
 = (
m§_lo
 >> 8) & 0xFF;

1233
	`rdm§
(0xCE,
m§_lo
,
m§_hi
);

1234
c€f
 = (
m§_lo
 >> 8) & 0xFF;

1237 
c€f
;

1238
	}
}

1240 
	$gëSNBmu…ùlõr
()

1242 
m§_lo
,
m§_hi
;

1243 
c€f
;

1245
	`rdm§
(0x198,
m§_lo
,
m§_hi
);

1246
c€f
 = (
m§_lo
 >> 8) & 0xFF;

1247 if(
c€f
 < 4)

1249
	`rdm§
(0xCE,
m§_lo
,
m§_hi
);

1250
c€f
 = (
m§_lo
 >> 16) & 0xFF;

1255 
c€f
;

1256
	}
}

1259 
	$gëI¡ñPNS
()

1261 
i
,
j
;

1262 
p¢_óx
,
p¢_ebx
,
p¢_ecx
,
p¢_edx
;

1263 
ch¨_hex
;

1264 
o˝uid
 = 0x80000002;

1266 
j
 = 0; j < 4; j++)

1269
asm

	`__vﬁ©ûe__
(

1274 : "˜" (
p¢_óx
), "Ù" (
p¢_ebx
), "=c" (
p¢_ecx
), "=d" (
p¢_edx
)

1275 : "a" (
o˝uid
)

1280 
i
 = 0; i < 4; i++)

1282
ch¨_hex
 = (
p¢_óx
 >> (
i
*8)) & 0xff;

1283
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +
i
,
	`c⁄vît_hex_to_ch¨
(
ch¨_hex
));

1285
ch¨_hex
 = (
p¢_ebx
 >> (
i
*8)) & 0xff;

1286
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +
i
 + 4,
	`c⁄vît_hex_to_ch¨
(
ch¨_hex
));

1288 if(
p¢_ecx
 != 0x20202020)

1290
ch¨_hex
 = (
p¢_ecx
 >> (
i
*8)) & 0xff;

1291
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +
i
 + 8,
	`c⁄vît_hex_to_ch¨
(
ch¨_hex
));

1293
ch¨_hex
 = (
p¢_edx
 >> (
i
*8)) & 0xff;

1294
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +
i
 + 12,
	`c⁄vît_hex_to_ch¨
(
ch¨_hex
));

1298
ch¨_hex
 = (
p¢_edx
 >> (
i
*8)) & 0xff;

1299
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +
i
 + 8,
	`c⁄vît_hex_to_ch¨
(
ch¨_hex
));

1302 (
p¢_ecx
 !0x20202020)?(
cﬁ
 += 16):(col +=12);

1303 if(
p¢_edx
 =0x20202020Ë{
cﬁ
 -= 4; }

1304
o˝uid
++;

1307
cﬁ
 -= 16;

1308
	}
}

1310 
	$pﬁl_fsb_amd64
() {

1312 
mcg§l
;

1313 
mcg°h
;

1314 
fid
,
ãmp2
;

1315 
dømchr
;

1316 
˛ockøtio
;

1317 
døm˛ock
;

1319 
c€f
 = 10;

1323 i‡(((
˝u_id
.
pwrˇp
 >> 1) & 1) == 1) {

1324
	`rdm§
(0xc0010042,
mcg§l
,
mcg°h
);

1325
fid
 = (
mcg§l
 & 0x3F);

1327
	`rdm§
(0xc0010015,
mcg§l
,
mcg°h
);

1328
fid
 = ((
mcg§l
 >> 24)& 0x3F);

1332
c€f
 = (
fid
 / 2 ) + 4.0;

1335 i‡(
fid
 & 1Ë{
c€f
 = coef + 0.5; }

1339 i‡(((
˝u_id
.
ext
 >> 16) & 0xF) >= 4) {

1341
	`pci_c⁄f_ªad
(0, 24, 2, 0x94, 4, &
dømchr
);

1342
ãmp2
 = (
dømchr
 & 0x7);

1343
˛ockøtio
 =
c€f
;

1345 
ãmp2
) {

1347
˛ockøtio
 = ()(
c€f
);

1350
˛ockøtio
 = ()(
c€f
 * 3.0f/4.0f);

1353
˛ockøtio
 = ()(
c€f
 * 3.0f/5.0f);

1356
˛ockøtio
 = ()(
c€f
 * 3.0f/6.0f);

1362
	`pci_c⁄f_ªad
(0, 24, 2, 0x94, 4, &
dømchr
);

1363
ãmp2
 = (
dømchr
 >> 20) & 0x7;

1364
˛ockøtio
 =
c€f
;

1366 
ãmp2
) {

1368
˛ockøtio
 = ()(
c€f
 * 2.0f);

1371
˛ockøtio
 = ()((
c€f
 * 3.0f/2.0f) + 0.81f);

1374
˛ockøtio
 = ()((
c€f
 * 4.0f/3.0f) + 0.81f);

1377
˛ockøtio
 = ()((
c€f
 * 6.0f/5.0f) + 0.81f);

1380
˛ockøtio
 = ()((
c€f
 * 10.0f/9.0f) + 0.81f);

1383
˛ockøtio
 = ()(
c€f
 + 0.81f);

1389
døm˛ock
 = (
ext˛ock
 /1000Ë/
˛ockøtio
;

1392
	`¥öt_fsb_öfo
(
døm˛ock
, "RAM : ", "DDR");

1394
	}
}

1396 
	$pﬁl_fsb_k10
() {

1398 
mcg§l
;

1399 
mcg°h
;

1400 
ãmp2
;

1401 
dømchr
;

1402 
maöPŒId
;

1403 
døm˛ock
;

1404 
≤s_low
;

1405 
≤s_high
;

1406 
m§_p¢
;

1410 if(
˘æ
.
mode
 =
ECC_NONE
)

1412
	`˝röt
(
LINE_CPU
+5, 0, "IMC : ");

1413 
m§_p¢
 = 0; msr_psn < 5; msr_psn++)

1415
	`rdm§
(0xC0010030+
m§_p¢
,
≤s_low
,
≤s_high
);

1416
	`˝röt
(
LINE_CPU
+5, 6+(
m§_p¢
*8),
	`c⁄vît_hex_to_ch¨
(
≤s_low
 & 0xff));

1417
	`˝röt
(
LINE_CPU
+5, 7+(
m§_p¢
*8),
	`c⁄vît_hex_to_ch¨
((
≤s_low
 >> 8) & 0xff));

1418
	`˝röt
(
LINE_CPU
+5, 8+(
m§_p¢
*8),
	`c⁄vît_hex_to_ch¨
((
≤s_low
 >> 16) & 0xff));

1419
	`˝röt
(
LINE_CPU
+5, 9+(
m§_p¢
*8),
	`c⁄vît_hex_to_ch¨
((
≤s_low
 >> 24) & 0xff));

1420
	`˝röt
(
LINE_CPU
+5, 10+(
m§_p¢
*8),
	`c⁄vît_hex_to_ch¨
(
≤s_high
 & 0xff));

1421
	`˝röt
(
LINE_CPU
+5, 11+(
m§_p¢
*8),
	`c⁄vît_hex_to_ch¨
((
≤s_high
 >> 8) & 0xff));

1422
	`˝röt
(
LINE_CPU
+5, 12+(
m§_p¢
*8),
	`c⁄vît_hex_to_ch¨
((
≤s_high
 >> 16) & 0xff));

1423
	`˝röt
(
LINE_CPU
+5, 13+(
m§_p¢
*8),
	`c⁄vît_hex_to_ch¨
((
≤s_high
 >> 24) & 0xff));

1425
	`˝röt
(
LINE_CPU
+5, 41, "(ECC : Disabled)");

1429
	`pci_c⁄f_ªad
(0, 24, 2, 0x94, 4, &
dømchr
);

1430
ãmp2
 = (
dømchr
 & 0x7);

1432 
ãmp2
) {

1433 0x7:
ãmp2
++;

1434 0x6:
ãmp2
++;

1435 0x5:
ãmp2
++;

1436 0x4:
ãmp2
++;

1437 :
ãmp2
 += 3;

1442 i‡(((
˝u_id
.
ext
 >> 20) & 0xFF) == 1)

1443
døm˛ock
 = ((
ãmp2
 * 200) / 3.0) + 0.25;

1445 
èrgë
;

1446 
dx
;

1447 
divis‹
;

1450
èrgë
 =
ãmp2
 * 400;

1453
	`rdm§
(0xc0010071,
mcg§l
,
mcg°h
);

1455
	`pci_c⁄f_ªad
(0, 24, 3, 0xD4, 4, &
maöPŒId
);

1457 i‡–
maöPŒId
 & 0x40 )

1458
maöPŒId
 &= 0x3F;

1460
maöPŒId
 = 8;

1462
mcg°h
 = (mcgsth >> 17) & 0x3F;

1463 i‡–
mcg°h
 ) {

1464 i‡–
maöPŒId
 >
mcg°h
 )

1465
maöPŒId
 =
mcg°h
;

1468
dx
 = (
maöPŒId
 + 8) * 1200;

1469 
divis‹
 = 3; divisor < 100; divisor++ )

1470 i‡–(
dx
 /
divis‹
Ë<
èrgë
 )

1473
døm˛ock
 = ((
dx
 /
divis‹
) / 6.0) + 0.25;

1480
	`¥öt_fsb_öfo
(
døm˛ock
, "RAM : ", "DDR");

1482
	}
}

1484 
	$pﬁl_fsb_k14
() {

1486 
ãmp2
;

1487 
dømchr
;

1488 
døm˛ock
;

1489 
≤s_low
;

1490 
≤s_high
;

1491 
m§_p¢
;

1495 if(
˘æ
.
mode
 =
ECC_NONE
)

1497
	`˝röt
(
LINE_CPU
+5, 0, "IMC : ");

1498 
m§_p¢
 = 0; msr_psn < 5; msr_psn++)

1500
	`rdm§
(0xC0010030+
m§_p¢
,
≤s_low
,
≤s_high
);

1501
	`˝röt
(
LINE_CPU
+5, 6+(
m§_p¢
*8),
	`c⁄vît_hex_to_ch¨
(
≤s_low
 & 0xff));

1502
	`˝röt
(
LINE_CPU
+5, 7+(
m§_p¢
*8),
	`c⁄vît_hex_to_ch¨
((
≤s_low
 >> 8) & 0xff));

1503
	`˝röt
(
LINE_CPU
+5, 8+(
m§_p¢
*8),
	`c⁄vît_hex_to_ch¨
((
≤s_low
 >> 16) & 0xff));

1504
	`˝röt
(
LINE_CPU
+5, 9+(
m§_p¢
*8),
	`c⁄vît_hex_to_ch¨
((
≤s_low
 >> 24) & 0xff));

1505
	`˝röt
(
LINE_CPU
+5, 10+(
m§_p¢
*8),
	`c⁄vît_hex_to_ch¨
(
≤s_high
 & 0xff));

1506
	`˝röt
(
LINE_CPU
+5, 11+(
m§_p¢
*8),
	`c⁄vît_hex_to_ch¨
((
≤s_high
 >> 8) & 0xff));

1507
	`˝röt
(
LINE_CPU
+5, 12+(
m§_p¢
*8),
	`c⁄vît_hex_to_ch¨
((
≤s_high
 >> 16) & 0xff));

1508
	`˝röt
(
LINE_CPU
+5, 13+(
m§_p¢
*8),
	`c⁄vît_hex_to_ch¨
((
≤s_high
 >> 24) & 0xff));

1510
	`˝röt
(
LINE_CPU
+5, 41, "(ECC : Disabled)");

1514
	`pci_c⁄f_ªad
(0, 24, 2, 0x94, 4, &
dømchr
);

1515
ãmp2
 = (
dømchr
 & 0x1F);

1517 
ãmp2
) {

1520
døm˛ock
 = 400;

1523
døm˛ock
 = 533;

1526
døm˛ock
 = 667;

1532
	`¥öt_fsb_öfo
(
døm˛ock
, "RAM : ", "DDR-");

1534
	}
}

1536 
	$pﬁl_fsb_i925
() {

1538 
døm˛ock
,
dømøtio
,
fsb
;

1539 
mchcfg
,
mchcfg2
,
dev0
,
drc
,
idëe˘
;

1540 
c€f
 =
	`gëP4PMmu…ùlõr
();

1541 *
±r
;

1543
	`pci_c⁄f_ªad
–0, 0, 0, 0x02, 2, &
idëe˘
);

1546
	`pci_c⁄f_ªad
–0, 0, 0, 0x44, 4, &
dev0
);

1547
dev0
 = dev0 & 0xFFFFC000;

1548
±r
=(*)(
dev0
+0xC00);

1549
mchcfg
 = *
±r
 & 0xFFFF;

1550
±r
=(*)(
dev0
+0x120);

1551
drc
 = *
±r
 & 0xFFFF;

1552
dømøtio
 = 1;

1554
mchcfg2
 = (
mchcfg
 >> 4)&3;

1556 i‡((
drc
&3) != 2) {

1558 i‡(
mchcfg2
 =1Ë{
dømøtio
 = 0.8; } { dramratio = 1; }

1561 i‡((
mchcfg
 >> 2)&1) {

1563 i‡(
mchcfg2
 =2Ë{
dømøtio
 = 0.75; } { dramratio = 1; }

1565 
mchcfg2
) {

1567
dømøtio
 = 0.66667;

1570 i‡(
idëe˘
 !0x2590Ë{
dømøtio
 = 1; } { dramratio = 1.5; }

1574 i‡((
mchcfg
 & 1Ë=0Ë{
dømøtio
 = 1.33334; }

1575 i‡(
idëe˘
 =0x2590Ë{
dømøtio
 = 2; }

1576 {
dømøtio
 = 1.5; }

1581
fsb
 = ((
ext˛ock
 / 1000Ë/
c€f
);

1582
døm˛ock
 =
fsb
 *
dømøtio
;

1585
	`¥öt_fsb_öfo
(
døm˛ock
, "RAM : ", "DDR");

1588
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "- FSB : ");

1589
cﬁ
 += 9;

1590
	`d¥öt
(
LINE_CPU
+5,
cﬁ
,
fsb
, 3,0);

1591
cﬁ
 += 3;

1592
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "MHz");

1593
cﬁ
 += 4;

1595
	}
}

1597 
	$pﬁl_fsb_i945
() {

1599 
døm˛ock
,
dømøtio
,
fsb
;

1600 
mchcfg
,
dev0
;

1601 
c€f
 =
	`gëP4PMmu…ùlõr
();

1602 *
±r
;

1605
	`pci_c⁄f_ªad
–0, 0, 0, 0x44, 4, &
dev0
);

1606
dev0
 &= 0xFFFFC000;

1607
±r
=(*)(
dev0
+0xC00);

1608
mchcfg
 = *
±r
 & 0xFFFF;

1609
dømøtio
 = 1;

1611 (
mchcfg
 >> 4)&7) {

1612 1:
dømøtio
 = 1.0; ;

1613 2:
dømøtio
 = 1.33334; ;

1614 3:
dømøtio
 = 1.66667; ;

1615 4:
dømøtio
 = 2.0; ;

1619
fsb
 = ((
ext˛ock
 / 1000Ë/
c€f
);

1620
døm˛ock
 =
fsb
 *
dømøtio
;

1623
	`¥öt_fsb_öfo
(
døm˛ock
, "RAM : ", "DDR");

1626
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "- FSB : ");

1627
cﬁ
 += 9;

1628
	`d¥öt
(
LINE_CPU
+5,
cﬁ
,
fsb
, 3,0);

1629
cﬁ
 += 3;

1630
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "MHz");

1631
cﬁ
 += 4;

1633
	}
}

1635 
	$pﬁl_fsb_i975
() {

1637 
døm˛ock
,
dømøtio
,
fsb
;

1638 
mchcfg
,
dev0
,
fsb_mch
;

1639 
c€f
 =
	`gëP4PMmu…ùlõr
();

1640 *
±r
;

1643
	`pci_c⁄f_ªad
–0, 0, 0, 0x44, 4, &
dev0
);

1644
dev0
 &= 0xFFFFC000;

1645
±r
=(*)(
dev0
+0xC00);

1646
mchcfg
 = *
±r
 & 0xFFFF;

1647
dømøtio
 = 1;

1649 
mchcfg
 & 7) {

1650 1:
fsb_mch
 = 533; ;

1651 2:
fsb_mch
 = 800; ;

1652 3:
fsb_mch
 = 667; ;

1653 :
fsb_mch
 = 1066; ;

1657 
fsb_mch
) {

1659 (
mchcfg
 >> 4)&7) {

1660 0:
dømøtio
 = 1.25; ;

1661 1:
dømøtio
 = 1.5; ;

1662 2:
dømøtio
 = 2.0; ;

1668 (
mchcfg
 >> 4)&7) {

1669 1:
dømøtio
 = 1.0; ;

1670 2:
dømøtio
 = 1.33334; ;

1671 3:
dømøtio
 = 1.66667; ;

1672 4:
dømøtio
 = 2.0; ;

1677 (
mchcfg
 >> 4)&7) {

1678 1:
dømøtio
 = 0.75; ;

1679 2:
dømøtio
 = 1.0; ;

1680 3:
dømøtio
 = 1.25; ;

1681 4:
dømøtio
 = 1.5; ;

1688
fsb
 = ((
ext˛ock
 / 1000Ë/
c€f
);

1689
døm˛ock
 =
fsb
 *
dømøtio
;

1692
	`¥öt_fsb_öfo
(
døm˛ock
, "RAM : ", "DDR");

1695
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "- FSB : ");

1696
cﬁ
 += 9;

1697
	`d¥öt
(
LINE_CPU
+5,
cﬁ
,
fsb
, 3,0);

1698
cﬁ
 += 3;

1699
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "MHz");

1700
cﬁ
 += 4;

1702
	}
}

1704 
	$pﬁl_fsb_i965
() {

1706 
døm˛ock
,
dømøtio
,
fsb
;

1707 
mchcfg
,
dev0
,
fsb_mch
;

1708 
c€f
 =
	`gëP4PMmu…ùlõr
();

1709 *
±r
;

1712
	`pci_c⁄f_ªad
–0, 0, 0, 0x48, 4, &
dev0
);

1713
dev0
 &= 0xFFFFC000;

1714
±r
=(*)(
dev0
+0xC00);

1715
mchcfg
 = *
±r
 & 0xFFFF;

1716
dømøtio
 = 1;

1718 
mchcfg
 & 7) {

1719 0:
fsb_mch
 = 1066; ;

1720 1:
fsb_mch
 = 533; ;

1721 : 2:
fsb_mch
 = 800; ;

1722 3:
fsb_mch
 = 667; ;

1723 4:
fsb_mch
 = 1333; ;

1724 6:
fsb_mch
 = 1600; ;

1728 
fsb_mch
) {

1730 (
mchcfg
 >> 4)&7) {

1731 1:
dømøtio
 = 2.0; ;

1732 2:
dømøtio
 = 2.5; ;

1733 3:
dømøtio
 = 3.0; ;

1739 (
mchcfg
 >> 4)&7) {

1740 0:
dømøtio
 = 1.0; ;

1741 1:
dømøtio
 = 5.0f/4.0f; ;

1742 2:
dømøtio
 = 5.0f/3.0f; ;

1743 3:
dømøtio
 = 2.0; ;

1744 4:
dømøtio
 = 8.0f/3.0f; ;

1745 5:
dømøtio
 = 10.0f/3.0f; ;

1750 (
mchcfg
 >> 4)&7) {

1751 1:
dømøtio
 = 1.0f; ;

1752 2:
dømøtio
 = 5.0f/4.0f; ;

1753 3:
dømøtio
 = 3.0f/2.0f; ;

1754 4:
dømøtio
 = 2.0f; ;

1755 5:
dømøtio
 = 5.0f/2.0f; ;

1760 (
mchcfg
 >> 4)&7) {

1761 2:
dømøtio
 = 1.0f; ;

1762 3:
dømøtio
 = 6.0f/5.0f; ;

1763 4:
dømøtio
 = 8.0f/5.0f; ;

1764 5:
dømøtio
 = 2.0f; ;

1769 (
mchcfg
 >> 4)&7) {

1770 3:
dømøtio
 = 1.0f; ;

1771 4:
dømøtio
 = 4.0f/3.0f; ;

1772 5:
dømøtio
 = 3.0f/2.0f; ;

1773 6:
dømøtio
 = 2.0f; ;

1780
fsb
 = ((
ext˛ock
 / 1000Ë/
c€f
);

1781
døm˛ock
 =
fsb
 *
dømøtio
;

1784
	`¥öt_fsb_öfo
(
døm˛ock
, "RAM : ", "DDR");

1787
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "- FSB : ");

1788
cﬁ
 += 9;

1789
	`d¥öt
(
LINE_CPU
+5,
cﬁ
,
fsb
, 3,0);

1790
cﬁ
 += 3;

1791
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "MHz");

1792
cﬁ
 += 4;

1794
	}
}

1796 
	$pﬁl_fsb_im965
() {

1798 
døm˛ock
,
dømøtio
,
fsb
;

1799 
mchcfg
,
dev0
,
fsb_mch
;

1800 
c€f
 =
	`gëP4PMmu…ùlõr
();

1801 *
±r
;

1804
	`pci_c⁄f_ªad
–0, 0, 0, 0x48, 4, &
dev0
);

1805
dev0
 &= 0xFFFFC000;

1806
±r
=(*)(
dev0
+0xC00);

1807
mchcfg
 = *
±r
 & 0xFFFF;

1808
dømøtio
 = 1;

1810 
mchcfg
 & 7) {

1811 1:
fsb_mch
 = 533; ;

1812 : 2:
fsb_mch
 = 800; ;

1813 3:
fsb_mch
 = 667; ;

1814 6:
fsb_mch
 = 1066; ;

1818 
fsb_mch
) {

1820 (
mchcfg
 >> 4)&7) {

1821 1:
dømøtio
 = 5.0f/4.0f; ;

1822 2:
dømøtio
 = 3.0f/2.0f; ;

1823 3:
dømøtio
 = 2.0f; ;

1828 (
mchcfg
 >> 4)&7) {

1829 1:
dømøtio
 = 1.0f; ;

1830 2:
dømøtio
 = 6.0f/5.0f; ;

1831 3:
dømøtio
 = 8.0f/5.0f; ;

1832 4:
dømøtio
 = 2.0f; ;

1833 5:
dømøtio
 = 12.0f/5.0f; ;

1838 (
mchcfg
 >> 4)&7) {

1839 1:
dømøtio
 = 5.0f/6.0f; ;

1840 2:
dømøtio
 = 1.0f; ;

1841 3:
dømøtio
 = 4.0f/3.0f; ;

1842 4:
dømøtio
 = 5.0f/3.0f; ;

1843 5:
dømøtio
 = 2.0f; ;

1847 (
mchcfg
 >> 4)&7) {

1848 5:
dømøtio
 = 3.0f/2.0f; ;

1849 6:
dømøtio
 = 2.0f; ;

1855
fsb
 = ((
ext˛ock
 / 1000Ë/
c€f
);

1856
døm˛ock
 =
fsb
 *
dømøtio
;

1859
	`¥öt_fsb_öfo
(
døm˛ock
, "RAM : ", "DDR");

1862
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "- FSB : ");

1863
cﬁ
 += 9;

1864
	`d¥öt
(
LINE_CPU
+5,
cﬁ
,
fsb
, 3,0);

1865
cﬁ
 += 3;

1866
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "MHz");

1867
cﬁ
 += 4;

1869
	}
}

1872 
	$pﬁl_fsb_5400
() {

1874 
døm˛ock
,
dømøtio
,
fsb
;

1875 
amba£_low
,
amba£_high
,
ddr‰q
;

1876 
c€f
 =
	`gëP4PMmu…ùlõr
();

1879
	`pci_c⁄f_ªad
–0, 16, 0, 0x48, 4, &
amba£_low
);

1880
amba£_low
 &= 0xFFFE0000;

1881
	`pci_c⁄f_ªad
–0, 16, 0, 0x4C, 4, &
amba£_high
);

1882
amba£_high
 &= 0xFF;

1883
	`pci_c⁄f_ªad
–0, 16, 1, 0x56, 1, &
ddr‰q
);

1884
ddr‰q
 &= 7;

1885
dømøtio
 = 1;

1887 
ddr‰q
) {

1891
dømøtio
 = 1.0;

1894
dømøtio
 = 5.0f/4.0f;

1898
dømøtio
 = 4.0f/5.0f;

1904
fsb
 = ((
ext˛ock
 / 1000Ë/
c€f
);

1905
døm˛ock
 =
fsb
 *
dømøtio
;

1908
	`¥öt_fsb_öfo
(
døm˛ock
, "RAM : ", "DDR");

1911
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "- FSB : ");

1912
cﬁ
 += 9;

1913
	`d¥öt
(
LINE_CPU
+5,
cﬁ
,
fsb
, 3,0);

1914
cﬁ
 += 3;

1915
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "MHz");

1916
cﬁ
 += 4;

1918
	}
}

1921 
	$pﬁl_fsb_nf4õ
() {

1923 
døm˛ock
,
dømøtio
,
fsb
;

1924 
møtio
,
ƒ©io
;

1925 
ªg74
,
ªg60
;

1926 
c€f
 =
	`gëP4PMmu…ùlõr
();

1929
	`pci_c⁄f_ªad
(0, 0, 2, 0x74, 2, &
ªg74
);

1930
	`pci_c⁄f_ªad
(0, 0, 2, 0x60, 4, &
ªg60
);

1931
møtio
 =
ªg74
 & 0xF;

1932
ƒ©io
 = (
ªg74
 >> 4) & 0xF;

1935 i‡(
møtio
 == 0) { mratio = 16; }

1936 i‡(
ƒ©io
 == 0) {Çratio = 16; }

1939 if((
ªg60
 >> 22) & 1) {

1940
dømøtio
 = 1;

1942
dømøtio
 =
ƒ©io
 /
møtio
;

1946
fsb
 = ((
ext˛ock
 /1000Ë/
c€f
);

1947
døm˛ock
 =
fsb
 *
dømøtio
;

1950
	`¥öt_fsb_öfo
(
døm˛ock
, "RAM : ", "DDR");

1953
	`˝röt
(
LINE_CPU
+5,
cﬁ
, "- FSB : ");

1954
cﬁ
 += 9;

1955
	`d¥öt
(
LINE_CPU
+5,
cﬁ
,
fsb
, 3,0);

1956
cﬁ
 += 3;

1957
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "MHz");

1958
cﬁ
 += 4;

1960
	}
}

1962 
	$pﬁl_fsb_i875
() {

1964 
døm˛ock
,
dømøtio
,
fsb
;

1965 
mchcfg
,
smfs
;

1966 
c€f
 =
	`gëP4PMmu…ùlõr
();

1969
	`pci_c⁄f_ªad
(0, 0, 0, 0xC6, 2, &
mchcfg
);

1970
smfs
 = (
mchcfg
 >> 10)&3;

1971
dømøtio
 = 1;

1973 i‡((
mchcfg
&3Ë=3Ë{
dømøtio
 = 1; }

1974 i‡((
mchcfg
&3) == 2) {

1975 i‡(
smfs
 =2Ë{
dømøtio
 = 1; }

1976 i‡(
smfs
 =1Ë{
dømøtio
 = 1.25; }

1977 i‡(
smfs
 =0Ë{
dømøtio
 = 1.5; }

1979 i‡((
mchcfg
&3) == 1) {

1980 i‡(
smfs
 =2Ë{
dømøtio
 = 0.6666666666; }

1981 i‡(
smfs
 =1Ë{
dømøtio
 = 0.8; }

1982 i‡(
smfs
 =0Ë{
dømøtio
 = 1; }

1984 i‡((
mchcfg
&3Ë=0Ë{
dømøtio
 = 0.75; }

1988
døm˛ock
 = ((
ext˛ock
 /1000Ë/
c€f
Ë/
dømøtio
;

1989
fsb
 = ((
ext˛ock
 /1000Ë/
c€f
);

1992
	`¥öt_fsb_öfo
(
døm˛ock
, "RAM : ", "DDR");

1995 i‡–
˘æ
.
mode
 =
ECC_NONE
 ) {

1996
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "- FSB : ");

1997
cﬁ
 += 9;

1998
	`d¥öt
(
LINE_CPU
+5,
cﬁ
,
fsb
, 3,0);

1999
cﬁ
 += 3;

2000
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "MHz");

2001
cﬁ
 += 4;

2003
	}
}

2005 
	$pﬁl_fsb_p4
() {

2007
ul⁄g

fsb
,
idëe˘
;

2008 
c€f
 =
	`gëP4PMmu…ùlõr
();

2010
fsb
 = ((
ext˛ock
 /1000Ë/
c€f
);

2013
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "/ FSB : ");

2014
cﬁ
 += 9;

2015
	`d¥öt
(
LINE_CPU
+5,
cﬁ
,
fsb
, 3,0);

2016
cﬁ
 += 3;

2017
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "MHz");

2018
cﬁ
 += 4;

2021
	`pci_c⁄f_ªad
–0, 0, 0, 0x02, 2, &
idëe˘
);

2022 i‡(
idëe˘
 == 0x2540 || idetect == 0x254C) {

2023
	`¥öt_fsb_öfo
(
fsb
, "RAM : ", "DDR");

2025
	}
}

2027 
	$pﬁl_fsb_i855
() {

2030 
døm˛ock
,
dømøtio
,
fsb
 ;

2031 
m§_lo
,
m§_hi
;

2032
ul⁄g

mchcfg
,
˚¡ri
,
idëe˘
;

2033 
c€f
;

2035
	`pci_c⁄f_ªad
–0, 0, 0, 0x02, 2, &
idëe˘
);

2040 i‡(
˝u_id
.
ty≥
 == 6) {

2041
	`rdm§
(0x2A,
m§_lo
,
m§_hi
);

2042
c€f
 = (
m§_lo
 >> 22) & 0x1F;

2045 i‡(
idëe˘
 == 0x3580) {

2046
	`˝röt
(
LINE_CPU
+5,
cﬁ
-1, "i855GM/GME ");

2047
cﬁ
 += 10;

2050
	`rdm§
(0x2C,
m§_lo
,
m§_hi
);

2051
c€f
 = (
m§_lo
 >> 24) & 0x1F;

2052
	`˝röt
(
LINE_CPU
+5,
cﬁ
-1, "i852PM/GM ");

2053
cﬁ
 += 9;

2056
fsb
 = ((
ext˛ock
 /1000Ë/
c€f
);

2059
	`˝röt
(
LINE_CPU
+5,
cﬁ
, "/ FSB : "); col += 8;

2060
	`d¥öt
(
LINE_CPU
+5,
cﬁ
,
fsb
, 3,0); col += 3;

2061
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "MHz"); col += 4;

2064
	`pci_c⁄f_ªad
–2, 2, 0, 0x02, 2, &
˚¡ri
);

2065 i‡(
˚¡ri
 =0x1043Ë{
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "/ Centrino Mobile Platform"); }

2066 {
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "/ Mobile Platform"); }

2070
dømøtio
 = 1;

2071 i‡(
idëe˘
 == 0x3580) {

2072
	`pci_c⁄f_ªad
–0, 0, 3, 0xC0, 2, &
mchcfg
);

2073
mchcfg
 = mchcfg & 0x7;

2075 i‡(
mchcfg
 =1 || mchcfg =2 || mchcfg =4 || mchcfg =5Ë{
dømøtio
 = 1; }

2076 i‡(
mchcfg
 =0 || mchcfg =3Ë{
dømøtio
 = 1.333333333; }

2077 i‡(
mchcfg
 =6Ë{
dømøtio
 = 1.25; }

2078 i‡(
mchcfg
 =7Ë{
dømøtio
 = 1.666666667; }

2081
	`pci_c⁄f_ªad
–0, 0, 0, 0xC6, 2, &
mchcfg
);

2082 i‡(((
mchcfg
 >> 10)&3Ë=0Ë{
dømøtio
 = 1; }

2083 i‡(((
mchcfg
 >> 10)&3Ë=1Ë{
dømøtio
 = 1.666667; }

2084 {
dømøtio
 = 1.333333333; }

2088
døm˛ock
 =
fsb
 *
dømøtio
;

2091
	`¥öt_fsb_öfo
(
døm˛ock
, "RAM : ", "DDR");

2093
	}
}

2095 
	$pﬁl_fsb_amd32
() {

2097 
mcg§l
;

2098 
mcg°h
;

2099 
ãmp
;

2100 
døm˛ock
;

2101 
c€f2
;

2104
	`rdm§
(0x0c0010015,
mcg§l
,
mcg°h
);

2105
ãmp
 = (
mcg§l
 >> 24)&0x0F;

2107 i‡((
mcg§l
 >> 19)&1Ë{
c€f2
 =
©hl⁄c€f2
[
ãmp
]; }

2108 {
c€f2
 =
©hl⁄c€f
[
ãmp
]; }

2110 i‡(
c€f2
 == 0) { coef2 = 1; };

2113
døm˛ock
 = (
ext˛ock
 /1000Ë/
c€f2
;

2116
	`¥öt_fsb_öfo
(
døm˛ock
, "FSB : ", "DDR");

2118
	}
}

2120 
	$pﬁl_fsb_nf2
() {

2122 
mcg§l
;

2123 
mcg°h
;

2124 
ãmp
,
mem∂l
;

2125 
døm˛ock
,
fsb
;

2126 
mem_m
,
mem_n
;

2127 
c€f
;

2128
c€f
 = 10;

2131
	`rdm§
(0x0c0010015,
mcg§l
,
mcg°h
);

2132
ãmp
 = (
mcg§l
 >> 24)&0x0F;

2134 i‡((
mcg§l
 >> 19)&1Ë{
c€f
 =
©hl⁄c€f2
[
ãmp
]; }

2135 {
c€f
 =
©hl⁄c€f
[
ãmp
]; }

2138
	`pci_c⁄f_ªad
(0, 0, 3, 0x70, 4, &
mem∂l
);

2139
mem_m
 = (
mem∂l
&0x0F);

2140
mem_n
 = ((
mem∂l
 >> 4) & 0x0F);

2143 i‡–
mem_m
 =0 ||
mem_n
 == 0 ) {

2144
	`pci_c⁄f_ªad
(0, 0, 3, 0x7C, 4, &
mem∂l
);

2145
mem_m
 = (
mem∂l
&0x0F);

2146
mem_n
 = ((
mem∂l
 >> 4) & 0x0F);

2150
døm˛ock
 = ((
ext˛ock
 /1000Ë/
c€f
Ë* (
mem_n
/
mem_m
);

2151
fsb
 = ((
ext˛ock
 /1000Ë/
c€f
);

2155
	`˝röt
(
LINE_CPU
+5,
cﬁ
, "/ FSB : ");

2156
cﬁ
 += 8;

2157
	`d¥öt
(
LINE_CPU
+5,
cﬁ
,
fsb
, 3,0);

2158
cﬁ
 += 3;

2159
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "MHz");

2161
	`¥öt_fsb_öfo
(
døm˛ock
, "RAM : ", "DDR");

2163
	}
}

2165 
	$pﬁl_fsb_us15w
() {

2167 
døm˛ock
,
dømøtio
,
fsb
,
gfx
;

2168 
m§
;

2172
	`pci_c⁄f_wrôe
(0, 0, 0, 0xD0, 4, 0xD0050300 );

2173
	`pci_c⁄f_ªad
(0, 0, 0, 0xD4, 4, &
m§
 );

2174
fsb
 = (
m§
 >> 3 ) & 1;

2176
dømøtio
 = 0.5;

2179 i‡(–
m§
 >> 3 ) & 1) {

2180
fsb
 = 533;

2182
fsb
 = 400;

2185 –
m§
 >> 0 ) & 7) {

2187
gfx
 = 100;

2190
gfx
 = 133;

2193
gfx
 = 150;

2196
gfx
 = 178;

2199
gfx
 = 200;

2202
gfx
 = 266;

2205
gfx
 = 0;

2209
døm˛ock
 =
fsb
 *
dømøtio
;

2212
	`¥öt_fsb_öfo
(
døm˛ock
, "RAM : ", "DDR");

2215
	`˝röt
(
LINE_CPU
+4,
cﬁ
 +1, "- FSB : ");

2216
cﬁ
 += 9;

2217
	`d¥öt
(
LINE_CPU
+4,
cﬁ
,
fsb
, 3,0);

2218
cﬁ
 += 3;

2219
	`˝röt
(
LINE_CPU
+4,
cﬁ
 +1, "MHz");

2220
cﬁ
 += 4;

2222
	`˝röt
(
LINE_CPU
+4,
cﬁ
 +1, "- GFX : ");

2223
cﬁ
 += 9;

2224
	`d¥öt
(
LINE_CPU
+4,
cﬁ
,
gfx
, 3,0);

2225
cﬁ
 += 3;

2226
	`˝röt
(
LINE_CPU
+4,
cﬁ
 +1, "MHz");

2227
cﬁ
 += 4;

2229
	}
}

2231 
	$pﬁl_fsb_nhm
() {

2233 
døm˛ock
,
dømøtio
,
fsb
;

2234 
mc_dimm_˛k_øtio
,
qpi_∂l_°©us
;

2235 
c€f
 =
	`gëNHMmu…ùlõr
();

2236 
qpi_•ìd
;

2238
fsb
 = ((
ext˛ock
 /1000Ë/
c€f
);

2241
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "/ BCLK : ");

2242
cﬁ
 += 10;

2243
	`d¥öt
(
LINE_CPU
+5,
cﬁ
,
fsb
, 3,0);

2244
cﬁ
 += 3;

2245
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "MHz");

2246
cﬁ
 += 4;

2249 if(
˘æ
.
mode
 =
ECC_NONE
 &&
˝u_id
.
modñ
 == 10) {

2250
	`pci_c⁄f_ªad
(
nhm_bus
, 2, 1, 0x50, 2, &
qpi_∂l_°©us
);

2251
qpi_•ìd
 = (
qpi_∂l_°©us
 & 0x7FË* ((
ext˛ock
 / 1000Ë/
c€f
) * 2;

2252
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "/ QPI : ");

2253
cﬁ
 += 9;

2254
	`d¥öt
(
LINE_CPU
+5,
cﬁ
,
qpi_•ìd
/1000, 1,0);

2255
cﬁ
 += 1;

2256
	`˝röt
(
LINE_CPU
+5,
cﬁ
, ".");

2257
cﬁ
 += 1;

2258
qpi_•ìd
 = ((qpi_speed / 1000) - ()(qpi_speed / 1000)) * 10;

2259
	`d¥öt
(
LINE_CPU
+5,
cﬁ
,
qpi_•ìd
, 1,0);

2260
cﬁ
 += 1;

2261
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "GT/s");

2262
cﬁ
 += 5;

2267
	`pci_c⁄f_ªad
(
nhm_bus
, 3, 4, 0x54, 2, &
mc_dimm_˛k_øtio
);

2268
dømøtio
 = (
mc_dimm_˛k_øtio
 & 0x1F);

2271
fsb
 = ((
ext˛ock
 / 1000Ë/
c€f
);

2272
døm˛ock
 =
fsb
 *
dømøtio
 / 2;

2275
	`¥öt_fsb_öfo
(
døm˛ock
, "RAM : ", "DDR3-");

2277
	}
}

2279 
	$pﬁl_fsb_nhm32
() {

2281 
døm˛ock
,
dømøtio
,
fsb
;

2282 
mc_dimm_˛k_øtio
,
qpi_∂l_°©us
;

2283 
c€f
 =
	`gëNHMmu…ùlõr
();

2284 
qpi_•ìd
;

2286
fsb
 = ((
ext˛ock
 /1000Ë/
c€f
);

2289
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "/ BCLK : ");

2290
cﬁ
 += 10;

2291
	`d¥öt
(
LINE_CPU
+5,
cﬁ
,
fsb
, 3,0);

2292
cﬁ
 += 3;

2293
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "MHz");

2294
cﬁ
 += 4;

2297 if(
˘æ
.
mode
 =
ECC_NONE
 &&
˝u_id
.
modñ
 == 12) {

2298
	`pci_c⁄f_ªad
(
nhm_bus
, 2, 1, 0x50, 2, &
qpi_∂l_°©us
);

2299
qpi_•ìd
 = (
qpi_∂l_°©us
 & 0x7FË* ((
ext˛ock
 / 1000Ë/
c€f
) * 2;

2300
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "/ QPI : ");

2301
cﬁ
 += 9;

2302
	`d¥öt
(
LINE_CPU
+5,
cﬁ
,
qpi_•ìd
/1000, 1,0);

2303
cﬁ
 += 1;

2304
	`˝röt
(
LINE_CPU
+5,
cﬁ
, ".");

2305
cﬁ
 += 1;

2306
qpi_•ìd
 = ((qpi_speed / 1000) - ()(qpi_speed / 1000)) * 10;

2307
	`d¥öt
(
LINE_CPU
+5,
cﬁ
,
qpi_•ìd
, 1,0);

2308
cﬁ
 += 1;

2309
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "GT/s");

2310
cﬁ
 += 5;

2315
	`pci_c⁄f_ªad
(
nhm_bus
, 3, 4, 0x50, 2, &
mc_dimm_˛k_øtio
);

2316
dømøtio
 = (
mc_dimm_˛k_øtio
 & 0x1F);

2319
fsb
 = ((
ext˛ock
 / 1000Ë/
c€f
);

2320
døm˛ock
 =
fsb
 *
dømøtio
 / 2;

2323
	`¥öt_fsb_öfo
(
døm˛ock
, "RAM : ", "DDR3-");

2325
	}
}

2327 
	$pﬁl_fsb_wmr
() {

2329 
døm˛ock
,
dømøtio
,
fsb
;

2330 
dev0
,
mchcfg
;

2331 
c€f
 =
	`gëNHMmu…ùlõr
();

2332 *
±r
;

2334
fsb
 = ((
ext˛ock
 / 1000Ë/
c€f
);

2336 if(
˘æ
.
mode
 =
ECC_NONE
)

2338
cﬁ
 = 0;

2339
	`˝röt
(
LINE_CPU
+5,
cﬁ
, "IMC : "); col += 6;

2340
	`gëI¡ñPNS
();

2346
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "/ BCLK : ");

2347
cﬁ
 += 10;

2348
	`d¥öt
(
LINE_CPU
+5,
cﬁ
,
fsb
, 3,0);

2349
cﬁ
 += 3;

2350
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "MHz");

2351
cﬁ
 += 4;

2354
	`pci_c⁄f_ªad
–0, 0, 0, 0x48, 4, &
dev0
);

2355
dev0
 &= 0xFFFFC000;

2356
±r
=(*)(
dev0
+0x2C20);

2357
mchcfg
 = *
±r
 & 0xFFFF;

2358
dømøtio
 = 1;

2361
dømøtio
 = 0.25 * ()(*
±r
 & 0x1F);

2364
døm˛ock
 =
fsb
 *
dømøtio
;

2367
	`¥öt_fsb_öfo
(
døm˛ock
, "RAM : ", "DDR3-");

2369
	}
}

2371 
	$pﬁl_fsb_¢b
() {

2373 
døm˛ock
,
dømøtio
,
fsb
;

2374 
dev0
,
mchcfg
;

2375 
c€f
 =
	`gëSNBmu…ùlõr
();

2376 *
±r
;

2378
fsb
 = ((
ext˛ock
 / 1000Ë/
c€f
);

2380 if(
˘æ
.
mode
 =
ECC_NONE
)

2382
cﬁ
 = 0;

2383
	`˝röt
(
LINE_CPU
+5,
cﬁ
, "IMC : "); col += 6;

2384
	`gëI¡ñPNS
();

2390
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "/ BCLK : ");

2391
cﬁ
 += 10;

2392
	`d¥öt
(
LINE_CPU
+5,
cﬁ
,
fsb
, 3,0);

2393
cﬁ
 += 3;

2394
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "MHz");

2395
cﬁ
 += 4;

2398
	`pci_c⁄f_ªad
–0, 0, 0, 0x48, 4, &
dev0
);

2399
dev0
 &= 0xFFFFC000;

2400
±r
=(*)(
dev0
+0x5E04);

2401
mchcfg
 = *
±r
 & 0xFFFF;

2402
dømøtio
 = 1;

2405
dømøtio
 = ()(*
±r
 & 0x1F) * (133.34f / 100.0f);

2408
døm˛ock
 =
fsb
 *
dømøtio
;

2411
	`¥öt_fsb_öfo
(
døm˛ock
, "RAM : ", "DDR3-");

2413
	}
}

2418 
	$pﬁl_timögs_nf4õ
() {

2421
ul⁄g

ªgd0
,
ªg8c
,
ªg9c
,
ªg80
;

2422 
ˇs
,
rcd
,
Ω
,
øs
;

2424
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "- Type : DDR-II");

2427
	`pci_c⁄f_ªad
–0, 1, 1, 0xD0, 4, &
ªgd0
);

2428
	`pci_c⁄f_ªad
–0, 1, 1, 0x80, 1, &
ªg80
);

2429
	`pci_c⁄f_ªad
–0, 1, 0, 0x8C, 4, &
ªg8c
);

2430
	`pci_c⁄f_ªad
–0, 1, 0, 0x9C, 4, &
ªg9c
);

2433
ˇs
 = (
ªgd0
 >> 4) & 0x7;

2434
rcd
 = (
ªg8c
 >> 24) & 0xF;

2435
Ω
 = (
ªg9c
 >> 8) & 0xF;

2436
øs
 = (
ªg8c
 >> 16) & 0x3F;

2438
	`¥öt_timögs_öfo
(
ˇs
,
rcd
,
Ω
,
øs
);

2440 i‡(
ªg80
 & 0x3) {

2441
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "/ Dual Channel (128 bits)");

2443
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "/ Single Channel (64 bits)");

2446
	}
}

2448 
	$pﬁl_timögs_i875
() {

2450
ul⁄g

dev6
,
dev62
;

2451
ul⁄g

ãmp
;

2452 
ˇs
;

2453 
rcd
,
Ω
,
øs
;

2454 *
±r
, *
±r2
;

2457
	`pci_c⁄f_ªad
–0, 6, 0, 0x10, 4, &
dev6
);

2460
	`pci_c⁄f_ªad
–0, 6, 0, 0x40, 4, &
dev62
);

2461
±r2
=(*)(
dev6
+0x68);

2463 i‡((
dev62
&0x3Ë=0 && ((*
±r2
 >> 14)&1) == 1) {

2464
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "- PAT : Enabled");

2466
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "- PAT : Disabled");

2471
±r
=(*)(
dev6
+0x60);

2473
ãmp
 = ((*
±r
 >> 5)& 0x3);

2474 i‡(
ãmp
 =0x0Ë{
ˇs
 = 2.5; } if (temp == 0x1) { cas = 2; } { cas = 3; }

2477
ãmp
 = ((*
±r
 >> 2)& 0x3);

2478 i‡(
ãmp
 =0x0Ë{
rcd
 = 4; } if (temp == 0x1) {Ñcd = 3; } {Ñcd = 2; }

2481
ãmp
 = (*
±r
&0x3);

2482 i‡(
ãmp
 =0x0Ë{
Ω
 = 4; } if (temp == 0x1) {Ñp = 3; } {Ñp = 2; }

2485
ãmp
 = ((*
±r
 >> 7)& 0x7);

2486
øs
 = 10 -
ãmp
;

2489
	`¥öt_timögs_öfo
(
ˇs
,
rcd
,
Ω
,
øs
);

2492 i‡(((*
±r2
 >> 21)&3) > 0) {

2493
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "/ Dual Channel (128 bits)");

2495
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "/ Single Channel (64 bits)");

2497
	}
}

2499 
	$pﬁl_timögs_i925
() {

2502
ul⁄g

dev0
,
dπ
,
drc
,
dcc
,
idëe˘
,
ãmp
;

2503 *
±r
;

2506
	`pci_c⁄f_ªad
–0, 0, 0, 0x44, 4, &
dev0
);

2507
	`pci_c⁄f_ªad
–0, 0, 0, 0x02, 2, &
idëe˘
);

2508
dev0
 &= 0xFFFFC000;

2511
±r
=(*)(
dev0
+0x114);

2512
dπ
 = *
±r
 & 0xFFFFFFFF;

2515
±r
=(*)(
dev0
+0x120);

2516
drc
 = *
±r
 & 0xFFFFFFFF;

2519
±r
=(*)(
dev0
+0x200);

2520
dcc
 = *
±r
 & 0xFFFFFFFF;

2523 i‡((
drc
 & 3) == 2) {

2524
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "- Type : DDR2");

2526
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "- Type : DDR1");

2530
	`˝röt
(
LINE_CPU
+6,
cﬁ2
 +1, "/ CAS : ");

2531
cﬁ2
 += 9;

2534
ãmp
 = ((
dπ
 >> 8)& 0x3);

2536 i‡((
drc
 & 3) == 2){

2538 i‡(
ãmp
 =0x0Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "5-"); }

2539 i‡(
ãmp
 =0x1Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "4-"); }

2540 i‡(
ãmp
 =0x2Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "3-"); }

2541 {
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "6-"); }

2544 i‡(
ãmp
 =0x0Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "3-"); }

2545 i‡(
ãmp
 =0x1Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "2.5-"); col2 +=2;}

2546 {
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "2-"); }

2548
cﬁ2
 +=2;

2551
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
, ((
dπ
 >> 4)& 0x3)+2, 1 ,0);

2552
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "-");

2553
cﬁ2
 +=2;

2556
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
, (
dπ
&0x3)+2, 1 ,0);

2557
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "-");

2558
cﬁ2
 +=2;

2562 i‡(
idëe˘
 > 0x2700)

2563
ãmp
 = ((
dπ
 >> 19)& 0x1F);

2565
ãmp
 = ((
dπ
 >> 20)& 0x0F);

2567
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
ãmp
 , 1 ,0);

2568 (
ãmp
 < 10)?(
cﬁ2
 += 1):(col2 += 2);

2570
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "/"); col2 +=2;

2572
ãmp
 = (
dcc
&0x3);

2573 i‡(
ãmp
 =1Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, " Dual Channel (Asymmetric)"); }

2574 i‡(
ãmp
 =2Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, " Dual Channel (Interleaved)"); }

2575 {
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, " Single Channel (64 bits)"); }

2577
	}
}

2579 
	$pﬁl_timögs_i965
() {

2582
ul⁄g

dev0
,
ãmp
,
c0cke˘æ
,
c1cke˘æ
,
off£t
;

2583
ul⁄g

ODT_C⁄åﬁ_Regi°î
,
Pªch¨ge_Regi°î
,
ACT_Regi°î
,
Ród_Regi°î
,
Misc_Regi°î
;

2584 *
±r
;

2587
	`pci_c⁄f_ªad
–0, 0, 0, 0x48, 4, &
dev0
);

2588
dev0
 &= 0xFFFFC000;

2590
±r
 = (*)(
dev0
+0x260);

2591
c0cke˘æ
 = *
±r
 & 0xFFFFFFFF;

2593
±r
 = (*)(
dev0
+0x660);

2594
c1cke˘æ
 = *
±r
 & 0xFFFFFFFF;

2597 ((
c0cke˘æ
Ë>> 20 & 0xF)?(
off£t
 = 0):(offset = 0x400);

2599
±r
 = (*)(
dev0
+
off£t
+0x29C);

2600
ODT_C⁄åﬁ_Regi°î
 = *
±r
 & 0xFFFFFFFF;

2602
±r
 = (*)(
dev0
+
off£t
+0x250);

2603
Pªch¨ge_Regi°î
 = *
±r
 & 0xFFFFFFFF;

2605
±r
 = (*)(
dev0
+
off£t
+0x252);

2606
ACT_Regi°î
 = *
±r
 & 0xFFFFFFFF;

2608
±r
 = (*)(
dev0
+
off£t
+0x258);

2609
Ród_Regi°î
 = *
±r
 & 0xFFFFFFFF;

2611
±r
 = (*)(
dev0
+
off£t
+0x244);

2612
Misc_Regi°î
 = *
±r
 & 0xFFFFFFFF;

2615
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "- Type : DDR-II");

2618
	`˝röt
(
LINE_CPU
+6,
cﬁ2
 +1, "/ CAS : ");

2619
cﬁ2
 += 9;

2622
ãmp
 = ((
ODT_C⁄åﬁ_Regi°î
 >> 17)& 7) + 3.0f;

2623
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
ãmp
, 1 ,0);

2624
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "-");

2625 (
ãmp
 < 10)?(
cﬁ2
 += 2):(col2 += 3);

2628
ãmp
 = (
Ród_Regi°î
 >> 16) & 0xF;

2629
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
ãmp
, 1 ,0);

2630
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "-");

2631 (
ãmp
 < 10)?(
cﬁ2
 += 2):(col2 += 3);

2634
ãmp
 = (
ACT_Regi°î
 >> 13) & 0xF;

2635
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
ãmp
, 1 ,0);

2636
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "-");

2637 (
ãmp
 < 10)?(
cﬁ2
 += 2):(col2 += 3);

2640
ãmp
 = (
Pªch¨ge_Regi°î
 >> 11) & 0x1F;

2641
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
ãmp
, 1 ,0);

2642 (
ãmp
 < 10)?(
cﬁ2
 += 1):(col2 += 2);

2644
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "/"); col2 +=2;

2646 i‡((
c0cke˘æ
 >> 20 & 0xFË&& (
c1cke˘æ
 >> 20 & 0xF)) {

2647
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "Dual Channel");

2649
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "Single Channel");

2652
	}
}

2654 
	$pﬁl_timögs_im965
() {

2657
ul⁄g

dev0
,
ãmp
,
c0cke˘æ
,
c1cke˘æ
,
off£t
;

2658
ul⁄g

ODT_C⁄åﬁ_Regi°î
,
Pªch¨ge_Regi°î
;

2659 *
±r
;

2662
	`pci_c⁄f_ªad
–0, 0, 0, 0x48, 4, &
dev0
);

2663
dev0
 &= 0xFFFFC000;

2665
±r
 = (*)(
dev0
+0x1200);

2666
c0cke˘æ
 = *
±r
 & 0xFFFFFFFF;

2668
±r
 = (*)(
dev0
+0x1300);

2669
c1cke˘æ
 = *
±r
 & 0xFFFFFFFF;

2672 ((
c0cke˘æ
Ë>> 20 & 0xF)?(
off£t
 = 0):(offset = 0x100);

2674
±r
 = (*)(
dev0
+
off£t
+0x121C);

2675
ODT_C⁄åﬁ_Regi°î
 = *
±r
 & 0xFFFFFFFF;

2677
±r
 = (*)(
dev0
+
off£t
+0x1214);

2678
Pªch¨ge_Regi°î
 = *
±r
 & 0xFFFFFFFF;

2681
	`˝röt
(
LINE_CPU
+5,
cﬁ
+1, "- Type : DDR-II");

2684
	`˝röt
(
LINE_CPU
+6,
cﬁ2
 +1, "/ CAS : ");

2685
cﬁ2
 += 9;

2688
ãmp
 = ((
ODT_C⁄åﬁ_Regi°î
 >> 23)& 7) + 3.0f;

2689
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
ãmp
, 1 ,0);

2690
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "-");

2691 (
ãmp
 < 10)?(
cﬁ2
 += 2):(col2 += 3);

2694
ãmp
 = ((
Pªch¨ge_Regi°î
 >> 5)& 7) + 2.0f;

2695
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
ãmp
, 1 ,0);

2696
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "-");

2697 (
ãmp
 < 10)?(
cﬁ2
 += 2):(col2 += 3);

2700
ãmp
 = (
Pªch¨ge_Regi°î
 & 7) + 2.0f;

2701
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
ãmp
, 1 ,0);

2702
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "-");

2703 (
ãmp
 < 10)?(
cﬁ2
 += 2):(col2 += 3);

2706
ãmp
 = (
Pªch¨ge_Regi°î
 >> 21) & 0x1F;

2707
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
ãmp
, 1 ,0);

2708 (
ãmp
 < 10)?(
cﬁ2
 += 1):(col2 += 2);

2710
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "/"); col2 +=2;

2712 i‡((
c0cke˘æ
 >> 20 & 0xFË&& (
c1cke˘æ
 >> 20 & 0xF)) {

2713
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "Dual Channel");

2715
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "Single Channel");

2718
	}
}

2720 
	$pﬁl_timögs_p35
() {

2723 
ˇs
;

2724 
rcd
,
Ω
,
øs
;

2725
ul⁄g

dev0
,
Devi˚_ID
,
Mem‹y_Check
,
c0cke˘æ
,
c1cke˘æ
,
off£t
;

2726
ul⁄g

ODT_C⁄åﬁ_Regi°î
,
Pªch¨ge_Regi°î
,
ACT_Regi°î
,
Ród_Regi°î
,
Misc_Regi°î
;

2727 *
±r
;

2729
	`pci_c⁄f_ªad
–0, 0, 0, 0x02, 2, &
Devi˚_ID
);

2730
Devi˚_ID
 &= 0xFFFF;

2733
	`pci_c⁄f_ªad
–0, 0, 0, 0x48, 4, &
dev0
);

2734
dev0
 &= 0xFFFFC000;

2736
±r
 = (*)(
dev0
+0x260);

2737
c0cke˘æ
 = *
±r
 & 0xFFFFFFFF;

2739
±r
 = (*)(
dev0
+0x660);

2740
c1cke˘æ
 = *
±r
 & 0xFFFFFFFF;

2743 ((
c0cke˘æ
Ë>> 20 & 0xF)?(
off£t
 = 0):(offset = 0x400);

2745
±r
 = (*)(
dev0
+
off£t
+0x265);

2746
ODT_C⁄åﬁ_Regi°î
 = *
±r
 & 0xFFFFFFFF;

2748
±r
 = (*)(
dev0
+
off£t
+0x25D);

2749
Pªch¨ge_Regi°î
 = *
±r
 & 0xFFFFFFFF;

2751
±r
 = (*)(
dev0
+
off£t
+0x252);

2752
ACT_Regi°î
 = *
±r
 & 0xFFFFFFFF;

2754
±r
 = (*)(
dev0
+
off£t
+0x258);

2755
Ród_Regi°î
 = *
±r
 & 0xFFFFFFFF;

2757
±r
 = (*)(
dev0
+
off£t
+0x244);

2758
Misc_Regi°î
 = *
±r
 & 0xFFFFFFFF;

2761 if(
Devi˚_ID
 > 0x2E00) {

2762
±r
 = (*)(
dev0
+
off£t
+0x1A8);

2763
Mem‹y_Check
 = *
±r
 & 0xFFFFFFFF;

2764
Mem‹y_Check
 >>= 2;

2765
Mem‹y_Check
 &= 1;

2766
Mem‹y_Check
 = !Memory_Check;

2768
±r
 = (*)(
dev0
+
off£t
+0x1E8);

2769
Mem‹y_Check
 = *
±r
 & 0xFFFFFFFF;

2773 i‡(
Mem‹y_Check
 & 1) {

2774
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "- Type : DDR2");

2776
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +1, "- Type : DDR3");

2780 if(
Devi˚_ID
 > 0x2E00) {

2781
ˇs
 = ((
ODT_C⁄åﬁ_Regi°î
 >> 8)& 0x3F) - 6.0f;

2783
ˇs
 = ((
ODT_C⁄åﬁ_Regi°î
 >> 8)& 0x3F) - 9.0f;

2787
rcd
 = (
Ród_Regi°î
 >> 17) & 0xF;

2790
Ω
 = (
ACT_Regi°î
 >> 13) & 0xF;

2793
øs
 =
Pªch¨ge_Regi°î
 & 0x3F;

2795
	`¥öt_timögs_öfo
(
ˇs
,
rcd
,
Ω
,
øs
);

2797
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "/"); col2 +=2;

2799 i‡((
c0cke˘æ
 >> 20 & 0xFË&& (
c1cke˘æ
 >> 20 & 0xF)) {

2800
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "Dual Channel");

2802
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "Single Channel");

2805
	}
}

2807 
	$pﬁl_timögs_wmr
() {

2809 
ˇs
;

2810 
rcd
,
Ω
,
øs
;

2811
ul⁄g

dev0
,
c0cke˘æ
,
c1cke˘æ
,
off£t
;

2812
ul⁄g

ODT_C⁄åﬁ_Regi°î
,
Pªch¨ge_Regi°î
,
ACT_Regi°î
,
Ród_Regi°î
,
MRC_Regi°î
;

2813 *
±r
;

2816
	`pci_c⁄f_ªad
–0, 0, 0, 0x48, 4, &
dev0
);

2817
dev0
 &= 0xFFFFC000;

2819
±r
 = (*)(
dev0
+0x260);

2820
c0cke˘æ
 = *
±r
 & 0xFFFFFFFF;

2822
±r
 = (*)(
dev0
+0x660);

2823
c1cke˘æ
 = *
±r
 & 0xFFFFFFFF;

2826 ((
c0cke˘æ
Ë>> 20 & 0xF)?(
off£t
 = 0):(offset = 0x400);

2828
±r
 = (*)(
dev0
+
off£t
+0x265);

2829
ODT_C⁄åﬁ_Regi°î
 = *
±r
 & 0xFFFFFFFF;

2831
±r
 = (*)(
dev0
+
off£t
+0x25D);

2832
Pªch¨ge_Regi°î
 = *
±r
 & 0xFFFFFFFF;

2834
±r
 = (*)(
dev0
+
off£t
+0x252);

2835
ACT_Regi°î
 = *
±r
 & 0xFFFFFFFF;

2837
±r
 = (*)(
dev0
+
off£t
+0x258);

2838
Ród_Regi°î
 = *
±r
 & 0xFFFFFFFF;

2840
±r
 = (*)(
dev0
+
off£t
+0x240);

2841
MRC_Regi°î
 = *
±r
 & 0xFFFFFFFF;

2844 if(
MRC_Regi°î
 & 0xF) {

2845
ˇs
 = (
MRC_Regi°î
 & 0xF) + 3.0f;

2847
ˇs
 = ((
ODT_C⁄åﬁ_Regi°î
 >> 8)& 0x3F) - 5.0f;

2851
rcd
 = (
Ród_Regi°î
 >> 17) & 0xF;

2854
Ω
 = (
ACT_Regi°î
 >> 13) & 0xF;

2857
øs
 =
Pªch¨ge_Regi°î
 & 0x3F;

2859
	`¥öt_timögs_öfo
(
ˇs
,
rcd
,
Ω
,
øs
);

2861
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "/"); col2 +=2;

2863 i‡((
c0cke˘æ
 >> 20 & 0xFË&& (
c1cke˘æ
 >> 20 & 0xF)) {

2864
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "Dual Channel");

2866
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "Single Channel");

2869
	}
}

2871 
	$pﬁl_timögs_¢b
() {

2873 
ˇs
;

2874 
rcd
,
Ω
,
øs
;

2875
ul⁄g

dev0
,
off£t
;

2876
ul⁄g

IMC_Regi°î
,
MCMaö0_Regi°î
,
MCMaö1_Regi°î
;

2877 *
±r
;

2880
	`pci_c⁄f_ªad
–0, 0, 0, 0x48, 4, &
dev0
);

2881
dev0
 &= 0xFFFFC000;

2883
off£t
 = 0x0000;

2885
±r
 = (*)(
dev0
+
off£t
+0x4000);

2886
IMC_Regi°î
 = *
±r
 & 0xFFFFFFFF;

2889
ˇs
 = ()((
IMC_Regi°î
 >> 8) & 0x0F);

2892
rcd
 =
IMC_Regi°î
 & 0x0F;

2895
Ω
 = (
IMC_Regi°î
 >> 4) & 0x0F;

2898
øs
 = (
IMC_Regi°î
 >> 16) & 0xFF;

2900
	`¥öt_timögs_öfo
(
ˇs
,
rcd
,
Ω
,
øs
);

2902
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "/"); col2 +=2;

2905
±r
 = (*)(
dev0
+
off£t
+0x5004);

2906
MCMaö0_Regi°î
 = *
±r
 & 0xFFFF;

2907
±r
 = (*)(
dev0
+
off£t
+0x5008);

2908
MCMaö1_Regi°î
 = *
±r
 & 0xFFFF;

2910 if(
MCMaö0_Regi°î
 =0 ||
MCMaö1_Regi°î
 == 0) {

2911
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "Single Channel");

2913
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "Dual Channel");

2916
	}
}

2918 
	$pﬁl_timögs_5400
() {

2921
ul⁄g

amba£
,
må1
,
må2
,
off£t
,
mˇ
,
ãmp
;

2922 *
±r
;

2925
amba£
 = 0xFE000000;

2926
off£t
 =
må1
 =
må2
 = 0;

2930 ((
må2
 & 0xF) < 3) || ((mtr2 & 0xF) > 6)) {

2931
±r
 = (*)(
amba£
+0x378+
off£t
);

2932
må1
 = *
±r
 & 0xFFFFFFFF;

2934
±r
 = (*)(
amba£
+0x37C+
off£t
);

2935
må2
 = *
±r
 & 0xFFFFFFFF;

2936
off£t
 += 0x8000;

2939
	`pci_c⁄f_ªad
–0, 16, 1, 0x58, 4, &
mˇ
);

2945
	`˝röt
(
LINE_CPU
+6,
cﬁ2
 +1, "/ CAS : ");

2946
cﬁ2
 += 9;

2949
ãmp
 =
må2
 & 0xF;

2950
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
ãmp
, 1 ,0);

2951
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "-");

2952
cﬁ2
 += 2;

2955
ãmp
 = 6 - ((
må1
 >> 10) & 3);

2956
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
ãmp
, 1 ,0);

2957
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "-");

2958
cﬁ2
 += 2;

2961
ãmp
 = 6 - ((
må1
 >> 8) & 3);

2962
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
ãmp
, 1 ,0);

2963
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "-");

2964
cﬁ2
 += 2;

2967
ãmp
 = 16 - (3 * ((
må1
 >> 29) & 3)) + ((mtr1 >> 12) & 3);

2968 if(((
må1
 >> 12Ë& 3Ë=3 && ((må1 >> 29Ë& 3Ë=2Ë{
ãmp
 = 9; }

2970
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
ãmp
, 1 ,0);

2971 (
ãmp
 < 10)?(
cﬁ2
 += 1):(col2 += 2);

2973
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "/"); col2 +=2;

2975 i‡((
mˇ
 >> 14) & 1) {

2976
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "Single Channel");

2978
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "Dual Channel");

2981
	}
}

2983 
	$pﬁl_timögs_E7520
() {

2985
ul⁄g

dπ
,
ddrc§
;

2986 
ˇs
;

2987 
rcd
,
Ω
,
øs
;

2989
	`pci_c⁄f_ªad
–0, 0, 0, 0x78, 4, &
dπ
);

2990
	`pci_c⁄f_ªad
–0, 0, 0, 0x9A, 2, &
ddrc§
);

2992
ˇs
 = ((
dπ
 >> 2) & 3) + 2;

2993
rcd
 = ((
dπ
 >> 10) & 1) + 3;

2994
Ω
 = ((
dπ
 >> 9) & 1) + 3;

2995
øs
 = ((
dπ
 >> 14) & 3) + 11;

2997
	`¥öt_timögs_öfo
(
ˇs
,
rcd
,
Ω
,
øs
);

2999 i‡((
ddrc§
 & 0xF) >= 0xC) {

3000
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "/ Dual Channel (128 bits)");

3002
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "/ Single Channel (64 bits)");

3004
	}
}

3007 
	$pﬁl_timögs_i855
() {

3009
ul⁄g

dπ
,
ãmp
;

3011
	`pci_c⁄f_ªad
–0, 0, 0, 0x78, 4, &
dπ
);

3014
	`˝röt
(
LINE_CPU
+6,
cﬁ2
 +1, "/ CAS : ");

3015
cﬁ2
 += 9;

3018
ãmp
 = ((
dπ
 >> 4)&0x1);

3019 i‡(
ãmp
 =0x0Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "2.5-"); col2 += 4; }

3020 {
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "2-"); col2 +=2; }

3023
ãmp
 = ((
dπ
 >> 2)& 0x1);

3024 i‡(
ãmp
 =0x0Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "3-"); }

3025 {
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "2-"); }

3026
cﬁ2
 +=2;

3029
ãmp
 = (
dπ
&0x1);

3030 i‡(
ãmp
 =0x0Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "3-"); }

3031 {
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "2-"); }

3032
cﬁ2
 +=2;

3035
ãmp
 = 7-((
dπ
 >> 9)& 0x3);

3036 i‡(
ãmp
 =0x0Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "7"); }

3037 i‡(
ãmp
 =0x1Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "6"); }

3038 i‡(
ãmp
 =0x2Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "5"); }

3039
cﬁ2
 +=1;

3041
	}
}

3043 
	$pﬁl_timögs_E750x
() {

3045
ul⁄g

dπ
,
drc
,
ãmp
;

3046 
ˇs
;

3047 
rcd
,
Ω
,
øs
;

3049
	`pci_c⁄f_ªad
–0, 0, 0, 0x78, 4, &
dπ
);

3050
	`pci_c⁄f_ªad
–0, 0, 0, 0x7C, 4, &
drc
);

3052 i‡((
dπ
 >> 4Ë& 1Ë{
ˇs
 = 2; } { cas = 2.5; };

3053 i‡((
dπ
 >> 1Ë& 1Ë{
rcd
 = 2; } {Ñcd = 3; };

3054 i‡(
dπ
 & 1Ë{
Ω
 = 2; } {Ñp = 3; };

3056
ãmp
 = ((
dπ
 >> 9) & 3);

3057 i‡(
ãmp
 =2Ë{
øs
 = 5; } if (temp == 1) {Ñas = 6; } {Ñas = 7; }

3059
	`¥öt_timögs_öfo
(
ˇs
,
rcd
,
Ω
,
øs
);

3061 i‡(((
drc
 >> 22)&1) == 1) {

3062
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "/ Dual Channel (128 bits)");

3064
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "/ Single Channel (64 bits)");

3067
	}
}

3069 
	$pﬁl_timögs_i852
() {

3071
ul⁄g

dπ
,
ãmp
;

3073
	`pci_c⁄f_ªad
–0, 0, 1, 0x60, 4, &
dπ
);

3076
	`˝röt
(
LINE_CPU
+6,
cﬁ2
 +1, "/ CAS : ");

3077
cﬁ2
 += 9;

3080
ãmp
 = ((
dπ
 >> 5)&0x1);

3081 i‡(
ãmp
 =0x0Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "2.5-"); col2 += 4; }

3082 {
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "2-"); col2 +=2; }

3085
ãmp
 = ((
dπ
 >> 2)& 0x3);

3086 i‡(
ãmp
 =0x0Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "4-"); }

3087 i‡(
ãmp
 =0x1Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "3-"); }

3088 {
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "2-"); }

3089
cﬁ2
 +=2;

3092
ãmp
 = (
dπ
&0x3);

3093 i‡(
ãmp
 =0x0Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "4-"); }

3094 i‡(
ãmp
 =0x1Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "3-"); }

3095 {
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "2-"); }

3096
cﬁ2
 +=2;

3099
ãmp
 = ((
dπ
 >> 9)& 0x3);

3100 i‡(
ãmp
 =0x0Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "8"); col2 +=7; }

3101 i‡(
ãmp
 =0x1Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "7"); col2 +=6; }

3102 i‡(
ãmp
 =0x2Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "6"); col2 +=5; }

3103 i‡(
ãmp
 =0x3Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "5"); col2 +=5; }

3104
cﬁ2
 +=1;

3106
	}
}

3108 
	$pﬁl_timögs_amd64
() {

3110
ul⁄g

dømér
,
døm˛r
;

3111 
ãmp
;

3112 
åcd
,
åp
,
åas
 ;

3114
	`˝röt
(
LINE_CPU
+6,
cﬁ2
 +1, "/ CAS : ");

3115
cﬁ2
 += 9;

3117
	`pci_c⁄f_ªad
(0, 24, 2, 0x88, 4, &
dømér
);

3118
	`pci_c⁄f_ªad
(0, 24, 2, 0x90, 4, &
døm˛r
);

3120 i‡(((
˝u_id
.
ext
 >> 16) & 0xF) >= 4) {

3124
ãmp
 = (
dømér
 & 0x7) + 1;

3125
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
ãmp
 , 1 ,0);

3126
	`˝röt
(
LINE_CPU
+6,
cﬁ2
 +1, "-"); col2 +=2;

3129
åcd
 = ((
dømér
 >> 4) & 0x3) + 3;

3130
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
åcd
 , 1 ,0);

3131
	`˝röt
(
LINE_CPU
+6,
cﬁ2
 +1, "-"); col2 +=2;

3134
åp
 = ((
dømér
 >> 8) & 0x3) + 3;

3135
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
åp
 , 1 ,0);

3136
	`˝röt
(
LINE_CPU
+6,
cﬁ2
 +1, "-"); col2 +=2;

3139
åas
 = ((
dømér
 >> 12) & 0xF) + 3;

3140 i‡(
åas
 < 10){

3141
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
åas
 , 1 ,0); col2 += 1;

3143
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
åas
 , 2 ,0); col2 += 2;

3145
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "/"); col2 +=2;

3149 i‡((
døm˛r
 >> 11)&1) {

3150
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, " DDR2 (128 bits)");

3151
cﬁ2
 +=16;

3153
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, " DDR2 (64 bits)");

3154
cﬁ2
 +=15;

3161
ãmp
 = (
dømér
 & 0x7);

3162 i‡(
ãmp
 =0x1Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "2-"); col2 +=2; }

3163 i‡(
ãmp
 =0x2Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "3-"); col2 +=2; }

3164 i‡(
ãmp
 =0x5Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "2.5-"); col2 +=4; }

3167
åcd
 = ((
dømér
 >> 12) & 0x7);

3168
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
åcd
 , 1 ,0);

3169
	`˝röt
(
LINE_CPU
+6,
cﬁ2
 +1, "-"); col2 +=2;

3172
åp
 = ((
dømér
 >> 24) & 0x7);

3173
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
åp
 , 1 ,0);

3174
	`˝röt
(
LINE_CPU
+6,
cﬁ2
 +1, "-"); col2 +=2;

3177
åas
 = ((
dømér
 >> 20) & 0xF);

3178 i‡(
åas
 < 10){

3179
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
åas
 , 1 ,0); col2 += 1;

3181
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
åas
 , 2 ,0); col2 += 2;

3183
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "/"); col2 +=2;

3187 i‡(((
døm˛r
 >> 16)&1) == 1) {

3188
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, " DDR1 (128 bits)");

3189
cﬁ2
 +=16;

3191
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, " DDR1 (64 bits)");

3192
cﬁ2
 +=15;

3195
	}
}

3197 
	$pﬁl_timögs_k10
() {

3199
ul⁄g

dømér
,
døm˛r
,
dømchr
;

3200
ul⁄g

off£t
 = 0;

3201 
ˇs
,
rcd
,
Ω
,
rc
,
øs
;

3203
	`pci_c⁄f_ªad
(0, 24, 2, 0x94, 4, &
dømchr
);

3206 if(((
dømchr
>>14) & 0x1))

3208
off£t
 = 0x100;

3209
	`pci_c⁄f_ªad
(0, 24, 2, 0x94+
off£t
, 4, &
dømchr
);

3212
	`pci_c⁄f_ªad
(0, 24, 2, 0x88+
off£t
, 4, &
dømér
);

3213
	`pci_c⁄f_ªad
(0, 24, 2, 0x110, 4, &
døm˛r
);

3216 if(((
dømchr
 >> 8)&1) || ((dramchr & 0x7) == 0x4)){

3218
ˇs
 = (
dømér
 & 0xF) + 4;

3219
rcd
 = ((
dømér
 >> 4) & 0x7) + 5;

3220
Ω
 = ((
dømér
 >> 7) & 0x7) + 5;

3221
øs
 = ((
dømér
 >> 12) & 0xF) + 15;

3222
rc
 = ((
dømér
 >> 16) & 0x1F) + 11;

3225
ˇs
 = (
dømér
 & 0xF) + 1;

3226
rcd
 = ((
dømér
 >> 4) & 0x3) + 3;

3227
Ω
 = ((
dømér
 >> 8) & 0x3) + 3;

3228
øs
 = ((
dømér
 >> 12) & 0xF) + 3;

3229
rc
 = ((
dømér
 >> 16) & 0x1F) + 11;

3232
	`¥öt_timögs_öfo
(
ˇs
,
rcd
,
Ω
,
øs
);

3234
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "/"); col2++;

3237 i‡((
dømchr
 >> 8)&1) {

3238
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "DDR3");

3240
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "DDR2");

3242
cﬁ2
 += 5;

3245 i‡((
døm˛r
 >> 4)&1) {

3246
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "(128 bits)");

3248
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "(64 bits)");

3251
	}
}

3253 
	$pﬁl_timögs_k14
() {

3255
ul⁄g

dømt0
,
dømlow
;

3256 
ˇs
,
rcd
,
Ω
,
rc
,
øs
;

3258
	`pci_c⁄f_ªad
(0, 24, 2, 0x88, 4, &
dømlow
);

3259
	`pci_c⁄f_wrôe
(0, 24, 2, 0xF0, 4, 0x00000040);

3260
	`pci_c⁄f_ªad
(0, 24, 2, 0xF4, 4, &
dømt0
);

3262
ˇs
 = (
dømlow
 & 0xF) + 4;

3263
rcd
 = (
dømt0
 & 0xF) + 5;

3264
Ω
 = ((
dømt0
 >> 8) & 0xF) + 5;

3265
øs
 = ((
dømt0
 >> 16) & 0x1F) + 15;

3266
rc
 = ((
dømt0
 >> 24) & 0x3F) + 16;

3268
	`¥öt_timögs_öfo
(
ˇs
,
rcd
,
Ω
,
øs
);

3270
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "/ DDR3 (64 bits)");

3272
	}
}

3274 
	$pﬁl_timögs_EP80579
() {

3276
ul⁄g

dπ1
,
dπ2
;

3277 
ˇs
;

3278 
rcd
,
Ω
,
øs
;

3280
	`pci_c⁄f_ªad
–0, 0, 0, 0x78, 4, &
dπ1
);

3281
	`pci_c⁄f_ªad
–0, 0, 0, 0x64, 4, &
dπ2
);

3283
ˇs
 = ((
dπ1
 >> 3) & 0x7) + 3;

3284
rcd
 = ((
dπ1
 >> 9) & 0x7) + 3;

3285
Ω
 = ((
dπ1
 >> 6) & 0x7) + 3;

3286
øs
 = ((
dπ2
 >> 28) & 0xF) + 8;

3288
	`¥öt_timögs_öfo
(
ˇs
,
rcd
,
Ω
,
øs
);

3289
	}
}

3291 
	$pﬁl_timögs_nf2
() {

3293
ul⁄g

dømér
,
dømér2
,
dømér3
,
ãmp
;

3294
ul⁄g

dimm1p
,
dimm2p
,
dimm3p
;

3296
	`pci_c⁄f_ªad
(0, 0, 1, 0x90, 4, &
dømér
);

3297
	`pci_c⁄f_ªad
(0, 0, 1, 0xA0, 4, &
dømér2
);

3298
	`pci_c⁄f_ªad
(0, 0, 1, 0x84, 4, &
dømér3
);

3299
	`pci_c⁄f_ªad
(0, 0, 2, 0x40, 4, &
dimm1p
);

3300
	`pci_c⁄f_ªad
(0, 0, 2, 0x44, 4, &
dimm2p
);

3301
	`pci_c⁄f_ªad
(0, 0, 2, 0x48, 4, &
dimm3p
);

3303
	`˝röt
(
LINE_CPU
+6,
cﬁ2
 +1, "/ CAS : ");

3304
cﬁ2
 += 9;

3307
ãmp
 = ((
dømér2
 >> 4) & 0x7);

3308 i‡(
ãmp
 =0x2Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "2-"); col2 +=2; }

3309 i‡(
ãmp
 =0x3Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "3-"); col2 +=2; }

3310 i‡(
ãmp
 =0x6Ë{
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "2.5-"); col2 +=4; }

3313
ãmp
 = ((
dømér
 >> 20) & 0xF);

3314
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
ãmp
 , 1 ,0);

3315
	`˝röt
(
LINE_CPU
+6,
cﬁ2
 +1, "-"); col2 +=2;

3318
ãmp
 = ((
dømér
 >> 28) & 0xF);

3319
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
ãmp
 , 1 ,0);

3320
	`˝röt
(
LINE_CPU
+6,
cﬁ2
 +1, "-"); col2 +=2;

3323
ãmp
 = ((
dømér
 >> 15) & 0xF);

3324 i‡(
ãmp
 < 10){

3325
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
ãmp
 , 1 ,0); col2 += 1;

3327
	`d¥öt
(
LINE_CPU
+6,
cﬁ2
,
ãmp
 , 2 ,0); col2 += 2;

3329
	`˝röt
(
LINE_CPU
+6,
cﬁ2
+1, "/"); col2 +=2;

3334 i‡((
dimm3p
&1Ë+ (
dimm2p
&1Ë=2 || (dimm3p&1Ë+ (
dimm1p
&1) == 2 ) {

3335
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, " Dual Channel (128 bits)");

3336
cﬁ2
 +=24;

3338
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, " Single Channel (64 bits)");

3339
cﬁ2
 +=15;

3342
	}
}

3344 
	$pﬁl_timögs_us15w
() {

3347
ul⁄g

då
,
ãmp
;

3351
	`pci_c⁄f_wrôe
(0, 0, 0, 0xD0, 4, 0xD0010100 );

3352
	`pci_c⁄f_ªad
(0, 0, 0, 0xD4, 4, &
då
 );

3355
	`˝röt
(
LINE_CPU
+5,
cﬁ2
 +1, "/ CAS : ");

3356
cﬁ2
 += 9;

3359
ãmp
 = ((
då
 >> 4) & 0x3) + 3;

3360
	`d¥öt
(
LINE_CPU
+5,
cﬁ2
,
ãmp
, 1 ,0);

3361
	`˝röt
(
LINE_CPU
+5,
cﬁ2
+1, "-");

3362
cﬁ2
 += 2;

3365
ãmp
 = ((
då
 >> 2) & 0x3) + 3;

3366
	`d¥öt
(
LINE_CPU
+5,
cﬁ2
,
ãmp
, 1 ,0);

3367
	`˝röt
(
LINE_CPU
+5,
cﬁ2
+1, "-");

3368
cﬁ2
 += 2;

3371
ãmp
 = ((
då
 >> 0) & 0x3) + 3;

3372
	`d¥öt
(
LINE_CPU
+5,
cﬁ2
,
ãmp
, 1 ,0);

3373
cﬁ2
 += 1;

3375
	}
}

3377 
	$pﬁl_timögs_nhm
() {

3379
ul⁄g

mc_ch™√l_b™k_timög
,
mc_c⁄åﬁ
,
mc_ch™√l_mrs_vÆue
;

3380 
ˇs
;

3381 
rcd
,
Ω
,
øs
;

3382 
fvc_bn
 = 4;

3385
	`pci_c⁄f_ªad
(
nhm_bus
, 3, 0, 0x48, 2, &
mc_c⁄åﬁ
);

3386
mc_c⁄åﬁ
 = (mc_control >> 8) & 0x7;

3389 if(
mc_c⁄åﬁ
 & 1) {

3390
fvc_bn
 = 4;

3391 } if(
mc_c⁄åﬁ
 & 2) {

3392
fvc_bn
 = 5;

3393 } if(
mc_c⁄åﬁ
 & 4) {

3394
fvc_bn
 = 6;

3399
	`pci_c⁄f_ªad
(
nhm_bus
,
fvc_bn
, 0, 0x88, 4, &
mc_ch™√l_b™k_timög
);

3400
	`pci_c⁄f_ªad
(
nhm_bus
,
fvc_bn
, 0, 0x70, 4, &
mc_ch™√l_mrs_vÆue
);

3401
ˇs
 = ((
mc_ch™√l_mrs_vÆue
 >> 4) & 0xF ) + 4.0f;

3402
rcd
 = (
mc_ch™√l_b™k_timög
 >> 9) & 0xF;

3403
øs
 = (
mc_ch™√l_b™k_timög
 >> 4) & 0x1F;

3404
Ω
 =
mc_ch™√l_b™k_timög
 & 0xF;

3406
	`¥öt_timögs_öfo
(
ˇs
,
rcd
,
Ω
,
øs
);

3409 i‡(
mc_c⁄åﬁ
 == 1 || mc_control == 2 || mc_control == 4 ) {

3410
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "/ Single Channel");

3411
cﬁ2
 += 16;

3412 } i‡(
mc_c⁄åﬁ
 == 7) {

3413
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "/ Triple Channel");

3414
cﬁ2
 += 16;

3416
	`˝röt
(
LINE_CPU
+6,
cﬁ2
, "/ Dual Channel");

3417
cﬁ2
 += 14;

3420
	}
}

3426 
pci_mem‹y_c⁄åﬁÀr

	gc⁄åﬁÀrs
[] = {

3428 { 0, 0, "", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3431 { 0x1022, 0x7006, "AMD 751", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_amd751
,
pﬁl_amd751
 },

3432 { 0x1022, 0x700c, "AMD 762", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_amd76x
,
pﬁl_amd76x
 },

3433 { 0x1022, 0x700e, "AMD 761", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_amd76x
,
pﬁl_amd76x
 },

3436 { 0x1039, 0x0600, "SiS 600", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3437 { 0x1039, 0x0620, "SiS 620", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3438 { 0x1039, 0x5600, "SiS 5600", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3439 { 0x1039, 0x0645, "SiS 645", 0,
pﬁl_fsb_p4
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3440 { 0x1039, 0x0646, "SiS 645DX", 0,
pﬁl_fsb_p4
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3441 { 0x1039, 0x0630, "SiS 630", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3442 { 0x1039, 0x0650, "SiS 650", 0,
pﬁl_fsb_p4
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3443 { 0x1039, 0x0651, "SiS 651", 0,
pﬁl_fsb_p4
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3444 { 0x1039, 0x0730, "SiS 730", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3445 { 0x1039, 0x0735, "SiS 735", 0,
pﬁl_fsb_amd32
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3446 { 0x1039, 0x0740, "SiS 740", 0,
pﬁl_fsb_amd32
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3447 { 0x1039, 0x0745, "SiS 745", 0,
pﬁl_fsb_amd32
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3448 { 0x1039, 0x0748, "SiS 748", 0,
pﬁl_fsb_amd32
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3449 { 0x1039, 0x0655, "SiS 655", 0,
pﬁl_fsb_p4
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3450 { 0x1039, 0x0656, "SiS 656", 0,
pﬁl_fsb_p4
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3451 { 0x1039, 0x0648, "SiS 648", 0,
pﬁl_fsb_p4
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3452 { 0x1039, 0x0649, "SiS 649", 0,
pﬁl_fsb_p4
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3453 { 0x1039, 0x0661, "SiS 661", 0,
pﬁl_fsb_p4
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3454 { 0x1039, 0x0671, "SiS 671", 0,
pﬁl_fsb_p4
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3455 { 0x1039, 0x0672, "SiS 672", 0,
pﬁl_fsb_p4
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3458 { 0x10b9, 0x1531, "ALòAœddö 4", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3459 { 0x10b9, 0x1541, "ALòAœddö 5", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3460 { 0x10b9, 0x1644, "ALòAœddö M1644", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3463 { 0x1002, 0x5830, "ATòRade⁄ 9100 IGP", 0,
pﬁl_fsb_p4
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3464 { 0x1002, 0x5831, "ATòRade⁄ 9100 IGP", 0,
pﬁl_fsb_p4
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3465 { 0x1002, 0x5832, "ATòRade⁄ 9100 IGP", 0,
pﬁl_fsb_p4
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3466 { 0x1002, 0x5833, "ATòRade⁄ 9100 IGP", 0,
pﬁl_fsb_p4
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3467 { 0x1002, 0x5954, "ATòRade⁄ X¥es†200", 0,
pﬁl_fsb_p4
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3468 { 0x1002, 0x5A41, "ATòRade⁄ X¥es†200", 0,
pﬁl_fsb_p4
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3471 { 0x10de, 0x01A4, "nVidüÇF‹˚", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3472 { 0x10de, 0x01E0, "nVidüÇF‹˚2 SPP", 0,
pﬁl_fsb_nf2
,
pﬁl_timögs_nf2
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3473 { 0x10de, 0x0071, "nF‹˚4 SLI I¡ñ Edôi⁄", 0,
pﬁl_fsb_nf4õ
,
pﬁl_timögs_nf4õ
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3476 { 0x1106, 0x0305, "VIA KT133/KT133A", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3477 { 0x1106, 0x0391, "VIA KX133", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3478 { 0x1106, 0x0501, "VIA MVP4", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3479 { 0x1106, 0x0585, "VIA VP/VPX", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3480 { 0x1106, 0x0595, "VIA VP2", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3481 { 0x1106, 0x0597, "VIA VP3", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3482 { 0x1106, 0x0598, "VIA MVP3", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3483 { 0x1106, 0x0691, "VIA ApﬁlÿPro/133/133A", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3484 { 0x1106, 0x0693, "VIA ApﬁlÿPro+", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3485 { 0x1106, 0x0601, "VIA PLE133", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3486 { 0x1106, 0x3099, "VIA KT266(A)/KT333", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3487 { 0x1106, 0x3189, "VIA KT400(A)/600", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3488 { 0x1106, 0x0269, "VIA KT880", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3489 { 0x1106, 0x3205, "VIA KM400", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3490 { 0x1106, 0x3116, "VIA KM266", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3491 { 0x1106, 0x3156, "VIA KN266", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3492 { 0x1106, 0x3123, "VIA CLE266", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3493 { 0x1106, 0x0198, "VIA PT800", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3494 { 0x1106, 0x3258, "VIA PT880", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3497 { 0x1166, 0x0008, "CNB20HE", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_˙b20
,
pﬁl_nŸhög
 },

3498 { 0x1166, 0x0009, "CNB20LE", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_˙b20
,
pﬁl_nŸhög
 },

3501 { 0x8086, 0x1130, "I¡ñ i815", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3502 { 0x8086, 0x122d, "I¡ñ i430FX", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3503 { 0x8086, 0x1235, "I¡ñ i430MX", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3504 { 0x8086, 0x1237, "I¡ñ i440FX", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3505 { 0x8086, 0x1250, "I¡ñ i430HX", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3506 { 0x8086, 0x1A21, "I¡ñ i840", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_i840
,
pﬁl_i840
 },

3507 { 0x8086, 0x1A30, "I¡ñ i845", 0,
pﬁl_fsb_p4
,
pﬁl_timögs_nŸhög
,
£tup_i845
,
pﬁl_i845
 },

3508 { 0x8086, 0x2560, "I¡ñ i845E/G/PE/GE",0,
pﬁl_fsb_p4
,
pﬁl_timögs_nŸhög
,
£tup_i845
,
pﬁl_i845
 },

3509 { 0x8086, 0x2500, "I¡ñ i820", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_i820
,
pﬁl_i820
 },

3510 { 0x8086, 0x2530, "I¡ñ i850", 0,
pﬁl_fsb_p4
,
pﬁl_timögs_nŸhög
,
£tup_i850
,
pﬁl_i850
 },

3511 { 0x8086, 0x2531, "I¡ñ i860", 1,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_i860
,
pﬁl_i860
 },

3512 { 0x8086, 0x7030, "I¡ñ i430VX", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3513 { 0x8086, 0x7100, "I¡ñ i430TX", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3514 { 0x8086, 0x7120, "I¡ñ i810", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3515 { 0x8086, 0x7122, "I¡ñ i810", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3516 { 0x8086, 0x7124, "I¡ñ i810E", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3517 { 0x8086, 0x7180, "I¡ñ i440[LE]X", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3518 { 0x8086, 0x7190, "I¡ñ i440BX", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3519 { 0x8086, 0x7192, "I¡ñ i440BX", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3520 { 0x8086, 0x71A0, "I¡ñ i440GX", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_i440gx
,
pﬁl_i440gx
 },

3521 { 0x8086, 0x71A2, "I¡ñ i440GX", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_i440gx
,
pﬁl_i440gx
 },

3522 { 0x8086, 0x84C5, "I¡ñ i450GX", 0,
pﬁl_fsb_nŸhög
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3523 { 0x8086, 0x2540, "I¡ñ E7500", 1,
pﬁl_fsb_p4
,
pﬁl_timögs_E750x
,
£tup_iE7xxx
,
pﬁl_iE7xxx
 },

3524 { 0x8086, 0x254C, "I¡ñ E7501", 1,
pﬁl_fsb_p4
,
pﬁl_timögs_E750x
,
£tup_iE7xxx
,
pﬁl_iE7xxx
 },

3525 { 0x8086, 0x255d, "I¡ñ E7205", 0,
pﬁl_fsb_p4
,
pﬁl_timögs_nŸhög
,
£tup_iE7xxx
,
pﬁl_iE7xxx
 },

3526 { 0x8086, 0x3592, "I¡ñ E7320", 0,
pﬁl_fsb_p4
,
pﬁl_timögs_E7520
,
£tup_iE7520
,
pﬁl_iE7520
 },

3527 { 0x8086, 0x2588, "I¡ñ E7221", 1,
pﬁl_fsb_i925
,
pﬁl_timögs_i925
,
£tup_i925
,
pﬁl_iE7221
 },

3528 { 0x8086, 0x3590, "I¡ñ E7520", 0,
pﬁl_fsb_p4
,
pﬁl_timögs_E7520
,
£tup_iE7520
,
pﬁl_nŸhög
 },

3529 { 0x8086, 0x2600, "I¡ñ E8500", 0,
pﬁl_fsb_p4
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3530 { 0x8086, 0x2570, "I¡ñ i848/i865", 0,
pﬁl_fsb_i875
,
pﬁl_timögs_i875
,
£tup_i875
,
pﬁl_nŸhög
 },

3531 { 0x8086, 0x2578, "I¡ñ i875P", 0,
pﬁl_fsb_i875
,
pﬁl_timögs_i875
,
£tup_i875
,
pﬁl_i875
 },

3532 { 0x8086, 0x2550, "I¡ñ E7505", 0,
pﬁl_fsb_p4
,
pﬁl_timögs_nŸhög
,
£tup_iE7xxx
,
pﬁl_iE7xxx
 },

3533 { 0x8086, 0x3580, "I¡ñ ", 0,
pﬁl_fsb_i855
,
pﬁl_timögs_i852
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3534 { 0x8086, 0x3340, "I¡ñ i855PM", 0,
pﬁl_fsb_i855
,
pﬁl_timögs_i855
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3535 { 0x8086, 0x2580, "I¡ñ i915P/G", 0,
pﬁl_fsb_i925
,
pﬁl_timögs_i925
,
£tup_i925
,
pﬁl_nŸhög
 },

3536 { 0x8086, 0x2590, "I¡ñ i915PM/GM", 0,
pﬁl_fsb_i925
,
pﬁl_timögs_i925
,
£tup_i925
,
pﬁl_nŸhög
 },

3537 { 0x8086, 0x2584, "I¡ñ i925X/XE", 0,
pﬁl_fsb_i925
,
pﬁl_timögs_i925
,
£tup_i925
,
pﬁl_iE7221
 },

3538 { 0x8086, 0x2770, "I¡ñ i945P/G", 0,
pﬁl_fsb_i945
,
pﬁl_timögs_i925
,
£tup_i925
,
pﬁl_nŸhög
 },

3539 { 0x8086, 0x27A0, "I¡ñ i945GM/PM", 0,
pﬁl_fsb_i945
,
pﬁl_timögs_i925
,
£tup_i925
,
pﬁl_nŸhög
 },

3540 { 0x8086, 0x27AC, "I¡ñ i945GME", 0,
pﬁl_fsb_i945
,
pﬁl_timögs_i925
,
£tup_i925
,
pﬁl_nŸhög
 },

3541 { 0x8086, 0x2774, "I¡ñ i955X", 0,
pﬁl_fsb_i945
,
pﬁl_timögs_i925
,
£tup_i925
,
pﬁl_nŸhög
},

3542 { 0x8086, 0x277C, "I¡ñ i975X", 0,
pﬁl_fsb_i975
,
pﬁl_timögs_i925
,
£tup_i925
,
pﬁl_nŸhög
},

3543 { 0x8086, 0x2970, "I¡ñ i946PL/GZ", 0,
pﬁl_fsb_i965
,
pﬁl_timögs_i965
,
£tup_p35
,
pﬁl_nŸhög
},

3544 { 0x8086, 0x2990, "I¡ñ Q963/Q965", 0,
pﬁl_fsb_i965
,
pﬁl_timögs_i965
,
£tup_p35
,
pﬁl_nŸhög
},

3545 { 0x8086, 0x29A0, "I¡ñ P965/G965", 0,
pﬁl_fsb_i965
,
pﬁl_timögs_i965
,
£tup_p35
,
pﬁl_nŸhög
},

3546 { 0x8086, 0x2A00, "I¡ñ GM965/GL960", 0,
pﬁl_fsb_im965
,
pﬁl_timögs_im965
,
£tup_p35
,
pﬁl_nŸhög
},

3547 { 0x8086, 0x2A10, "I¡ñ GME965/GLE960",0,
pﬁl_fsb_im965
,
pﬁl_timögs_im965
,
£tup_p35
,
pﬁl_nŸhög
},

3548 { 0x8086, 0x2A40, "I¡ñ PM/GM45/47", 0,
pﬁl_fsb_im965
,
pﬁl_timögs_im965
,
£tup_p35
,
pﬁl_nŸhög
},

3549 { 0x8086, 0x29B0, "I¡ñ Q35", 0,
pﬁl_fsb_i965
,
pﬁl_timögs_p35
,
£tup_p35
,
pﬁl_nŸhög
},

3550 { 0x8086, 0x29C0, "I¡ñ P35/G33", 0,
pﬁl_fsb_i965
,
pﬁl_timögs_p35
,
£tup_p35
,
pﬁl_nŸhög
},

3551 { 0x8086, 0x29D0, "I¡ñ Q33", 0,
pﬁl_fsb_i965
,
pﬁl_timögs_p35
,
£tup_p35
,
pﬁl_nŸhög
},

3552 { 0x8086, 0x29E0, "I¡ñ X38/X48", 0,
pﬁl_fsb_i965
,
pﬁl_timögs_p35
,
£tup_p35
,
pﬁl_nŸhög
},

3553 { 0x8086, 0x29F0, "I¡ñ 3200/3210", 0,
pﬁl_fsb_i965
,
pﬁl_timögs_p35
,
£tup_p35
,
pﬁl_nŸhög
},

3554 { 0x8086, 0x2E10, "I¡ñ Q45/Q43", 0,
pﬁl_fsb_i965
,
pﬁl_timögs_p35
,
£tup_p35
,
pﬁl_nŸhög
},

3555 { 0x8086, 0x2E20, "I¡ñ P45/G45", 0,
pﬁl_fsb_i965
,
pﬁl_timögs_p35
,
£tup_p35
,
pﬁl_nŸhög
},

3556 { 0x8086, 0x2E30, "I¡ñ G41", 0,
pﬁl_fsb_i965
,
pﬁl_timögs_p35
,
£tup_p35
,
pﬁl_nŸhög
},

3557 { 0x8086, 0x4001, "I¡ñ 5400A", 0,
pﬁl_fsb_5400
,
pﬁl_timögs_5400
,
£tup_E5400
,
pﬁl_nŸhög
},

3558 { 0x8086, 0x4003, "I¡ñ 5400B", 0,
pﬁl_fsb_5400
,
pﬁl_timögs_5400
,
£tup_E5400
,
pﬁl_nŸhög
},

3559 { 0x8086, 0x25D8, "I¡ñ 5000P", 0,
pﬁl_fsb_5400
,
pﬁl_timögs_5400
,
£tup_E5400
,
pﬁl_nŸhög
},

3560 { 0x8086, 0x25D4, "I¡ñ 5000V", 0,
pﬁl_fsb_5400
,
pﬁl_timögs_5400
,
£tup_E5400
,
pﬁl_nŸhög
},

3561 { 0x8086, 0x25C0, "I¡ñ 5000X", 0,
pﬁl_fsb_5400
,
pﬁl_timögs_5400
,
£tup_E5400
,
pﬁl_nŸhög
},

3562 { 0x8086, 0x25D0, "I¡ñ 5000Z", 0,
pﬁl_fsb_5400
,
pﬁl_timögs_5400
,
£tup_E5400
,
pﬁl_nŸhög
},

3563 { 0x8086, 0x5020, "I¡ñ EP80579", 0,
pﬁl_fsb_p4
,
pﬁl_timögs_EP80579
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3564 { 0x8086, 0x8100, "I¡ñ US15W", 0,
pﬁl_fsb_us15w
,
pﬁl_timögs_us15w
,
£tup_nŸhög
,
pﬁl_nŸhög
},

3565 { 0x8086, 0x8101, "I¡ñ UL11L/US15L", 0,
pﬁl_fsb_us15w
,
pﬁl_timögs_us15w
,
£tup_nŸhög
,
pﬁl_nŸhög
},

3568 { 0xFFFF, 0x0001, "C‹êIMC", 0,
pﬁl_fsb_nhm
,
pﬁl_timögs_nhm
,
£tup_nhm
,
pﬁl_nŸhög
},

3569 { 0xFFFF, 0x0002, "C‹êIMC 32nm", 0,
pﬁl_fsb_nhm32
,
pﬁl_timögs_nhm
,
£tup_nhm32
,
pﬁl_nŸhög
},

3570 { 0xFFFF, 0x0003, "C‹êIMC 32nm", 0,
pﬁl_fsb_wmr
,
pﬁl_timögs_wmr
,
£tup_wmr
,
pﬁl_nŸhög
},

3571 { 0xFFFF, 0x0004, "SNB IMC 32nm", 0,
pﬁl_fsb_¢b
,
pﬁl_timögs_¢b
,
£tup_wmr
,
pﬁl_nŸhög
},

3572 { 0xFFFF, 0x0100, "AMD K8 IMC", 0,
pﬁl_fsb_amd64
,
pﬁl_timögs_amd64
,
£tup_amd64
,
pﬁl_amd64
 },

3573 { 0xFFFF, 0x0101, "AMD K10 IMC", 0,
pﬁl_fsb_k10
,
pﬁl_timögs_k10
,
£tup_k10
,
pﬁl_nŸhög
 },

3574 { 0xFFFF, 0x0102, "AMD APU IMC", 0,
pﬁl_fsb_k14
,
pﬁl_timögs_k14
,
£tup_nŸhög
,
pﬁl_nŸhög
 },

3577 { 0xFFFF, 0xFFFF, "", 0,
pﬁl_fsb_Áûß„
,
pﬁl_timögs_nŸhög
,
£tup_nŸhög
,
pﬁl_nŸhög
 }

3580 
	$¥öt_mem‹y_c⁄åﬁÀr
()

3584 
d
;

3586 *
«me
;

3587 i‡(
˘æ
.
ödex
 == 0) {

3592
«me
 =
c⁄åﬁÀrs
[
˘æ
.
ödex
].name;

3593
cﬁ
 = 10;

3594
	`˝röt
(
LINE_CPU
+5,
cﬁ
,
«me
);

3596 
«me
[
cﬁ
 - 10] != '\0') {

3597
cﬁ
++;

3600
	`˝röt
(
LINE_CPU
+5,
cﬁ
, " "); col++;

3601 i‡(
˘æ
.
ˇp
 =
ECC_UNKNOWN
) {

3604 i‡(
˘æ
.
ˇp
 &
__ECC_DETECT
) {

3605 
⁄
;

3606
⁄
 =
˘æ
.
mode
 &
__ECC_DETECT
;

3607
	`˝röt
(
LINE_CPU
+5,
cﬁ
, "(ECC : ");

3608
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +7,
⁄
?"Detect":"Disabled)");

3609
⁄
?(
cﬁ
 += 13):(col += 16);

3611 i‡(
˘æ
.
mode
 &
__ECC_CORRECT
) {

3612 
⁄
;

3613
⁄
 =
˘æ
.
mode
 &
__ECC_CORRECT
;

3614
	`˝röt
(
LINE_CPU
+5,
cﬁ
, " / ");

3615 i‡(
˘æ
.
ˇp
 &
__ECC_CHIPKILL
) {

3616
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +3,
⁄
?"Correct -":"");

3617
⁄
?(
cﬁ
 += 12):(col +=3);

3619
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +3,
⁄
?"Correct)":"");

3620
⁄
?(
cﬁ
 += 11):(col +=3);

3623 i‡(
˘æ
.
mode
 &
__ECC_DETECT
) {

3624 i‡(
˘æ
.
ˇp
 &
__ECC_CHIPKILL
) {

3625 
⁄
;

3626
⁄
 =
˘æ
.
mode
 &
__ECC_CHIPKILL
;

3627
	`˝röt
(
LINE_CPU
+5,
cﬁ
, " Chipkill : ");

3628
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +12,
⁄
?"On)":"Off)");

3629
⁄
?(
cﬁ
 += 15):(col +=16);

3631 i‡(
˘æ
.
mode
 &
__ECC_SCRUB
) {

3632 
⁄
;

3633
⁄
 =
˘æ
.
mode
 &
__ECC_SCRUB
;

3634
	`˝röt
(
LINE_CPU
+5,
cﬁ
, " Scrub");

3635
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +6,
⁄
?"+ ":"- ");

3636
cﬁ
 += 7;

3638 i‡(
˘æ
.
ˇp
 &
__ECC_UNEXPECTED
) {

3639 
⁄
;

3640
⁄
 =
˘æ
.
mode
 &
__ECC_UNEXPECTED
;

3641
	`˝röt
(
LINE_CPU
+5,
cﬁ
, "Unknown");

3642
	`˝röt
(
LINE_CPU
+5,
cﬁ
 +7,
⁄
?"+ ":"- ");

3643
cﬁ
 += 9;

3647
cﬁ2
 = 0;

3648
d
 =
	`gë_key
();

3650 i‡(
d
 != 0x3B) {

3651
c⁄åﬁÀrs
[
˘æ
.
ödex
].
	`pﬁl_fsb
();

3652
c⁄åﬁÀrs
[
˘æ
.
ödex
].
	`pﬁl_timögs
();

3654
	}
}

3657 
	$föd_c⁄åﬁÀr
()

3659 
víd‹
;

3660 
devi˚
;

3661 
˝u_idít

˝u_id
;

3662 
i
;

3663 
ªsu…
;

3664
ªsu…
 =
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
,
PCI_VENDOR_ID
, 2, &
víd‹
);

3665
ªsu…
 =
	`pci_c⁄f_ªad
(
˘æ
.
bus
, cål.
dev
, cål.
‚
,
PCI_DEVICE_ID
, 2, &
devi˚
);

3668 if(
imc_ty≥
Ë{
víd‹
 = 0xFFFF;
devi˚
 = imc_type; }

3669 if(
Áû_ß„
Ë{
víd‹
 = 0xFFFF;
devi˚
 = 0xFFFF; }

3671
˘æ
.
ödex
 = 0;

3672 i‡(
ªsu…
 == 0) {

3673 
i
 = 1; i < (
c⁄åﬁÀrs
)/(controllers[0]); i++) {

3674 i‡((
c⁄åﬁÀrs
[
i
].
víd‹
 =víd‹Ë&& (c⁄åﬁÀrs[i].
devi˚
 == device)) {

3675
˘æ
.
ödex
 =
i
;

3681
c⁄åﬁÀrs
[
˘æ
.
ödex
].
	`£tup_ecc
();

3685
	`£t_ecc_pﬁlög
(-1);

3686
	`¥öt_mem‹y_c⁄åﬁÀr
();

3688
	}
}

3690 
	$pﬁl_îr‹s
()

3692 i‡(
˘æ
.
pﬁl
) {

3693
c⁄åﬁÀrs
[
˘æ
.
ödex
].
	`pﬁl_îr‹s
();

3695
	}
}

3697 
	$£t_ecc_pﬁlög
(
vÆ
)

3699 
ã°ed
 =
c⁄åﬁÀrs
[
˘æ
.
ödex
].tested;

3700 i‡(
vÆ
 == -1) {

3701
vÆ
 =
ã°ed
;

3703 i‡(
vÆ
 && (
˘æ
.
mode
 &
__ECC_DETECT
)) {

3704
˘æ
.
pﬁl
 = 1;

3705
	`˝röt
(
LINE_INFO
,
COL_ECC
,
ã°ed
? " on": " ON");

3707
˘æ
.
pﬁl
 = 0;

3708
	`˝röt
(
LINE_INFO
,
COL_ECC
, "off");

3710
	}
}

	@controller.h

1 #i‚de‡
MEMTEST_CONTROLLER_H


2 
	#MEMTEST_CONTROLLER_H


	)

4 
föd_c⁄åﬁÀr
();

5 
pﬁl_îr‹s
();

6 
£t_ecc_pﬁlög
(
vÆ
);

	@cpuid.c

7 
	~"˝uid.h
"

9
˝uid_t

	g˝uid_d©a0
;

10
˝uid_t

	g˝uid_d©a80
;

12 
	gnum_logiˇl_˝us
 = 1;

13 
	gnum_c‹es_≥r_∑ckage
 = 1;

14 
	gnum_hy≥r_thªads_≥r_c‹e
 = 1;

17
	$˝uid_gë
(
n
,
˝uid_t
 *
d©a
)

19
d©a
->
óx
 =
n
;

20
	`GET_CPUID
(
d©a
->
óx
, d©a->
ebx
, d©a->
ecx
, d©a->
edx
);

21
	}
}

29
˝uid_víd‹_°rög_t


30
	$˝uid_gë_víd‹_°rög
()

32 
˝uid_víd‹_°rög_t

v
;

35
v
.
uöt32_¨øy
[0] =
˝uid_d©a0
.
ebx
;

36
v
.
uöt32_¨øy
[1] =
˝uid_d©a0
.
edx
;

37
v
.
uöt32_¨øy
[2] =
˝uid_d©a0
.
ecx
;

38
v
.
ch¨_¨øy
[
CPUID_VENDOR_STR_LENGTH
-1] = '\0';

39 
v
;

40
	}
}

48
˝uid_vîsi⁄_t


49
	$˝uid_gë_vîsi⁄
()

51
˝uid_vîsi⁄_t

v
;

52
uöt32_t

junkEBX
 = 0,
junkECX
 = 0,
junkEDX
 = 0;

53
v
.
Ê©
 = 0x1;

54
	`GET_CPUID
(
v
.
Ê©
,
junkEBX
,
junkECX
,
junkEDX
);

55 
v
;

56
	}
}

59
˝uid_„©uª_Êags_t


60
	$˝uid_gë_„©uª_Êags
()

62
˝uid_„©uª_Êags_t

f
;

63
uöt32_t

junkEAX
 = 0x1,
junkEBX
 = 0;

64
	`GET_CPUID
(
junkEAX
,
junkEBX
,
f
.
uöt32_¨øy
[1], f.uint32_array[0]);

65 
f
;

66
	}
}

88
boﬁ


89
	$˝uid_gë_ext_„©uª_Êags
(
˝uid_ext_„©uª_Êags_t
 *
f
)

91
uöt32_t

óx
,
ebx
,
ecx
;

93 i‡(
˝uid_d©a80
.
óx
 < 0x80000001) {

95 
FALSE
;

97
óx
 =
CPUID_EXTENDED_FEATURE
;

98
	`GET_CPUID
(
óx
,
ebx
,
ecx
,
f
->
Ê©
);

99 
TRUE
;

100
	}
}

102 
	#CHAR_TO_INT
(
a
,
b
,
c
,
d
Ë(◊Ë+ (bË* 0x100 + (cË* 0x10000 + (dË* 0x1000000)

	)

104
boﬁ


105
	$˝uid_is_víd‹_amd
()

107 
˝uid_d©a0
.
ebx
 =
	`CHAR_TO_INT
('A', 'u', 't', 'h')

108 &&
˝uid_d©a0
.
edx
 =
	`CHAR_TO_INT
('e', 'n', 't', 'i')

109 &&
˝uid_d©a0
.
ecx
 =
	`CHAR_TO_INT
('c', 'A', 'M', 'D');

110
	}
}

113
boﬁ


114
	$˝uid_is_víd‹_öãl
()

116 
˝uid_d©a0
.
ebx
 =
	`CHAR_TO_INT
('G', 'e', 'n', 'u')

117 &&
˝uid_d©a0
.
edx
 =
	`CHAR_TO_INT
('i', 'n', 'e', 'I')

118 &&
˝uid_d©a0
.
ecx
 =
	`CHAR_TO_INT
('n', 't', 'e', 'l');

119
	}
}

136
boﬁ


137
	$˝uid_is_Ámûy_p4
()

139
˝uid_vîsi⁄_t

v
 =
	`˝uid_gë_vîsi⁄
();

141 
	`˝uid_is_víd‹_öãl
(Ë&&
v
.
bôs
.
Ámûy
 =
CPUID_FAMILY_EXTENDED
 &&

142
v
.
bôs
.
exãndedFamûy
 =
CPUID_EXTENDED_FAMILY_PENTIUM4
;

143
	}
}

159
boﬁ


160
	$˝uid_is_Ámûy_p6
()

162
˝uid_vîsi⁄_t

v
 =
	`˝uid_gë_vîsi⁄
();

164 
	`˝uid_is_víd‹_öãl
(Ë&&
v
.
bôs
.
Ámûy
 =
CPUID_FAMILY_P6
;

165
	}
}

179
boﬁ


180
	$˝uid_is_Ámûy_›ãr⁄
()

182
˝uid_vîsi⁄_t

v
 =
	`˝uid_gë_vîsi⁄
();

183 
	`˝uid_is_víd‹_amd
(Ë&&
	`CPUID_FAMILY_IS_OPTERON
(
v
.
Ê©
);

184
	}
}

197
	$˝uid_öô
()

200
˝uid_t

id1
;

207
˝uid_d©a0
.
óx
 = 0;

208
	`GET_CPUID
(
˝uid_d©a0
.
óx
, cpuid_d©a0.
ebx
,

209
˝uid_d©a0
.
ecx
, cpuid_d©a0.
edx
);

215
	`˝uid_gë
(1, &
id1
);

217 i‡(
	`˝uid_is_víd‹_öãl
()) {

218 i‡(
	`˝uid_is_Ámûy_p6
()) {

222 i‡(
	`˝uid_is_Ámûy_p4
()) {

230 i‡(
id1
.
edx
 &
CPUID_FEATURE_COMMON_ID1EDX_HT
) {

231
num_hy≥r_thªads_≥r_c‹e
 = (
id1
.
ebx
 >> 16) & 0xff;

232 i‡(
	`˝uid_max_func
() >= 4) {

233
˝uid_t

id4
;

234
	`˝uid_gë
(4, &
id4
);

235
num_c‹es_≥r_∑ckage
 = ((
id4
.
óx
 >> 26) & 0x3f) + 1;

236
num_hy≥r_thªads_≥r_c‹e
 /
num_c‹es_≥r_∑ckage
;

240 } i‡(
	`˝uid_is_víd‹_amd
()) {

241
˝uid_d©a80
.
óx
 = 0x80000000;

242
	`GET_CPUID
(
˝uid_d©a80
.
óx
, cpuid_d©a80.
ebx
,

243
˝uid_d©a80
.
ecx
, cpuid_d©a80.
edx
);

244 i‡(
	`˝uid_max_ext_func
() >= 0x80000008) {

250
˝uid_t

id88
;

251
	`˝uid_gë
(0x80000008, &
id88
);

252
num_c‹es_≥r_∑ckage
 =
id88
.
ecx
 & 0xff;

253
num_hy≥r_thªads_≥r_c‹e
 = 1;

258
	}
}

	@cpuid.h

9 #i‚de‡
_CPUID_H_


10 
	#_CPUID_H_


	)

11 
	~"°döt.h
"

12 
	~"defs.h
"

13 
	~"smp.h
"

15 
	#CPUID_EXTENDED_BASE
 0x80000000

	)

16 
	#CPUID_EXTENDED_FEATURE
 0x80000001

	)

17 
	#CPUID_EXTENDED_BRAND1
 0x80000002

	)

18 
	#CPUID_EXTENDED_BRAND2
 0x80000003

	)

19 
	#CPUID_EXTENDED_BRAND3
 0x80000004

	)

21 
	#CPUID_VENDOR_LENGTH
 3

	)

22 
	#CPUID_VENDOR_STR_LENGTH
 (
CPUID_VENDOR_LENGTH
 * (
uöt32_t
Ë+ 1)

	)

23 
	#CPUID_BRAND_LENGTH
 12

	)

24 
	#CPUID_BRAND_STR_LENGTH
 (
CPUID_BRAND_LENGTH
 * (
uöt32_t
Ë+ 1)

	)

26 
	#CPUID_FAMILY
(
_óx
Ë(((_óxË>> 8Ë& 0xf)

	)

28 
	#CPUID_FAMILY_486
 4

	)

29 
	#CPUID_FAMILY_P5
 5

	)

30 
	#CPUID_FAMILY_P6
 6

	)

31 
	#CPUID_FAMILY_EXTENDED
 15

	)

33 
	#CPUID_EXTENDED_FAMILY
(
_óx
Ë(((_óxË>> 20Ë& 0xff)

	)

34 
	#CPUID_EXTENDED_FAMILY_PENTIUM4
 0

	)

35 
	#CPUID_EXTENDED_FAMILY_OPTERON
 0

	)

38 
	#CPUID_FAMILY_IS_OPTERON
(
_óx
) \

39 (
	`CPUID_FAMILY
(
_óx
Ë=
CPUID_FAMILY_EXTENDED
 && \

40
	`CPUID_EXTENDED_FAMILY
(
_óx
Ë=
CPUID_EXTENDED_FAMILY_OPTERON
)

	)

41 
	#CPUID_FEATURE_COMMON_ID1EDX_HT
 0x10000000

	)

45
uöt32_t

	móx
;

46
uöt32_t

	mebx
;

47
uöt32_t

	mecx
;

48
uöt32_t

	medx
;

49 }
	t˝uid_t
;

52 
˝uid_t

˝uid_d©a0
;

53 
˝uid_t

˝uid_d©a80
;

56 
ölöe
 

57
	$˝uid_max_func
()

59 
˝uid_d©a0
.
óx
;

60
	}
}

63 
ölöe
 

64
	$˝uid_max_ext_func
()

66 
˝uid_d©a80
.
óx
;

67
	}
}

73 
	mch¨_¨øy
[
CPUID_VENDOR_STR_LENGTH
];

74
uöt32_t

	muöt32_¨øy
[
CPUID_VENDOR_LENGTH
];

75 }
	t˝uid_víd‹_°rög_t
;

80 
	mch¨_¨øy
[
CPUID_BRAND_STR_LENGTH
];

81
uöt32_t

	muöt32_¨øy
[
CPUID_BRAND_LENGTH
];

82 }
	t˝uid_bønd_°rög_t
;

86
uöt32_t

	mÊ©
;

88
uöt32_t

	m°ïpög
:4;

89
uöt32_t

	mmodñ
:4;

90
uöt32_t

	mÁmûy
:4;

91
uöt32_t

	m¥o˚ss‹Ty≥
:2;

92
uöt32_t

	mª£rved1514
:2;

93
uöt32_t

	mexãndedModñ
:4;

94
uöt32_t

	mexãndedFamûy
:8;

95
uöt32_t

	mª£rved3128
:4;

96 }
	mbôs
;

97 }
	t˝uid_vîsi⁄_t
;

101
uöt32_t

	mÊ©
;

103
uöt32_t

	mbøndIndex
:8;

104
uöt32_t

	mcÊushLöeSize
:8;

105
uöt32_t

	mlogiˇlPro˚ss‹Cou¡
:8;

106
uöt32_t

	m≠icID
:8;

107 }
	mbôs
;

108 }
	t˝uid_¥oc_öfo_t
;

112
uöt64_t

	mÊ©
;

113
uöt32_t

	muöt32_¨øy
[2];

115
uöt32_t

	mÂu
:1;

116
uöt32_t

	mvme
:1;

117
uöt32_t

	mde
:1;

118
uöt32_t

	mp£
:1;

119
uöt32_t

	mtsc
:1;

120
uöt32_t

	mm§
:1;

121
uöt32_t

	m∑e
:1;

122
uöt32_t

	mm˚
:1;

123
uöt32_t

	mcx8
:1;

124
uöt32_t

	m≠ic
:1;

125
uöt32_t

	mª£rved10
:1;

126
uöt32_t

	m£p
:1;

127
uöt32_t

	mmår
:1;

128
uöt32_t

	mpge
:1;

129
uöt32_t

	mmˇ
:1;

130
uöt32_t

	mcmov
:1;

131
uöt32_t

	m∑t
:1;

132
uöt32_t

	mp£36
:1;

133
uöt32_t

	mp¢
:1;

134
uöt32_t

	mcÊush
:1;

135
uöt32_t

	mª£rved20
:1;

136
uöt32_t

	mds
:1;

137
uöt32_t

	ma˝i
:1;

138
uöt32_t

	mmmx
:1;

139
uöt32_t

	mfx§
:1;

140
uöt32_t

	ms£
:1;

141
uöt32_t

	ms£2
:1;

142
uöt32_t

	mss
:1;

143
uöt32_t

	mhâ
:1;

144
uöt32_t

	mtm
:1;

145
uöt32_t

	mª£rved30
:1;

146
uöt32_t

	mpbe
:1;

147
uöt32_t

	ms£3
:1;

148
uöt32_t

	mª£rved3433
:2;

149
uöt32_t

	mm⁄ô‹
:1;

150
uöt32_t

	mds˝l
:1;

151
uöt32_t

	mª£rved3937
:3;

152
uöt32_t

	mtm2
:1;

153
uöt32_t

	mª£rved41
:1;

154
uöt32_t

	m˙xtid
:1;

155
uöt32_t

	mª£rved4443
:2;

156
uöt32_t

	mcmpxchg16b
:1;

157
uöt32_t

	mª£rved6346
:18;

158 }
	mbôs
;

159 }
	t˝uid_„©uª_Êags_t
;

163
uöt64_t

	mÊ©
;

164
uöt32_t

	muöt32_¨øy
[2];

166
uöt32_t

	mÂu
:1;

167
uöt32_t

	mvme
:1;

168
uöt32_t

	mde
:1;

169
uöt32_t

	mp£
:1;

170
uöt32_t

	mtsc
:1;

171
uöt32_t

	mm§
:1;

172
uöt32_t

	m∑e
:1;

173
uöt32_t

	mm˚
:1;

174
uöt32_t

	mcx8
:1;

175
uöt32_t

	m≠ic
:1;

176
uöt32_t

	mª£rved10
:1;

177
uöt32_t

	m£p
:1;

178
uöt32_t

	mmår
:1;

179
uöt32_t

	mpge
:1;

180
uöt32_t

	mmˇ
:1;

181
uöt32_t

	mcmov
:1;

182
uöt32_t

	m∑t
:1;

183
uöt32_t

	mp£36
:1;

184
uöt32_t

	mª£rved1918
:2;

185
uöt32_t

	mnx
:1;

186
uöt32_t

	mª£rved21
:1;

187
uöt32_t

	mmmxamd
:1;

188
uöt32_t

	mmmx
:1;

189
uöt32_t

	mfx§
:1;

190
uöt32_t

	mffx§
:1;

191
uöt32_t

	mª£rved26
:1;

192
uöt32_t

	mrdts˝
:1;

193
uöt32_t

	mª£rved28
:1;

194
uöt32_t

	mlm
:1;

195
uöt32_t

	mthªedìnowext
:1;

196
uöt32_t

	mthªedìnow
:1;

197
uöt32_t

	mœhf
:1;

198
uöt32_t

	mcm∂egacy
:1;

199
uöt32_t

	mª£rved3534
:2;

200
uöt32_t

	m¸8avaû
:1;

201
uöt32_t

	mª£rved6337
:27;

202 }
	mbôs
;

203 }
	t˝uid_ext_„©uª_Êags_t
;

205 
˝uid_gë
(
n
,
˝uid_t
 *
d©a
);

206
˝uid_víd‹_°rög_t

˝uid_gë_víd‹_°rög
();

207
˝uid_vîsi⁄_t

˝uid_gë_vîsi⁄
();

208
˝uid_„©uª_Êags_t

˝uid_gë_„©uª_Êags
();

209
boﬁ

˝uid_gë_ext_„©uª_Êags
(
˝uid_ext_„©uª_Êags_t
 *
f
);

210
boﬁ

˝uid_is_víd‹_amd
();

211
boﬁ

˝uid_is_víd‹_öãl
();

212
boﬁ

˝uid_is_Ámûy_p6
();

213
boﬁ

˝uid_is_Ámûy_p4
();

214
boﬁ

˝uid_is_Ámûy_›ãr⁄
();

215 
˝uid_öô
();

	@defs.h

7 
	#SETUPSECS
 4

	)

15 
	#LOW_TEST_ADR
 0x00002000

	)

17 
	#BOOTSEG
 0x07c0

	)

18 
	#INITSEG
 0x9000

	)

19 
	#SETUPSEG
 (
INITSEG
+0x20Ë

	)

20 
	#TSTLOAD
 0x1000

	)

22 
	#KERNEL_CS
 0x10

	)

23 
	#KERNEL_DS
 0x18

	)

24 
	#REAL_CS
 0x20

	)

25 
	#REAL_DS
 0x28

	)

	@dmi.c

12 
	~"ã°.h
"

13 
	~<°döt.h
>

16 
	#round_up
(
x
,
y
Ë(((xË+ (yË- 1Ë& ~((y)-1))

	)

17 
	#round_down
(
x
,
y
Ë((xË& ~((y)-1))

	)

20 
	sdmi_ïs
 {

21
uöt8_t

	m™ch‹
[4];

22
öt8_t

	mchecksum
;

23
uöt8_t

	mÀngth
;

24
uöt8_t

	mmaj‹vîsi⁄
;

25
uöt8_t

	mmö‹vîsi⁄
;

26
uöt16_t

	mmax°ru˘size
;

27
uöt8_t

	mªvisi⁄
;

28
uöt8_t

	m∑d
[5];

29
uöt8_t

	möènch‹
[5];

30
öt8_t

	mötchecksum
;

31
uöt16_t

	mèbÀÀngth
;

32
uöt32_t

	mèbÀaddªss
;

33
uöt16_t

	mnum°ru˘s
;

34
uöt8_t

	mSMBIOSªv
;

35 }
__©åibuã__
((
∑cked
));

37 
	st°ru˘_hódî
{

38
uöt8_t

	mty≥
;

39
uöt8_t

	mÀngth
;

40
uöt16_t

	mh™dÀ
;

41 }
__©åibuã__
((
∑cked
));

43 
	smem_dev
 {

44 
t°ru˘_hódî

	mhódî
;

45
uöt16_t

	mpma_h™dÀ
;

46
uöt16_t

	mîr_h™dÀ
;

47
uöt16_t

	mtŸ_width
;

48
uöt16_t

	md©_width
;

49
uöt16_t

	msize
;

50
uöt8_t

	mf‹m
;

51
uöt8_t

	m£t
;

52
uöt8_t

	mdev_loˇt‹
;

53
uöt8_t

	mb™k_loˇt‹
;

54
uöt8_t

	mty≥
;

55
uöt16_t

	mty≥dëaû
;

56
uöt16_t

	m•ìd
;

57
uöt8_t

	mm™uÁ˘uªr
;

58
uöt8_t

	m£rü um
;

59
uöt8_t

	mas£t
;

60
uöt8_t

	m∑πnum
;

61 }
__©åibuã__
((
∑cked
));

63 
	smd_m≠
{

64 
t°ru˘_hódî

	mhódî
;

65
uöt32_t

	m°¨t
;

66
uöt32_t

	míd
;

67
uöt16_t

	mmd_h™dÀ
;

68
uöt16_t

	mmama_h™dÀ
;

69
uöt8_t

	mrow_pos
;

70
uöt8_t

	möãæ_pos
;

71
uöt8_t

	möãæ_dïth
;

72 }
__©åibuã__
((
∑cked
));

74 
	spma
{

75 
t°ru˘_hódî

	mhódî
;

76
uöt8_t

	mloˇti⁄
;

77
uöt8_t

	mu£
;

78
uöt8_t

	mecc
;

79
uöt32_t

	mˇ∑côy
;

80
uöt16_t

	mîrh™dÀ
;

81
uöt16_t

	mnumdevs
;

82 }
__©åibuã__
((
∑cked
));

84 *
	gf‹m_Á˘‹s
[] = {

92 *
	gmem‹y_ty≥s
[] = {

101 
mem_dev
 *
	gmem_devs
[
MAX_DMI_MEMDEVS
];

102 
	gmem_devs_cou¡
=0;

103 
md_m≠
 *
	gmd_m≠s
[
MAX_DMI_MEMDEVS
];

104 
	gmd_m≠s_cou¡
=0;

105 
	gdmi_îr_˙ts
[
MAX_DMI_MEMDEVS
];

106 
	gdmi_öôülized
=0;

108 
	$°æí
(*
°rög
){

109 
i
=0;

110 *
°rög
++){
i
++;};

111 
i
;

112
	}
}

115 *
	$gë_t°ru˘_°rög
(
t°ru˘_hódî
 *
hódî
, 
n
){

116 if(
n
<1)

118 *
a
 = (*)
hódî
 + hódî->
Àngth
;

119
n
--;

121 i‡(!*
a
)

122
n
--;

123 i‡(!
n
 && *
a
)

124 
a
;

125
a
++;

126 }!(*
a
==0 && *(a-1)==0));

128
	}
}

131 
	$›í_dmi
(){

132 *
dmi
, *
dmi_£¨ch_°¨t
, *
dmi_°¨t
;

133 
found
=0;

134 
dmi_ïs
 *
ïs
;

135 *
èbÀ_°¨t
;

136 
t°ru˘_cou¡
=0;

137
dmi_£¨ch_°¨t
 = (*)
DMI_SEARCH_START
;

140 
dmi
 =
dmi_£¨ch_°¨t
; dmi < dmi_search_start + 0xf0000; dmi +=16){

141 if–*
dmi
 == '_' &&

142 *(
dmi
+1) == 'S' &&

143 *(
dmi
+2) == 'M' &&

144 *(
dmi
+3) == '_'){

145
found
 =1;

149 i‡(!
found
) {

152
dmi_°¨t
=
dmi
;

153
ïs
=(
dmi_ïs
 *)
dmi
;

156
öt8_t

checksum
=0;

157 ;
dmi
 <
dmi_°¨t
 +
ïs
->
Àngth
; dmi++)

158
checksum
 +*
dmi
;

159 i‡(
checksum
){

164 i‡–
ïs
->
maj‹vîsi⁄
 < 2 &&

165
ïs
->
mö‹vîsi⁄
 < 1){

170
èbÀ_°¨t
=(*)
ïs
->
èbÀaddªss
;

171
dmi
=
èbÀ_°¨t
;

173 
dmi
 <
èbÀ_°¨t
 +
ïs
->
èbÀÀngth
){

174 
t°ru˘_hódî
 *
hódî
 = (t°ru˘_hódî *)
dmi
;

175 i‡(
hódî
->
ty≥
 == 17)

176
mem_devs
[
mem_devs_cou¡
++]=(
mem_dev
 *)
dmi
;

179 i‡(
hódî
->
ty≥
 == 20 || header->type == 1)

180
md_m≠s
[
md_m≠s_cou¡
++]=(
md_m≠
 *)
dmi
;

181
dmi
+=
hódî
->
Àngth
;

182  ! (*
dmi
 == 0 && *(dmi+1) == 0 ) )

183
dmi
++;

184
dmi
+=2;

186 i‡(++
t°ru˘_cou¡
 >
ïs
->
num°ru˘s
)

190
	}
}

192 
	$öô_dmi
(){

193 
i
;

194 
i
=0; i <
MAX_DMI_MEMDEVS
; i++)

195
dmi_îr_˙ts
[
i
]=0;

196
	`›í_dmi
();

197
dmi_öôülized
=1;

198
	}
}

200 
	$¥öt_dmi_öfo
(){

201 
i
,
j
,
∑ge
;

202 *
°rög
=0;

204 if(!
dmi_öôülized
)

205
	`öô_dmi
();

207 i‡(
mem_devs_cou¡
 == 0){

208
	`˝röt
(
POP2_Y
+1,
POP2_X
+2, "No valid DMI Memory Devices info found");

209 
	`gë_key
() == 0);

213 
∑ge
=1;Öagê<1 + (
mem_devs_cou¡
-1)/8;Öage++){

214
	`p›2˛ór
();

215
	`˝röt
(
POP2_Y
+1,
POP2_X
+2, "DMI Memory Device Info (page ");

216
	`ôﬂ
(
°rög
,
∑ge
);

217
	`˝röt
(
POP2_Y
+1,
POP2_X
+32,
°rög
);

218
	`˝röt
(
POP2_Y
+1,
POP2_X
+33, "/");

219
	`ôﬂ
(
°rög
,1 + (
mem_devs_cou¡
-1)/8);

220
	`˝röt
(
POP2_Y
+1,
POP2_X
+34,
°rög
);

221
	`˝röt
(
POP2_Y
+1,
POP2_X
+35, ")");

223
	`˝röt
(
POP2_Y
+3,
POP2_X
+4, "Location Size(MB) Speed(MHz) Type Form");

224
	`˝röt
(
POP2_Y
+4,
POP2_X
+4, "--------------------------------------------------------------");

226 
i
=8*(
∑ge
-1); i<
mem_devs_cou¡
 && i<8*page; i++){

227 
size_ö_mb
;

228 
yof
;

230
yof
=
POP2_Y
+5+2*(
i
-8*(
∑ge
-1));

231
	`˝röt
(
yof
,
POP2_X
+4,
	`gë_t°ru˘_°rög
(&(
mem_devs
[
i
]->
hódî
), mem_devs[i]->
dev_loˇt‹
));

233 i‡(
mem_devs
[
i
]->
size
 == 0){

234
	`˝röt
(
yof
,
POP2_X
+4+18, "Empty");

235 }i‡(
mem_devs
[
i
]->
size
 == 0xFFFF){

236
	`˝röt
(
yof
,
POP2_X
+4+18, "Unknown");

238
size_ö_mb
 = 0xEFFF &
mem_devs
[
i
]->
size
;

239 i‡(
mem_devs
[
i
]->
size
 & 0x8000)

240
size_ö_mb
 = size_in_mb<<10;

241
	`ôﬂ
(
°rög
,
size_ö_mb
);

242
	`˝röt
(
yof
,
POP2_X
+4+18,
°rög
);

246 i‡–
mem_devs
[
i
]->
•ìd
 &&

247
mem_devs
[
i
]->
hódî
.
Àngth
 > 21){

248
	`ôﬂ
(
°rög
,
mem_devs
[
i
]->
•ìd
);

249
	`˝röt
(
yof
,
POP2_X
+4+27,
°rög
);

251
	`˝röt
(
yof
,
POP2_X
+4+27, "Unknown");

253
	`˝röt
(
yof
,
POP2_X
+4+37,
mem‹y_ty≥s
[
mem_devs
[
i
]->
ty≥
]);

254
	`˝röt
(
yof
,
POP2_X
+4+44,
f‹m_Á˘‹s
[
mem_devs
[
i
]->
f‹m
]);

257 
m≠≥d
=0,
of
=0;

258
	`˝röt
(
yof
+1,
POP2_X
+6,"mappedÅo: ");

259 
j
=0; j<
md_m≠s_cou¡
; j++){

260 i‡(
mem_devs
[
i
]->
hódî
.
h™dÀ
 !
md_m≠s
[
j
]->
md_h™dÀ
)

262 i‡(
m≠≥d
++){

263
	`˝röt
(
yof
+1,
POP2_X
+17+
of
, ",");

264
of
++;

266
	`h¥öt3
(
yof
+1,
POP2_X
+17+
of
,
md_m≠s
[
j
]->
°¨t
<<10, 12);

267
of
 += 12;

268
	`˝röt
(
yof
+1,
POP2_X
+17+
of
, "-");

269
of
++;

270
	`h¥öt3
(
yof
+1,
POP2_X
+17+
of
,
md_m≠s
[
j
]->
íd
<<10, 12);

271
of
 += 12;

273 i‡(!
m≠≥d
)

274
	`˝röt
(
yof
+1,
POP2_X
+17, "No mapping (Interleaved Device)");

278
	`waô_keyup
();

279 
	`gë_key
() == 0);

281
	}
}

284 
	$add_dmi_îr
(
ul⁄g

adr
){

285 
i
,
j
,
found
=-1;

287 if(!
dmi_öôülized
)

288
	`öô_dmi
();

290 
i
=0; i <
md_m≠s_cou¡
; i++){

291 i‡–
adr
 < (
md_m≠s
[
i
]->
°¨t
<<10) ||

292
adr
 > (
md_m≠s
[
i
]->
íd
<<10) )

296 
j
=0; j <
mem_devs_cou¡
; j++){

297 i‡(
mem_devs
[
j
]->
hódî
.
h™dÀ
 !
md_m≠s
[
i
]->
md_h™dÀ
)

299 i‡(
dmi_îr_˙ts
[
j
]){

300
found
=0;

302
found
 =
dmi_îr_˙ts
[
j
] = 1;

307 
found
;

308
	}
}

310 
	$¥öt_dmi_îr
(){

311 
i
,
cou¡
,
of
;

312 *
°rög
;

314
	`s¸ﬁl
();

316
	`˝röt
(
v
->
msg_löe
, 0,"Bad Memory Devices: ");

317
of
=20;

318 
i
=
cou¡
=0; i <
MAX_DMI_MEMDEVS
; i++){

319 i‡(!
dmi_îr_˙ts
[
i
])

321 
mem_dev
 *
md
 =
mem_devs
[
i
];

322 if(
cou¡
++){

323
	`˝röt
(
v
->
msg_löe
,
of
, ", ");

324
of
+=2;

326
°rög
=
	`gë_t°ru˘_°rög
((
t°ru˘_hódî
 *)
md
,md->
dev_loˇt‹
);

327 i‡(
	`°æí
(
°rög
Ë+
of
 > 80){

328
	`s¸ﬁl
();

329
of
=7;

331
	`˝röt
(
v
->
msg_löe
,
of
,
°rög
);

332
of
 +
	`°æí
(
°rög
);

334
	}
}

	@dmi.h

1 #i‚de‡
__DMI_H__


2 
	#__DMI_H__


	)

3 
add_dmi_îr
(
ul⁄g

adr
);

4 
¥öt_dmi_îr
();

5 
¥öt_dmi_öfo
();

	@elf.h

1 #i‚de‡
ELF_H


2 
	#ELF_H


	)

4 
	#EI_NIDENT
 16

	)

7 
	#ET_NONE
 0

	)

8 
	#ET_REL
 1

	)

9 
	#ET_EXEC
 2

	)

10 
	#ET_DYN
 3

	)

11 
	#ET_CORE
 4

	)

14 
	#EM_NONE
 0

	)

15 
	#EM_M32
 1

	)

16 
	#EM_SPARC
 2

	)

17 
	#EM_386
 3

	)

18 
	#EM_68K
 4

	)

19 
	#EM_88K
 5

	)

20 
	#EM_486
 6

	)

21 
	#EM_860
 7

	)

22 
	#EM_MIPS
 8

	)

23 
	#EM_S370
 9

	)

24 
	#EM_MIPS_RS3_LE
 10

	)

26 
	#EM_PARISC
 15

	)

27 
	#EM_VPP500
 17

	)

28 
	#EM_SPARC32PLUS
 18

	)

29 
	#EM_960
 19

	)

30 
	#EM_PPC
 20

	)

31 
	#EM_PPC64
 21

	)

32 
	#EM_S390
 22

	)

34 
	#EM_V800
 36

	)

35 
	#EM_FR20
 37

	)

36 
	#EM_RH32
 38

	)

37 
	#EM_RCE
 39

	)

38 
	#EM_ARM
 40

	)

39 
	#EM_FAKE_ALPHA
 41

	)

40 
	#EM_SH
 42

	)

41 
	#EM_SPARCV9
 43

	)

42 
	#EM_TRICORE
 44

	)

43 
	#EM_ARC
 45

	)

44 
	#EM_H8_300
 46

	)

45 
	#EM_H8_300H
 47

	)

46 
	#EM_H8S
 48

	)

47 
	#EM_H8_500
 49

	)

48 
	#EM_IA_64
 50

	)

49 
	#EM_MIPS_X
 51

	)

50 
	#EM_COLDFIRE
 52

	)

51 
	#EM_68HC12
 53

	)

52 
	#EM_MMA
 54

	)

53 
	#EM_PCP
 55

	)

54 
	#EM_NCPU
 56

	)

55 
	#EM_NDR1
 57

	)

56 
	#EM_STARCORE
 58

	)

57 
	#EM_ME16
 59

	)

58 
	#EM_ST100
 60

	)

59 
	#EM_TINYJ
 61

	)

60 
	#EM_X86_64
 62

	)

61 
	#EM_PDSP
 63

	)

63 
	#EM_FX66
 66

	)

64 
	#EM_ST9PLUS
 67

	)

65 
	#EM_ST7
 68

	)

66 
	#EM_68HC16
 69

	)

67 
	#EM_68HC11
 70

	)

68 
	#EM_68HC08
 71

	)

69 
	#EM_68HC05
 72

	)

70 
	#EM_SVX
 73

	)

71 
	#EM_AT19
 74

	)

72 
	#EM_VAX
 75

	)

73 
	#EM_CRIS
 76

	)

74 
	#EM_JAVELIN
 77

	)

75 
	#EM_FIREPATH
 78

	)

76 
	#EM_ZSP
 79

	)

77 
	#EM_MMIX
 80

	)

78 
	#EM_HUANY
 81

	)

79 
	#EM_PRISM
 82

	)

80 
	#EM_AVR
 83

	)

81 
	#EM_FR30
 84

	)

82 
	#EM_D10V
 85

	)

83 
	#EM_D30V
 86

	)

84 
	#EM_V850
 87

	)

85 
	#EM_M32R
 88

	)

86 
	#EM_MN10300
 89

	)

87 
	#EM_MN10200
 90

	)

88 
	#EM_PJ
 91

	)

89 
	#EM_OPENRISC
 92

	)

90 
	#EM_ARC_A5
 93

	)

91 
	#EM_XTENSA
 94

	)

92 
	#EM_NUM
 95

	)

95 
	#PT_NULL
 0

	)

96 
	#PT_LOAD
 1

	)

97 
	#PT_DYNAMIC
 2

	)

98 
	#PT_INTERP
 3

	)

99 
	#PT_NOTE
 4

	)

100 
	#PT_SHLIB
 5

	)

101 
	#PT_PHDR
 6

	)

104 
	#PF_X
 0x1

	)

105 
	#PF_W
 0x2

	)

106 
	#PF_R
 0x4

	)

109 
	#ELF_PROGRAM_RETURNS_BIT
 0x8000000

	)

111 
	#EI_MAG0
 0

	)

112 
	#ELFMAG0
 0x7f

	)

114 
	#EI_MAG1
 1

	)

115 
	#ELFMAG1
 'E'

	)

117 
	#EI_MAG2
 2

	)

118 
	#ELFMAG2
 'L'

	)

120 
	#EI_MAG3
 3

	)

121 
	#ELFMAG3
 'F'

	)

123 
	#ELFMAG
 "\177ELF"

	)

125 
	#EI_CLASS
 4

	)

126 
	#ELFCLASSNONE
 0

	)

127 
	#ELFCLASS32
 1

	)

128 
	#ELFCLASS64
 2

	)

130 
	#EI_DATA
 5

	)

131 
	#ELFDATANONE
 0

	)

132 
	#ELFDATA2LSB
 1

	)

133 
	#ELFDATA2MSB
 2

	)

135 
	#EI_VERSION
 6

	)

138 
	#EV_NONE
 0

	)

139 
	#EV_CURRENT
 1

	)

141 
	#ELF32_PHDR_SIZE
 (8*4Ë

	)

143 #i‚de‡
ASSEMBLY


145 
	~"°döt.h
"

151 
uöt32_t

	tElf32_Addr
;

152 
uöt16_t

	tElf32_HÆf
;

153 
uöt32_t

	tElf32_Off
;

154 
uöt16_t

	tElf32_Se˘i⁄
;

155 
öt32_t

	tElf32_Sw‹d
;

156 
uöt32_t

	tElf32_W‹d
;

157 
uöt32_t

	tElf32_Size
;

159 
uöt64_t

	tElf64_Addr
;

160 
uöt16_t

	tElf64_HÆf
;

161 
uöt64_t

	tElf64_Off
;

162 
uöt16_t

	tElf64_Se˘i⁄
;

163 
öt32_t

	tElf64_Sw‹d
;

164 
uöt32_t

	tElf64_W‹d
;

165 
uöt64_t

	tElf64_Size
;

166 
uöt64_t

	tElf64_Xw‹d
;

167 
öt64_t

	tElf64_Sxw‹d
;

173 
	me_idít
[
EI_NIDENT
];

174
Elf32_HÆf

	me_ty≥
;

175
Elf32_HÆf

	me_machöe
;

176
Elf32_W‹d

	me_vîsi⁄
;

177
Elf32_Addr

	me_íåy
;

178
Elf32_Off

	me_phoff
;

179
Elf32_Off

	me_shoff
;

180
Elf32_W‹d

	me_Êags
;

181
Elf32_HÆf

	me_ehsize
;

182
Elf32_HÆf

	me_phítsize
;

183
Elf32_HÆf

	me_phnum
;

184
Elf32_HÆf

	me_shítsize
;

185
Elf32_HÆf

	me_shnum
;

186
Elf32_HÆf

	me_sh°∫dx
;

187 }
	tElf32_Ehdr
;

190 
	me_idít
[
EI_NIDENT
];

191
Elf64_HÆf

	me_ty≥
;

192
Elf64_HÆf

	me_machöe
;

193
Elf64_W‹d

	me_vîsi⁄
;

194
Elf64_Addr

	me_íåy
;

195
Elf64_Off

	me_phoff
;

196
Elf64_Off

	me_shoff
;

197
Elf64_W‹d

	me_Êags
;

198
Elf64_HÆf

	me_ehsize
;

199
Elf64_HÆf

	me_phítsize
;

200
Elf64_HÆf

	me_phnum
;

201
Elf64_HÆf

	me_shítsize
;

202
Elf64_HÆf

	me_shnum
;

203
Elf64_HÆf

	me_sh°∫dx
;

204 }
	tElf64_Ehdr
;

210
Elf32_W‹d

	mp_ty≥
;

211
Elf32_Off

	mp_off£t
;

212
Elf32_Addr

	mp_vaddr
;

213
Elf32_Addr

	mp_∑ddr
;

214
Elf32_Size

	mp_fûesz
;

215
Elf32_Size

	mp_memsz
;

216
Elf32_W‹d

	mp_Êags
;

217
Elf32_Size

	mp_Æign
;

218 }
	tElf32_Phdr
;

221
Elf64_W‹d

	mp_ty≥
;

222
Elf64_W‹d

	mp_Êags
;

223
Elf64_Off

	mp_off£t
;

224
Elf64_Addr

	mp_vaddr
;

225
Elf64_Addr

	mp_∑ddr
;

226
Elf64_Size

	mp_fûesz
;

227
Elf64_Size

	mp_memsz
;

228
Elf64_Size

	mp_Æign
;

229 }
	tElf64_Phdr
;

236
Elf32_Sw‹d

	md_èg
;

239
Elf32_W‹d

	md_vÆ
;

240
Elf32_Addr

	md_±r
;

241 }
	md_un
;

242 }
	tElf32_Dyn
;

246
Elf64_Sxw‹d

	md_èg
;

249
Elf64_Xw‹d

	md_vÆ
;

250
Elf64_Addr

	md_±r
;

251 }
	md_un
;

252 }
	tElf64_Dyn
;

256 
	#DT_NULL
 0

	)

257 
	#DT_NEEDED
 1

	)

258 
	#DT_PLTRELSZ
 2

	)

259 
	#DT_PLTGOT
 3

	)

260 
	#DT_HASH
 4

	)

261 
	#DT_STRTAB
 5

	)

262 
	#DT_SYMTAB
 6

	)

263 
	#DT_RELA
 7

	)

264 
	#DT_RELASZ
 8

	)

265 
	#DT_RELAENT
 9

	)

266 
	#DT_STRSZ
 10

	)

267 
	#DT_SYMENT
 11

	)

268 
	#DT_INIT
 12

	)

269 
	#DT_FINI
 13

	)

270 
	#DT_SONAME
 14

	)

271 
	#DT_RPATH
 15

	)

272 
	#DT_SYMBOLIC
 16

	)

273 
	#DT_REL
 17

	)

274 
	#DT_RELSZ
 18

	)

275 
	#DT_RELENT
 19

	)

276 
	#DT_PLTREL
 20

	)

277 
	#DT_DEBUG
 21

	)

278 
	#DT_TEXTREL
 22

	)

279 
	#DT_JMPREL
 23

	)

280 
	#DT_BIND_NOW
 24

	)

281 
	#DT_INIT_ARRAY
 25

	)

282 
	#DT_FINI_ARRAY
 26

	)

283 
	#DT_INIT_ARRAYSZ
 27

	)

284 
	#DT_FINI_ARRAYSZ
 28

	)

285 
	#DT_RUNPATH
 29

	)

286 
	#DT_FLAGS
 30

	)

287 
	#DT_ENCODING
 32

	)

288 
	#DT_PREINIT_ARRAY
 32

	)

289 
	#DT_PREINIT_ARRAYSZ
 33

	)

290 
	#DT_NUM
 34

	)

291 
	#DT_LOOS
 0x6000000d

	)

292 
	#DT_HIOS
 0x6ffff000

	)

293 
	#DT_LOPROC
 0x70000000

	)

294 
	#DT_HIPROC
 0x7ffffff‡

	)

295 
	#DT_PROCNUM
 0x32

	)

300 
	#DT_VALRNGLO
 0x6ffffd00

	)

301 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

302 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

303 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

304 
	#DT_CHECKSUM
 0x6ffffdf8

	)

305 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

306 
	#DT_MOVEENT
 0x6ffffdÁ

	)

307 
	#DT_MOVESZ
 0x6ffffdfb

	)

308 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

309 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

311 
	#DT_SYMINSZ
 0x6ffffd„

	)

312 
	#DT_SYMINENT
 0x6ffffdf‡

	)

313 
	#DT_VALRNGHI
 0x6ffffdff

	)

314 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

315 
	#DT_VALNUM
 12

	)

322 
	#DT_ADDRRNGLO
 0x6fff„00

	)

323 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

324 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

325 
	#DT_CONFIG
 0x6fff„Á

	)

326 
	#DT_DEPAUDIT
 0x6fff„fb

	)

327 
	#DT_AUDIT
 0x6fff„f¯

	)

328 
	#DT_PLTPAD
 0x6fff„fd

	)

329 
	#DT_MOVETAB
 0x6fff„„

	)

330 
	#DT_SYMINFO
 0x6fff„f‡

	)

331 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

332 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

333 
	#DT_ADDRNUM
 10

	)

337 
	#DT_VERSYM
 0x6ffffff0

	)

339 
	#DT_RELACOUNT
 0x6ffffff9

	)

340 
	#DT_RELCOUNT
 0x6fffffÁ

	)

343 
	#DT_FLAGS_1
 0x6ffffffb

	)

344 
	#DT_VERDEF
 0x6ffffff¯

	)

346 
	#DT_VERDEFNUM
 0x6ffffffd

	)

347 
	#DT_VERNEED
 0x6fffff„

	)

349 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

350 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

351 
	#DT_VERSIONTAGNUM
 16

	)

355 
	#DT_AUXILIARY
 0x7ffffffd

	)

356 
	#DT_FILTER
 0x7ffffff‡

	)

357 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

358 
	#DT_EXTRANUM
 3

	)

361 
	#DF_ORIGIN
 0x00000001

	)

362 
	#DF_SYMBOLIC
 0x00000002

	)

363 
	#DF_TEXTREL
 0x00000004

	)

364 
	#DF_BIND_NOW
 0x00000008

	)

365 
	#DF_STATIC_TLS
 0x00000010

	)

369 
	#DF_1_NOW
 0x00000001

	)

370 
	#DF_1_GLOBAL
 0x00000002

	)

371 
	#DF_1_GROUP
 0x00000004

	)

372 
	#DF_1_NODELETE
 0x00000008

	)

373 
	#DF_1_LOADFLTR
 0x00000010

	)

374 
	#DF_1_INITFIRST
 0x00000020

	)

375 
	#DF_1_NOOPEN
 0x00000040

	)

376 
	#DF_1_ORIGIN
 0x00000080

	)

377 
	#DF_1_DIRECT
 0x00000100

	)

378 
	#DF_1_TRANS
 0x00000200

	)

379 
	#DF_1_INTERPOSE
 0x00000400

	)

380 
	#DF_1_NODEFLIB
 0x00000800

	)

381 
	#DF_1_NODUMP
 0x00001000

	)

382 
	#DF_1_CONFALT
 0x00002000

	)

383 
	#DF_1_ENDFILTEE
 0x00004000

	)

384 
	#DF_1_DISPRELDNE
 0x00008000

	)

385 
	#DF_1_DISPRELPND
 0x00010000

	)

388 
	#DTF_1_PARINIT
 0x00000001

	)

389 
	#DTF_1_CONFEXP
 0x00000002

	)

392 
	#DF_P1_LAZYLOAD
 0x00000001

	)

393 
	#DF_P1_GROUPPERM
 0x00000002

	)

398 
	#SHN_UNDEF
 0

	)

399 
	#SHN_LORESERVE
 0xff00

	)

400 
	#SHN_LOPROC
 0xff00

	)

401 
	#SHN_HIPROC
 0xff1‡

	)

402 
	#SHN_LOOS
 0xff20

	)

403 
	#SHN_HIOS
 0xff3‡

	)

404 
	#SHN_ABS
 0xfff1

	)

405 
	#SHN_COMMON
 0xfff2

	)

406 
	#SHN_XINDEX
 0xfff‡

	)

407 
	#SHN_HIRESERVE
 0xfff‡

	)

411 
	#SHT_NULL
 0

	)

412 
	#SHT_PROGBITS
 1

	)

413 
	#SHT_SYMTAB
 2

	)

414 
	#SHT_STRTAB
 3

	)

415 
	#SHT_RELA
 4

	)

416 
	#SHT_HASH
 5

	)

417 
	#SHT_DYNAMIC
 6

	)

418 
	#SHT_NOTE
 7

	)

419 
	#SHT_NOBITS
 8

	)

420 
	#SHT_REL
 9

	)

421 
	#SHT_SHLIB
 10

	)

422 
	#SHT_DYNSYM
 11

	)

423 
	#SHT_INIT_ARRAY
 14

	)

424 
	#SHT_FINI_ARRAY
 15

	)

425 
	#SHT_PREINIT_ARRAY
 16

	)

426 
	#SHT_GROUP
 17

	)

427 
	#SHT_SYMTAB_SHNDX
 18

	)

428 
	#SHT_NUM
 19

	)

429 
	#SHT_LOOS
 0x60000000

	)

430 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

431 
	#SHT_CHECKSUM
 0x6ffffff8

	)

432 
	#SHT_LOSUNW
 0x6fffffÁ

	)

433 
	#SHT_SUNW_move
 0x6fffffÁ

	)

434 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

435 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

436 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

437 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

438 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

439 
	#SHT_HISUNW
 0x6ffffff‡

	)

440 
	#SHT_HIOS
 0x6ffffff‡

	)

441 
	#SHT_LOPROC
 0x70000000

	)

442 
	#SHT_HIPROC
 0x7ffffff‡

	)

443 
	#SHT_LOUSER
 0x80000000

	)

444 
	#SHT_HIUSER
 0x8ffffff‡

	)

448 
	#SHF_WRITE
 (1 << 0Ë

	)

449 
	#SHF_ALLOC
 (1 << 1Ë

	)

450 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

451 
	#SHF_MERGE
 (1 << 4Ë

	)

452 
	#SHF_STRINGS
 (1 << 5Ë

	)

453 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

454 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

455 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

457 
	#SHF_GROUP
 (1 << 9Ë

	)

458 
	#SHF_TLS
 (1 << 10Ë

	)

459 
	#SHF_MASKOS
 0x0ff00000

	)

460 
	#SHF_MASKPROC
 0xf0000000

	)

463 
	#GRP_COMDAT
 0x1

	)

469
Elf32_W‹d

	m°_«me
;

470
Elf32_Addr

	m°_vÆue
;

471
Elf32_W‹d

	m°_size
;

472 
	m°_öfo
;

473 
	m°_Ÿhî
;

474
Elf32_Se˘i⁄

	m°_shndx
;

475 }
	tElf32_Sym
;

479
Elf64_W‹d

	m°_«me
;

480 
	m°_öfo
;

481 
	m°_Ÿhî
;

482
Elf64_Se˘i⁄

	m°_shndx
;

483
Elf64_Addr

	m°_vÆue
;

484
Elf64_Xw‹d

	m°_size
;

485 }
	tElf64_Sym
;

491
Elf32_Addr

	mr_off£t
;

492
Elf32_W‹d

	mr_öfo
;

493 }
	tElf32_Rñ
;

502
Elf64_Addr

	mr_off£t
;

503
Elf64_Xw‹d

	mr_öfo
;

504 }
	tElf64_Rñ
;

510
Elf32_Addr

	mr_off£t
;

511
Elf32_W‹d

	mr_öfo
;

512
Elf32_Sw‹d

	mr_addíd
;

513 }
	tElf32_Rña
;

517
Elf64_Addr

	mr_off£t
;

518
Elf64_Xw‹d

	mr_öfo
;

519
Elf64_Sxw‹d

	mr_addíd
;

520 }
	tElf64_Rña
;

524 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

525 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

526 
	#ELF32_R_INFO
(
sym
,
ty≥
Ë(((symË<< 8Ë+(—y≥Ë& 0xff))

	)

528 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

529 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

530 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+—y≥))

	)

537 
	#R_386_NONE
 0

	)

538 
	#R_386_32
 1

	)

539 
	#R_386_PC32
 2

	)

540 
	#R_386_GOT32
 3

	)

541 
	#R_386_PLT32
 4

	)

542 
	#R_386_COPY
 5

	)

543 
	#R_386_GLOB_DAT
 6

	)

544 
	#R_386_JMP_SLOT
 7

	)

545 
	#R_386_RELATIVE
 8

	)

546 
	#R_386_GOTOFF
 9

	)

547 
	#R_386_GOTPC
 10

	)

548 
	#R_386_32PLT
 11

	)

549 
	#R_386_TLS_TPOFF
 14

	)

550 
	#R_386_TLS_IE
 15

	)

552 
	#R_386_TLS_GOTIE
 16

	)

554 
	#R_386_TLS_LE
 17

	)

556 
	#R_386_TLS_GD
 18

	)

558 
	#R_386_TLS_LDM
 19

	)

561 
	#R_386_16
 20

	)

562 
	#R_386_PC16
 21

	)

563 
	#R_386_8
 22

	)

564 
	#R_386_PC8
 23

	)

565 
	#R_386_TLS_GD_32
 24

	)

567 
	#R_386_TLS_GD_PUSH
 25

	)

568 
	#R_386_TLS_GD_CALL
 26

	)

570 
	#R_386_TLS_GD_POP
 27

	)

571 
	#R_386_TLS_LDM_32
 28

	)

573 
	#R_386_TLS_LDM_PUSH
 29

	)

574 
	#R_386_TLS_LDM_CALL
 30

	)

576 
	#R_386_TLS_LDM_POP
 31

	)

577 
	#R_386_TLS_LDO_32
 32

	)

578 
	#R_386_TLS_IE_32
 33

	)

580 
	#R_386_TLS_LE_32
 34

	)

582 
	#R_386_TLS_DTPMOD32
 35

	)

583 
	#R_386_TLS_DTPOFF32
 36

	)

584 
	#R_386_TLS_TPOFF32
 37

	)

585 
	#R_386_NUM
 38

	)

	@error.c

12 
	~"ã°.h
"

13 
	~"c⁄fig.h
"

14 
	~<sys/io.h
>

15 
	~"dmi.h
"

16 
	#NULL
 0

	)

18 
ã°_ticks
,
¡icks
,
bìpmode
;

19 
t£q
Åseq[];

20 
dmi_îr_˙ts
[
MAX_DMI_MEMDEVS
];

21 
dmi_öôülized
;

22 
pﬁl_îr‹s
();

24 
upd©e_îr_cou¡s
();

25 
¥öt_îr_cou¡s
();

26 
	gsyn
,
	gch™
,
	gÀn
=1;

31 
	$comm⁄_îr
–
ul⁄g
 *
adr
, ul⁄g
good
, ul⁄g
bad
, ul⁄g
x‹
, 
ty≥
)

33 
i
,
n
,
x
,
j
,
Êag
=0;

34
ul⁄g

∑ge
,
off£t
;

35 
∑ächg
;

36
ul⁄g

mb
;

38
	`upd©e_îr_cou¡s
();

39
	`add_dmi_îr
((
ul⁄g
)
adr
);

41 
v
->
¥ötmode
) {

42 
PRINTMODE_SUMMARY
:

44 i‡(
ty≥
 == 3) {

49 i‡(
ty≥
 == 1) {

50
x‹
 =
good
 ^
bad
;

54 i‡(
ty≥
 == 2) {

56 i‡(
bad
) {

57
v
->
îri
.
c‹_îr
++;

59
∑ge
 = (
ul⁄g
)
adr
;

60
off£t
 =
good
;

62
∑ge
 =
	`∑ge_of
(
adr
);

63
off£t
 = (
ul⁄g
)
adr
 & 0xFFF;

67 i‡(
v
->
îri
.
low_addr
.
∑ge
 >Öage) {

68
v
->
îri
.
low_addr
.
∑ge
 =Öage;

69
v
->
îri
.
low_addr
.
off£t
 = offset;

70
Êag
++;

71 } i‡(
v
->
îri
.
low_addr
.
∑ge
 ==Öage &&

72
v
->
îri
.
low_addr
.
off£t
 > offset) {

73
v
->
îri
.
low_addr
.
off£t
 = offset;

74
v
->
îri
.
high_addr
.
off£t
 = offset;

75
Êag
++;

76 } i‡(
v
->
îri
.
high_addr
.
∑ge
 <Öage) {

77
v
->
îri
.
high_addr
.
∑ge
 =Öage;

78
Êag
++;

80 i‡(
v
->
îri
.
high_addr
.
∑ge
 ==Öage &&

81
v
->
îri
.
high_addr
.
off£t
 < offset) {

82
v
->
îri
.
high_addr
.
off£t
 = offset;

83
Êag
++;

87 
i
=0,
n
=0; i<32; i++) {

88 i‡(
x‹
>>
i
 & 1) {

89
n
++;

92
v
->
îri
.
tbôs
 +
n
;

93 i‡(
n
 >
v
->
îri
.
max_bôs
) {

94
v
->
îri
.
max_bôs
 =
n
;

95
Êag
++;

97 i‡(
n
 <
v
->
îri
.
mö_bôs
) {

98
v
->
îri
.
mö_bôs
 =
n
;

99
Êag
++;

101 i‡(
v
->
îri
.
ebôs
 ^
x‹
) {

102
Êag
++;

104
v
->
îri
.
ebôs
 |
x‹
;

107
Àn
 = 1;

108 i‡((
ul⁄g
)
adr
 =(ul⁄g)
v
->
îri
.
ódr
+4 ||

109 (
ul⁄g
)
adr
 =(ul⁄g)
v
->
îri
.
ódr
-4 ) {

110
Àn
++;

112 i‡(
Àn
 >
v
->
îri
.
maxl
) {

113
v
->
îri
.
maxl
 =
Àn
;

114
Êag
++;

116
v
->
îri
.
ódr
 = (
ul⁄g
)
adr
;

118 i‡(
v
->
îri
.
hdr_Êag
 == 0) {

119
	`˛ór_s¸ﬁl
();

120
	`˝röt
(
LINE_HEADER
+0, 1, "Error Confidence Value:");

121
	`˝röt
(
LINE_HEADER
+1, 1, " Lowest Error Address:");

122
	`˝röt
(
LINE_HEADER
+2, 1, " Highest Error Address:");

123
	`˝röt
(
LINE_HEADER
+3, 1, " Bits in Error Mask:");

124
	`˝röt
(
LINE_HEADER
+4, 1, " Bits in Error - Total:");

125
	`˝röt
(
LINE_HEADER
+4, 29, "Min: Max: Avg:");

126
	`˝röt
(
LINE_HEADER
+5, 1, " Max Contiguous Errors:");

127
	`˝röt
(
LINE_HEADER
+6, 1, "ECC Correctable Errors:");

128
	`˝röt
(
LINE_HEADER
+7, 1, "ErrorsÖer Memory Slot:");

129
x
 = 24;

130 i‡(
dmi_öôülized
) {

131 
i
=0; i <
MAX_DMI_MEMDEVS
;){

132
n
 =
LINE_HEADER
+7;

133 
j
=0; j<4; j++) {

134 i‡(
dmi_îr_˙ts
[
i
] >= 0) {

135
	`d¥öt
(
n
,
x
,
i
, 2, 0);

136
	`˝röt
(
n
,
x
+2, ": 0");

138
i
++;

139
n
++;

141
x
 += 10;

145
	`˝röt
(
LINE_HEADER
+0, 64, "Test Errors");

146
v
->
îri
.
hdr_Êag
++;

148 i‡(
Êag
) {

150 
i
=0,
n
=0; i<32; i++) {

151 i‡(
v
->
îri
.
ebôs
>>
i
 & 1) {

152
n
++;

155
∑ge
 =
v
->
îri
.
low_addr
.page;

156
off£t
 =
v
->
îri
.
low_addr
.offset;

157
mb
 =
∑ge
 >> 8;

158
	`h¥öt
(
LINE_HEADER
+1, 25,
∑ge
);

159
	`h¥öt2
(
LINE_HEADER
+1, 33,
off£t
, 3);

160
	`˝röt
(
LINE_HEADER
+1, 36, " - . MB");

161
	`d¥öt
(
LINE_HEADER
+1, 39,
mb
, 5, 0);

162
	`d¥öt
(
LINE_HEADER
+1, 45, ((
∑ge
 & 0xFF)*10)/256, 1, 0);

163
∑ge
 =
v
->
îri
.
high_addr
.page;

164
off£t
 =
v
->
îri
.
high_addr
.offset;

165
mb
 =
∑ge
 >> 8;

166
	`h¥öt
(
LINE_HEADER
+2, 25,
∑ge
);

167
	`h¥öt2
(
LINE_HEADER
+2, 33,
off£t
, 3);

168
	`˝röt
(
LINE_HEADER
+2, 36, " - . MB");

169
	`d¥öt
(
LINE_HEADER
+2, 39,
mb
, 5, 0);

170
	`d¥öt
(
LINE_HEADER
+2, 45, ((
∑ge
 & 0xFF)*10)/256, 1, 0);

171
	`h¥öt
(
LINE_HEADER
+3, 25,
v
->
îri
.
ebôs
);

172
	`d¥öt
(
LINE_HEADER
+4, 25,
n
, 2, 1);

173
	`d¥öt
(
LINE_HEADER
+4, 34,
v
->
îri
.
mö_bôs
, 2, 1);

174
	`d¥öt
(
LINE_HEADER
+4, 42,
v
->
îri
.
max_bôs
, 2, 1);

175
	`d¥öt
(
LINE_HEADER
+4, 50,
v
->
îri
.
tbôs
/v->
ecou¡
, 2, 1);

176
	`d¥öt
(
LINE_HEADER
+5, 25,
v
->
îri
.
maxl
, 7, 1);

177
x
 = 28;

178 
i
=0; i <
MAX_DMI_MEMDEVS
;){

179
n
 =
LINE_HEADER
+7;

180 
j
=0; j<4; j++) {

181 i‡(
dmi_îr_˙ts
[
i
] > 0) {

182
	`d¥öt
 (
n
,
x
,
dmi_îr_˙ts
[
i
], 7, 1);

184
i
++;

185
n
++;

187
x
 += 10;

190 
i
=0;
t£q
[i].
msg
 !
NULL
; i++) {

191
	`d¥öt
(
LINE_HEADER
+1+
i
, 66, i, 2, 0);

192
	`d¥öt
(
LINE_HEADER
+1+
i
, 68,
t£q
[i].
îr‹s
, 8, 0);

195 i‡(
v
->
îri
.
c‹_îr
) {

196
	`d¥öt
(
LINE_HEADER
+6, 25,
v
->
îri
.
c‹_îr
, 8, 1);

200 
PRINTMODE_ADDRESSES
:

202 i‡((
ul⁄g
)
adr
 =(ul⁄g)
v
->
îri
.
ódr
 &&

203
x‹
 =
v
->
îri
.
ex‹
) {

206 i‡(
v
->
îri
.
hdr_Êag
 == 0) {

207
	`˛ór_s¸ﬁl
();

208
	`˝röt
(
LINE_HEADER
, 0,

210
	`˝röt
(
LINE_HEADER
+1, 0,

212
v
->
îri
.
hdr_Êag
++;

215
	`check_öput
();

216
	`s¸ﬁl
();

218 i‡–
ty≥
 == 2 ||Åype == 3) {

219
∑ge
 = (
ul⁄g
)
adr
;

220
off£t
 =
good
;

222
∑ge
 =
	`∑ge_of
(
adr
);

223
off£t
 = (()
adr
) & 0xFFF;

225
mb
 =
∑ge
 >> 8;

226
	`d¥öt
(
v
->
msg_löe
, 0, v->
ã°
, 3, 0);

227
	`d¥öt
(
v
->
msg_löe
, 4, v->
∑ss
, 5, 0);

228
	`h¥öt
(
v
->
msg_löe
, 11,
∑ge
);

229
	`h¥öt2
(
v
->
msg_löe
, 19,
off£t
, 3);

230
	`˝röt
(
v
->
msg_löe
, 22, " - . MB");

231
	`d¥öt
(
v
->
msg_löe
, 25,
mb
, 5, 0);

232
	`d¥öt
(
v
->
msg_löe
, 31, ((
∑ge
 & 0xFF)*10)/256, 1, 0);

234 i‡(
ty≥
 == 3) {

236
	`˝röt
(
v
->
msg_löe
, 36,

237
bad
?"corrected ": "uncorrected ");

238
	`h¥öt2
(
v
->
msg_löe
, 60,
syn
, 4);

239
	`˝röt
(
v
->
msg_löe
, 68, "ECC");

240
	`d¥öt
(
v
->
msg_löe
, 74,
ch™
, 2, 0);

241 } i‡(
ty≥
 == 2) {

242
	`˝röt
(
v
->
msg_löe
, 36, "ParityÉrror detected ");

244
	`h¥öt
(
v
->
msg_löe
, 36,
good
);

245
	`h¥öt
(
v
->
msg_löe
, 46,
bad
);

246
	`h¥öt
(
v
->
msg_löe
, 56,
x‹
);

247
	`d¥öt
(
v
->
msg_löe
, 66, v->
ecou¡
, 5, 0);

248
v
->
îri
.
ex‹
 =
x‹
;

250
v
->
îri
.
ódr
 = (
ul⁄g
)
adr
;

251
	`¥öt_îr_cou¡s
();

254 
PRINTMODE_PATTERNS
:

255 i‡(
v
->
îri
.
hdr_Êag
 == 0) {

256
	`˛ór_s¸ﬁl
();

257
v
->
îri
.
hdr_Êag
++;

260 i‡(
v
->
ã°
 == 0 || v->test == 5) {

264 i‡–
ty≥
 != 0) {

268
∑ächg
=
	`ö£πaddªss
 ((
ul⁄g
Ë
adr
);

269 i‡(
∑ächg
) {

270
	`¥öç©n
();

274 
PRINTMODE_NONE
:

275 i‡(
v
->
îri
.
hdr_Êag
 == 0) {

276
	`˛ór_s¸ﬁl
();

277
v
->
îri
.
hdr_Êag
++;

281
	}
}

286 
	$îr‹
(
ul⁄g
 *
adr
, ul⁄g
good
, ul⁄g
bad
)

288
ul⁄g

x‹
;

290
x‹
 =
good
 ^
bad
;

291 #ifde‡
USB_WAR


297 i‡((
ul⁄g
)
adr
 == 0x4e0 || (ulong)adr == 0x410) {

301
	`comm⁄_îr
(
adr
,
good
,
bad
,
x‹
, 0);

302
	}
}

309 
	$ad_îr1
(
ul⁄g
 *
adr1
, ul⁄g *
mask
, ul⁄g
bad
, ul⁄g
good
)

311
	`comm⁄_îr
(
adr1
,
good
,
bad
, (
ul⁄g
)
mask
, 1);

312
	}
}

319 
	$ad_îr2
(
ul⁄g
 *
adr
, ul⁄g
bad
)

321
	`comm⁄_îr
(
adr
, (
ul⁄g
Ôdr,
bad
, ((ulong)adr) ^ bad, 0);

322
	}
}

324 
	$upd©e_îr_cou¡s
()

326 i‡(
bìpmode
){

327
	`bìp
(600);

328
	`bìp
(1000);

331 i‡(
v
->
∑ss
 && v->
ecou¡
 == 0) {

332
	`˝röt
(
LINE_MSG
,
COL_MSG
,

335 ++(
v
->
ecou¡
);

336
t£q
[
v
->
ã°
].
îr‹s
++;

338
	}
}

340 
	$¥öt_îr_cou¡s
()

342 
i
;

343 *
µ
;

345 i‡((
v
->
ecou¡
 > 4096) && (v->ecount % 256 != 0)) ;

347
	`d¥öt
(
LINE_INFO
,
COL_ERR
,
v
->
ecou¡
, 6, 0);

348
	`d¥öt
(
LINE_INFO
,
COL_ECC_ERR
,
v
->
ecc_ecou¡
, 6, 0);

352 i‡((
v
->
¥ötmode
 =
PRINTMODE_ADDRESSES
 ||

353
v
->
¥ötmode
 =
PRINTMODE_PATTERNS
) &&

354
v
->
msg_löe
 < 24) {

355 
i
=0,
µ
=(*)((
SCREEN_ADR
+
v
->
msg_löe
*160+1));

356
i
<76; i++,
µ
+=2) {

357 *
µ
 = 0x47;

360
	}
}

366 
	$¥öt_ecc_îr
(
∑ge
, 
off£t
,

367 
c‹ª˘ed
, 
syndrome
, 
ch™√l
)

369 ++(
v
->
ecc_ecou¡
);

370
syn
 =
syndrome
;

371
ch™
 =
ch™√l
;

372
	`comm⁄_îr
((
ul⁄g
 *)
∑ge
,
off£t
,
c‹ª˘ed
, 0, 2);

373
	}
}

375 #ifde‡
PARITY_MEM


379 
	$∑rôy_îr
–
edi
, 
esi
)

381 
addr
;

383 i‡(
v
->
ã°
 == 5) {

384
addr
 =
esi
;

386
addr
 =
edi
;

388
	`comm⁄_îr
((
ul⁄g
 *)
addr
,áddr & 0xFFF, 0, 0, 3);

389
	}
}

395 
	$¥öç©n
 ()

397 
idx
=0;

398 
x
;

401
	`check_öput
();

403 i‡(
v
->
num∑ä
 == 0)

406
	`s¸ﬁl
();

408
	`˝röt
 (
v
->
msg_löe
, 0, "badram=");

409
x
=7;

411 
idx
 = 0; idx <
v
->
num∑ä
; idx++) {

413 i‡(
x
 > 80-22) {

414
	`s¸ﬁl
();

415
x
=7;

417
	`˝röt
 (
v
->
msg_löe
,
x
, "0x");

418
	`h¥öt
 (
v
->
msg_löe
,
x
+2, v->
∑ä
[
idx
].
adr
 );

419
	`˝röt
 (
v
->
msg_löe
,
x
+10, ",0x");

420
	`h¥öt
 (
v
->
msg_löe
,
x
+13, v->
∑ä
[
idx
].
mask
);

421 i‡(
idx
+1 <
v
->
num∑ä
)

422
	`˝röt
 (
v
->
msg_löe
,
x
+21, ",");

423
x
+=22;

425
	}
}

430 
	$do_tick
()

432 
i
,
n
,
p˘
;

433
ul⁄g

h
,
l
,
t
;

436 i‡(
v
->
ecou¡
) {

437
	`¥öt_îr_cou¡s
();

440
¡icks
++;

441
v
->
tŸÆ_ticks
++;

443 i‡(
ã°_ticks
) {

444
p˘
 = 100*
¡icks
/
ã°_ticks
;

445 i‡(
p˘
 > 100) {

446
p˘
 = 100;

449
p˘
 = 0;

452
	`d¥öt
(1,
COL_MID
+4,
p˘
, 3, 0);

453
i
 = (
BAR_SIZE
 *
p˘
) / 100;

454 
i
 >
v
->
çå
) {

455 i‡(
v
->
çå
 >
BAR_SIZE
) {

458
	`˝röt
(1,
COL_MID
+9+
v
->
çå
, "#");

459
v
->
çå
++;

462 i‡(
v
->
∑ss_ticks
) {

463
p˘
 = 100*
v
->
tŸÆ_ticks
/v->
∑ss_ticks
;

464 i‡(
p˘
 > 100) {Öct = 100; }

466
p˘
 = 0;

468
	`d¥öt
(0,
COL_MID
+4,
p˘
, 3, 0);

469
i
 = (
BAR_SIZE
 *
p˘
) / 100;

470 
i
 >
v
->
µå
) {

471 i‡(
v
->
µå
 >
BAR_SIZE
) {

474
	`˝röt
(0,
COL_MID
+9+
v
->
µå
, "#");

475
v
->
µå
++;

478 i‡(
v
->
ecou¡
 && v->
¥ötmode
 =
PRINTMODE_SUMMARY
) {

480
p˘
 = 0;

483
h
 =
v
->
pm≠
[v->
m£gs
 - 1].
íd
 - 0x100;

484 i‡(
v
->
îri
.
low_addr
.
∑ge
 > 0x100 &&

485
v
->
îri
.
high_addr
.
∑ge
 <
h
) {

486
p˘
 += 8;

490 i‡(
v
->
∑ss
) {

491 
i
=0,
n
=0;
t£q
[i].
msg
 !
NULL
; i++) {

492 i‡(
t£q
[
i
].
îr‹s
 == 0) {

493
n
++;

496
p˘
 +
n
*3;

498 
i
=0,
n
=0; i<
v
->
ã°
; i++) {

499 i‡(
t£q
[
i
].
îr‹s
 == 0) {

500
n
++;

503
p˘
 +
n
*2;

508
n
 = 0;

509 i‡(
v
->
îri
.
ebôs
 & 0xfË
n
++;

510 i‡(
v
->
îri
.
ebôs
 & 0xf0Ë
n
++;

511 i‡(
v
->
îri
.
ebôs
 & 0xf00Ë
n
++;

512 i‡(
v
->
îri
.
ebôs
 & 0xf000Ë
n
++;

513 i‡(
v
->
îri
.
ebôs
 & 0xf0000Ë
n
++;

514 i‡(
v
->
îri
.
ebôs
 & 0xf00000Ë
n
++;

515 i‡(
v
->
îri
.
ebôs
 & 0xf000000Ë
n
++;

516 i‡(
v
->
îri
.
ebôs
 & 0xf0000000Ë
n
++;

517
p˘
 +(8-
n
)*2;

520
p˘
 =Öct*100/22;

526
	`d¥öt
(
LINE_HEADER
+0, 25,
p˘
, 3, 1);

533 i‡(
v
->
rdtsc
) {

534
asm

	`__vﬁ©ûe__
(

535 "rdtsc":"˜" (
l
),"=d" (
h
));

536
asm

	`__vﬁ©ûe__
 (

539 :"˜" (
l
), "=d" (
h
)

540 :"g" (
v
->
°¨é
), "g" (v->
°¨th
),

541 "0" (
l
), "1" (
h
));

542
t
 =
h
 * (()0xfffffff‡/
v
->
˛ks_m£c
) / 1000;

543
t
 +(
l
 /
v
->
˛ks_m£c
) / 1000;

544
i
 =
t
 % 60;

545
	`d¥öt
(
LINE_TIME
,
COL_TIME
+9,
i
%10, 1, 0);

546
	`d¥öt
(
LINE_TIME
,
COL_TIME
+8,
i
/10, 1, 0);

547
t
 /= 60;

548
i
 =
t
 % 60;

549
	`d¥öt
(
LINE_TIME
,
COL_TIME
+6,
i
 % 10, 1, 0);

550
	`d¥öt
(
LINE_TIME
,
COL_TIME
+5,
i
 / 10, 1, 0);

551
t
 /= 60;

552
	`d¥öt
(
LINE_TIME
,
COL_TIME
,
t
, 4, 0);

557
	`check_öput
();

560
	`pﬁl_îr‹s
();

561
	}
}

	@extra.c

10 
	~"ã°.h
"

11 
	~"s¸ìn_buf„r.h
"

12 
	~"pci.h
"

13 
	~"exåa.h
"

15 
	g˛aim
 = 0;

16 
	g˘æ
 = -1;

18 
	smem‹y_c⁄åﬁÀr
 {

19 
	mvíd‹
;

20 
	mdevi˚
;

21 
	mw‹ked
;

22 (*
	mch™ge_timög
)(
	mˇs
, 
	mrcd
, 
	mΩ
, 
	møs
);

25 
mem‹y_c⁄åﬁÀr

	gmem_˘r
[] = {

28 { 0x1022, 0x1100, 1,
ch™ge_timög_amd64
},

31 { 0x10de, 0x01E0, 0,
ch™ge_timög_nf2
},

34 { 0x8086, 0x2570, 0,
ch™ge_timög_i875
},

35 { 0x8086, 0x2578, 0,
ch™ge_timög_i875
},

36 { 0x8086, 0x2580, 0,
ch™ge_timög_i925
},

37 { 0x8086, 0x2584, 0,
ch™ge_timög_i925
},

38 { 0x8086, 0x2770, 0,
ch™ge_timög_i925
},

39 { 0x8086, 0x3580, 0,
ch™ge_timög_i852
},

42 
	sdrc
 {

43 
	mt_rwt
;

44 
	mt_wπ
;

45 
	mt_ªf
;

46 
	mt_í2t
;

47 
	mt_rwqb
;

48 
	mt_r˘
;

49 
	mt_ºd
;

50 
	mt_wr
;

53 
drc

	ga64
;

55 
	$föd_mem˘r
()

57 
víd‹
;

58 
devi˚
;

59 
a64
;

60 
i
= 0;

61 
ªsu…
;

63
ªsu…
 =
	`pci_c⁄f_ªad
(0, 0, 0,
PCI_VENDOR_ID
, 2, &
víd‹
);

64
ªsu…
 =
	`pci_c⁄f_ªad
(0, 0, 0,
PCI_DEVICE_ID
, 2, &
devi˚
);

66
	`pci_c⁄f_ªad
(0, 24, 0, 0x00, 4, &
a64
);

68 if–
a64
 == 0x11001022) {

69
˘æ
 = 0;

73 i‡(
ªsu…
 == 0) {

74 
i
 = 1; i < (
mem_˘r
)/(mem_ctr[0]); i++) {

75 i‡((
mem_˘r
[
i
].
víd‹
 == vendor) &&

76 (
mem_˘r
[
i
].
devi˚
 == device))

78
˘æ
 =
i
;

83
˘æ
 = -1;

84
	}
}

86 
	$a64_∑ømëî
()

89
ul⁄g

dømér
;

91 i‡–0 =
	`pci_c⁄f_ªad
(0, 24, 2, 0x88, 4, &
dømér
) )

93
a64
.
t_r˘
 = 7 + ((
dømér
>>4) & 0x0F);

94
a64
.
t_ºd
 = 0 + ((
dømér
>>16) & 0x7);

95
a64
.
t_wr
 = 2 + ((
dømér
>>28) & 0x1);

98 i‡–0 =
	`pci_c⁄f_ªad
(0, 24, 2, 0x8C, 4, &
dømér
) )

100
a64
.
t_rwt
 = 1 + ((
dømér
>>4) & 0x07);

101
a64
.
t_wπ
 = 1 + (
dømér
 & 0x1);

102
a64
.
t_ªf
 = 1 + ((
dømér
>>11) & 0x3);

105 i‡–0 =
	`pci_c⁄f_ªad
(0, 24, 2, 0x90, 4, &
dømér
) )

107
a64
.
t_í2t
 = 1 + ((
dømér
>>28) & 0x1);

108
a64
.
t_rwqb
 = 2 << ((
dømér
>>14) & 0x3);

110
	}
}

114 
	$ch™ge_timög
(
ˇs
, 
rcd
, 
Ω
, 
øs
)

116
	`föd_mem˘r
();

117 i‡((
˘æ
 =-1Ë|| ( cå»> (
mem_˘r
)/(mem_ctr[0])))

122
mem_˘r
[
˘æ
].
	`ch™ge_timög
(
ˇs
,
rcd
,
Ω
,
øs
);

123
	`ª°¨t
();

124
	}
}

126 
	$amd64_›ti⁄
()

128 
rwt
=0,
wπ
=0,
ªf
=0,
í2t
=0,
r˘
=0,
ºd
=0,
rwqb
=0,
wr
 = 0,
Êag
=0;

130 i‡((
˘æ
 =-1Ë|| ( cå»> (
mem_˘r
)/(mem_ctr[0])))

135 i‡(
mem_˘r
[
˘æ
].
w‹ked
)

137
	`a64_∑ømëî
();

138
	`˝röt
(
POP_Y
+1,
POP_X
+4, "AMD64 options");

140
	`˝röt
(
POP_Y
+3,
POP_X
+4, "(1) Rd-Wr Delay : ");

141
	`d¥öt
(
POP_Y
+3,
POP_X
+24,
a64
.
t_rwt
, 2, 0);

143
	`˝röt
(
POP_Y
+4,
POP_X
+4, "(2) Wr-Rd Delay : ");

144
	`d¥öt
(
POP_Y
+4,
POP_X
+24,
a64
.
t_wπ
, 2, 0);

146
	`˝röt
(
POP_Y
+5,
POP_X
+4, "(3) Rd/Wr Bypass : ");

147
	`d¥öt
(
POP_Y
+5,
POP_X
+24,
a64
.
t_rwqb
, 2, 0);

149
	`˝röt
(
POP_Y
+6,
POP_X
+4, "(4) Refresh Rate : ");

150 
a64
.
t_ªf
)

152 1 :
	`˝röt
(
POP_Y
+6,
POP_X
+23, "15.6us"); ;

153 2 :
	`˝röt
(
POP_Y
+6,
POP_X
+23, " 7.8us"); ;

154 3 :
	`˝röt
(
POP_Y
+6,
POP_X
+23, " 3.9us"); ;

156
	`˝röt
(
POP_Y
+7,
POP_X
+4, "(5) Command Rate :");

157
	`d¥öt
(
POP_Y
+7,
POP_X
+24,
a64
.
t_í2t
, 2, 0);

158
	`˝röt
(
POP_Y
+7,
POP_X
+26, "T ");

160
	`˝röt
(
POP_Y
+8,
POP_X
+4, "(6) Row Cycle Time: ");

161
	`d¥öt
(
POP_Y
+8,
POP_X
+24,
a64
.
t_r˘
, 2, 0);

163
	`˝röt
(
POP_Y
+9,
POP_X
+4, "(7) RAS-RAS Delay : ");

164
	`d¥öt
(
POP_Y
+9,
POP_X
+24,
a64
.
t_ºd
, 2, 0);

166
	`˝röt
(
POP_Y
+10,
POP_X
+4, "(8) Write Recovery: ");

167
	`d¥öt
(
POP_Y
+10,
POP_X
+24,
a64
.
t_wr
, 2, 0);

169
	`˝röt
(
POP_Y
+11,
POP_X
+4,"(0) Cancel ");

171 !
Êag
)

173 
	`gë_key
())

176
	`p›˛ór
();

178
	`˝röt
(
POP_Y
+3,
POP_X
+4, "Rd-Wr delay ");

179
	`˝röt
(
POP_Y
+4,
POP_X
+4, " (2 - 6 cycles)");

180
	`˝röt
(
POP_Y
+5,
POP_X
+4, "Current: ");

181
	`d¥öt
(
POP_Y
+5,
POP_X
+14,
a64
.
t_rwt
, 4, 0);

182
	`˝röt
(
POP_Y
+7,
POP_X
+4, "New: ");

183
rwt
 =
	`gëvÆ
(
POP_Y
+7,
POP_X
+12, 0);

184
	`amd64_twók
(
rwt
,
wπ
,
ªf
,
í2t
,
r˘
,
ºd
,
rwqb
,
wr
);

188
	`p›˛ór
();

190
	`˝röt
(
POP_Y
+3,
POP_X
+4, "Wr-Rd delay ");

191
	`˝röt
(
POP_Y
+4,
POP_X
+4, " (1 - 2 cycles)");

192
	`˝röt
(
POP_Y
+5,
POP_X
+4, "Current: ");

193
	`d¥öt
(
POP_Y
+5,
POP_X
+14,
a64
.
t_wπ
, 4, 0);

194
	`˝röt
(
POP_Y
+7,
POP_X
+4, "New: ");

195
wπ
 =
	`gëvÆ
(
POP_Y
+7,
POP_X
+12, 0);

196
	`amd64_twók
(
rwt
,
wπ
,
ªf
,
í2t
,
r˘
,
ºd
,
rwqb
,
wr
);

200
	`p›˛ór
();

202
	`˝röt
(
POP_Y
+3,
POP_X
+4, "Rd/Wr bypass ");

203
	`˝röt
(
POP_Y
+4,
POP_X
+4, " (2, 4 or 8 )");

204
	`˝röt
(
POP_Y
+5,
POP_X
+4, "Current: ");

205
	`d¥öt
(
POP_Y
+5,
POP_X
+14,
a64
.
t_rwqb
, 2, 0);

206
	`˝röt
(
POP_Y
+7,
POP_X
+4, "New: ");

207
rwqb
 =
	`gëvÆ
(
POP_Y
+7,
POP_X
+11, 0);

208
	`amd64_twók
(
rwt
,
wπ
,
ªf
,
í2t
,
r˘
,
ºd
,
rwqb
,
wr
);

212
	`p›˛ór
();

214
	`˝röt
(
POP_Y
+3,
POP_X
+4, "RefreshÑate ");

215
	`˝röt
(
POP_Y
+4,
POP_X
+4, "Current: ");

216 
a64
.
t_ªf
){

217 1 :
	`˝röt
(
POP_Y
+4,
POP_X
+14, "15.6us"); ;

218 2 :
	`˝röt
(
POP_Y
+4,
POP_X
+14, "7.8us "); ;

219 3 :
	`˝röt
(
POP_Y
+4,
POP_X
+14, "3.9us "); ;

221
	`˝röt
(
POP_Y
+6,
POP_X
+4, "New: ");

222
	`˝röt
(
POP_Y
+7,
POP_X
+4, "(1) 15.6us");

223
	`˝röt
(
POP_Y
+8,
POP_X
+4, "(2) 7.8us ");

224
	`˝röt
(
POP_Y
+9,
POP_X
+4, "(3) 3.9us ");

225
ªf
 =
	`gëvÆ
(
POP_Y
+6,
POP_X
+11, 0);

226
	`amd64_twók
(
rwt
,
wπ
,
ªf
,
í2t
,
r˘
,
ºd
,
rwqb
,
wr
);

230
	`p›˛ór
();

232
	`˝röt
(
POP_Y
+3,
POP_X
+4, "CommandÑate:");

233
	`˝röt
(
POP_Y
+5,
POP_X
+4, "(1) 1T ");

234
	`˝röt
(
POP_Y
+6,
POP_X
+4, "(2) 2T ");

235
í2t
 =
	`gëvÆ
(
POP_Y
+3,
POP_X
+22, 0);

236
	`amd64_twók
(
rwt
,
wπ
,
ªf
,
í2t
,
r˘
,
ºd
,
rwqb
,
wr
);

240
	`p›˛ór
();

242
	`˝röt
(
POP_Y
+3,
POP_X
+4, "Row cycleÅime: ");

243
	`˝röt
(
POP_Y
+4,
POP_X
+4, " (7 - 20 cycles)");

244
	`˝röt
(
POP_Y
+5,
POP_X
+4, "Current: ");

245
	`d¥öt
(
POP_Y
+5,
POP_X
+14,
a64
.
t_r˘
, 4, 0);

246
	`˝röt
(
POP_Y
+7,
POP_X
+4, "New: ");

247
r˘
 =
	`gëvÆ
(
POP_Y
+7,
POP_X
+12, 0);

248
	`amd64_twók
(
rwt
,
wπ
,
ªf
,
í2t
,
r˘
,
ºd
,
rwqb
,
wr
);

252
	`p›˛ór
();

254
	`˝röt
(
POP_Y
+3,
POP_X
+4, "RAS-RAS Delay: ");

255
	`˝röt
(
POP_Y
+4,
POP_X
+4, " (2 - 4 cycles)");

256
	`˝röt
(
POP_Y
+5,
POP_X
+4, "Current: ");

257
	`d¥öt
(
POP_Y
+5,
POP_X
+14,
a64
.
t_ºd
, 2, 0);

258
	`˝röt
(
POP_Y
+7,
POP_X
+4, "New: ");

259
ºd
 =
	`gëvÆ
(
POP_Y
+7,
POP_X
+12, 0);

260
	`amd64_twók
(
rwt
,
wπ
,
ªf
,
í2t
,
r˘
,
ºd
,
rwqb
,
wr
);

264
	`p›˛ór
();

266
	`˝röt
(
POP_Y
+3,
POP_X
+4, "Write Recovery: ");

267
	`˝röt
(
POP_Y
+4,
POP_X
+4, " (2 - 3 cycles)");

268
	`˝röt
(
POP_Y
+5,
POP_X
+4, "Current: ");

269
	`d¥öt
(
POP_Y
+5,
POP_X
+14,
a64
.
t_wr
, 2, 0);

270
	`˝röt
(
POP_Y
+7,
POP_X
+4, "New: ");

271
wr
 =
	`gëvÆ
(
POP_Y
+7,
POP_X
+12, 0);

272
	`amd64_twók
(
rwt
,
wπ
,
ªf
,
í2t
,
r˘
,
ºd
,
rwqb
,
wr
);

277
Êag
++;

283
	}
}

285 
	$gë_›ti⁄
()

287 
ˇs
 =0,
Ω
=0,
rcd
=0,
øs
=0,
sÊag
 = 0 ;

289 !
sÊag
)

291 
	`gë_key
())

294
	`p›˛ór
();

295
ˇs
 =
	`gë_ˇs
();

296
	`p›˛ór
();

298
	`˝röt
(
POP_Y
+3,
POP_X
+8, "tRCD: ");

299
rcd
 =
	`gëvÆ
(
POP_Y
+3,
POP_X
+15, 0);

300
	`p›˛ór
();

302
	`˝röt
(
POP_Y
+3,
POP_X
+8, "tRP: ");

303
Ω
 =
	`gëvÆ
(
POP_Y
+3,
POP_X
+15, 0);

304
	`p›˛ór
();

306
	`˝röt
(
POP_Y
+3,
POP_X
+8, "tRAS: ");

307
øs
 =
	`gëvÆ
(
POP_Y
+3,
POP_X
+15, 0);

308
	`p›˛ór
();

309
	`ch™ge_timög
(
ˇs
,
rcd
,
Ω
,
øs
);

313
	`p›˛ór
();

314
ˇs
 =
	`gë_ˇs
();

315
	`ch™ge_timög
(
ˇs
, 0, 0, 0);

316
sÊag
++;

320
	`p›˛ór
();

321
	`˝röt
(
POP_Y
+3,
POP_X
+8, "tRCD: ");

322
rcd
 =
	`gëvÆ
(
POP_Y
+3,
POP_X
+15, 0);

323
	`ch™ge_timög
(0,
rcd
, 0, 0);

324
sÊag
++;

328
	`p›˛ór
();

329
	`˝röt
(
POP_Y
+3,
POP_X
+8, "tRP: ");

330
Ω
 =
	`gëvÆ
(
POP_Y
+3,
POP_X
+15, 0);

331
	`ch™ge_timög
(0, 0,
Ω
, 0);

332
sÊag
++;

336
	`p›˛ór
();

337
	`˝röt
(
POP_Y
+3,
POP_X
+8, "tRAS: ");

338
øs
 =
	`gëvÆ
(
POP_Y
+3,
POP_X
+15, 0);

339
	`ch™ge_timög
(0, 0, 0,
øs
);

340
sÊag
++;

344
	`p›˛ór
();

345
	`amd64_›ti⁄
();

346
sÊag
++;

347
	`p›˛ór
();

355
sÊag
++;

360
	}
}

362 
	$gë_›ti⁄_1
()

364 
Ω
=0,
rcd
=0,
øs
=0,
sÊag
 = 0 ;

366 !
sÊag
)

368 
	`gë_key
())

371
	`p›˛ór
();

372
	`˝röt
(
POP_Y
+3,
POP_X
+8, "tRCD: ");

373
rcd
 =
	`gëvÆ
(
POP_Y
+3,
POP_X
+15, 0);

374
	`p›˛ór
();

376
	`˝röt
(
POP_Y
+3,
POP_X
+8, "tRP: ");

377
Ω
 =
	`gëvÆ
(
POP_Y
+3,
POP_X
+15, 0);

378
	`p›˛ór
();

380
	`˝röt
(
POP_Y
+3,
POP_X
+8, "tRAS: ");

381
øs
 =
	`gëvÆ
(
POP_Y
+3,
POP_X
+15, 0);

382
	`p›˛ór
();

383
	`ch™ge_timög
(0,
rcd
,
Ω
,
øs
);

387
	`p›˛ór
();

388
	`˝röt
(
POP_Y
+3,
POP_X
+8, "tRCD: ");

389
rcd
 =
	`gëvÆ
(
POP_Y
+3,
POP_X
+15, 0);

390
	`ch™ge_timög
(0,
rcd
, 0, 0);

394
	`p›˛ór
();

395
	`˝röt
(
POP_Y
+3,
POP_X
+8, "tRP: ");

396
Ω
 =
	`gëvÆ
(
POP_Y
+3,
POP_X
+15, 0);

397
	`ch™ge_timög
(0, 0,
Ω
, 0);

401
	`p›˛ór
();

402
	`˝röt
(
POP_Y
+3,
POP_X
+8, "tRAS: ");

403
øs
 =
	`gëvÆ
(
POP_Y
+3,
POP_X
+15, 0);

404
	`ch™ge_timög
(0, 0, 0,
øs
);

408
	`p›˛ór
();

409
	`amd64_›ti⁄
();

410
sÊag
++;

411
	`p›˛ór
();

419
sÊag
++;

424
	}
}

427 
	$gë_míu
()

429 
míu
 ;

431
	`föd_mem˘r
();

432
	`dis˛aimî
();

434 
˘æ
)

436 0:
míu
 = 2; ;

440 4:
míu
 = 0; ;

441 5:
míu
 = 1; ;

442 6:
míu
 = 0; ;

443 :
míu
 = -1; ;

446 i‡(
míu
 == -1)

448
	`p›˛ór
();

450 i‡(
míu
 == 0)

452
	`˝röt
(
POP_Y
+1,
POP_X
+2, "Modify Timing:");

453
	`˝röt
(
POP_Y
+3,
POP_X
+5, "(1) Modify All ");

454
	`˝röt
(
POP_Y
+4,
POP_X
+5, "(2) ModifyÅCAS ");

455
	`˝röt
(
POP_Y
+5,
POP_X
+5, "(3) ModifyÅRCD ");

456
	`˝röt
(
POP_Y
+6,
POP_X
+5, "(4) ModifyÅRP ");

457
	`˝röt
(
POP_Y
+7,
POP_X
+5, "(5) ModifyÅRAS ");

458
	`˝röt
(
POP_Y
+8,
POP_X
+5, "(0) Cancel");

459
	`waô_keyup
();

460
	`gë_›ti⁄
();

462 i‡(
míu
 == 1)

464
	`˝röt
(
POP_Y
+1,
POP_X
+2, "Modify Timing:");

465
	`˝röt
(
POP_Y
+3,
POP_X
+5, "(1) Modify All ");

466
	`˝röt
(
POP_Y
+4,
POP_X
+5, "(2) ModifyÅRCD ");

467
	`˝röt
(
POP_Y
+5,
POP_X
+5, "(3) ModifyÅRP ");

468
	`˝röt
(
POP_Y
+6,
POP_X
+5, "(4) ModifyÅRAS ");

469
	`˝röt
(
POP_Y
+7,
POP_X
+5, "(0) Cancel");

470
	`waô_keyup
();

471
	`gë_›ti⁄
();

475
	`˝röt
(
POP_Y
+1,
POP_X
+2, "Modify Timing:");

476
	`˝röt
(
POP_Y
+3,
POP_X
+5, "(1) Modify All ");

477
	`˝röt
(
POP_Y
+4,
POP_X
+5, "(2) ModifyÅRCD ");

478
	`˝röt
(
POP_Y
+5,
POP_X
+5, "(3) ModifyÅRP ");

479
	`˝röt
(
POP_Y
+6,
POP_X
+5, "(4) ModifyÅRAS ");

480
	`˝röt
(
POP_Y
+7,
POP_X
+5, "(5) AMD64 Options");

481
	`˝röt
(
POP_Y
+8,
POP_X
+5, "(0) Cancel");

482
	`waô_keyup
();

483
	`gë_›ti⁄_1
();

485
	}
}

487 
	$gë_ˇs
()

489 
i852
=0,
ˇs
=0;

490
ul⁄g

drc
,
ddr
;

491 *
±r
;

493 
˘æ
)

495 0:
ddr
 = 1; ;

498 3:
ddr
 = 1; ;

500
	`pci_c⁄f_ªad
–0, 0, 0, 0x44, 4, &
ddr
);

501
ddr
 &= 0xFFFFC000;

502
±r
=(*)(
ddr
+0x120);

503
drc
 = *
±r
;

505 i‡((
drc
 & 3Ë=2Ë
ddr
 = 2;

506 
ddr
 = 1;

508 5:
ddr
 = 2; ;

509 6:
ddr
 = 1;
i852
 = 1; ;

510 :
ddr
 = 1;

513 i‡(
ddr
 == 1)

515
	`˝röt
(
POP_Y
+3,
POP_X
+8, "tCAS: ");

516
	`˝röt
(
POP_Y
+5,
POP_X
+8, "(1) CAS 2.5 ");

517
	`˝röt
(
POP_Y
+6,
POP_X
+8, "(2) CAS 2 ");

518 if(!
i852
) {

519
	`˝röt
(
POP_Y
+7,
POP_X
+8, "(3) CAS 3 ");

521
ˇs
 =
	`gëvÆ
(
POP_Y
+3,
POP_X
+15, 0);

523 i‡(
ddr
 == 2)

525
	`˝röt
(
POP_Y
+3,
POP_X
+8, "tCAS: ");

526
	`˝röt
(
POP_Y
+5,
POP_X
+8, "(1) CAS 4 ");

527
	`˝röt
(
POP_Y
+6,
POP_X
+8, "(2) CAS 3 ");

528
	`˝röt
(
POP_Y
+7,
POP_X
+8, "(3) CAS 5 ");

529
ˇs
 =
	`gëvÆ
(
POP_Y
+3,
POP_X
+15, 0);

533
ˇs
 = -1;

536
	`p›˛ór
();

537  (
ˇs
);

538
	}
}

540 
	$dis˛aimî
()

542 i‡((
˘æ
 =-1Ë|| ( cå»> (
mem_˘r
)/(mem_ctr[0])))

544
	`p›˛ór
();

545
	`waô_keyup
();

546
	`˝röt
(
POP_Y
+3,
POP_X
+4, " Chipset ");

547
	`˝röt
(
POP_Y
+4,
POP_X
+4, "Not supported !");

548
	`gë_key
();

549
	`waô_keyup
();

550
	`p›˛ór
();

552 i‡(
˛aim
 == 0)

554
ul⁄g

j
 = 0;

556 
j
<500000)

558
	`˝röt
(
POP_Y
+1,
POP_X
+3, "Disclaimer : ");

559
	`˝röt
(
POP_Y
+3,
POP_X
+3, "ModifyingÅiming may ");

560
	`˝röt
(
POP_Y
+4,
POP_X
+3, "cause system instability");

561
	`˝röt
(
POP_Y
+5,
POP_X
+3, "proceedát your ownÑisk");

562
j
++;

564
˛aim
 = 1;

565
	`p›˛ór
();

567
	}
}

573 
	$ch™ge_timög_i852
(
ˇs
, 
rcd
, 
Ω
, 
øs
) {

575
ul⁄g

dømér
;

576
ul⁄g

öt1
,
öt2
;

578
	`pci_c⁄f_ªad
(0, 0, 1, 0x60, 4, &
dømér
);

581
öt1
 =
dømér
 & 0xFF9F;

582 i‡(
ˇs
 =2Ë{
öt2
 =
öt1
 ^ 0x20; }

583 i‡(
ˇs
 =1Ë{
öt2
 =
öt1
; }

584 {
öt2
 =
dømér
; }

588
öt1
 =
öt2
 & 0xFFF3;

589 i‡(
rcd
 =2Ë{
öt2
 =
öt1
 ^ 0x8; }

590 i‡(
rcd
 =3Ë{
öt2
 =
öt1
 ^ 0x4; }

591 i‡(
rcd
 =4Ë{
öt2
 =
öt1
; }

596
öt1
 =
öt2
 & 0xFFFC;

597 i‡(
Ω
 =2Ë{
öt2
 =
öt1
 ^ 0x2; }

598 i‡(
Ω
 =3Ë{
öt2
 =
öt1
 ^ 0x1; }

599 i‡(
Ω
 =4Ë{
öt2
 =
öt1
; }

604
öt1
 =
öt2
 & 0xF9FF;

605 i‡(
øs
 =5Ë{
öt2
 =
öt1
 ^ 0x0600; }

606 i‡(
øs
 =6Ë{
öt2
 =
öt1
 ^ 0x0400; }

607 i‡(
øs
 =7Ë{
öt2
 =
öt1
 ^ 0x0200; }

608 i‡(
øs
 =8Ë{
öt2
 =
öt1
; }

611
	`pci_c⁄f_wrôe
(0, 0, 1, 0x60, 4,
öt2
);

612
	`__dñay
(500);

613
	}
}

615 
	$ch™ge_timög_i925
(
ˇs
, 
rcd
, 
Ω
, 
øs
)

617
ul⁄g

öt1
,
dev0
,
ãmp
;

618 *
±r
;

621
	`pci_c⁄f_ªad
–0, 0, 0, 0x44, 4, &
dev0
);

622
dev0
 &= 0xFFFFC000;

624
±r
=(*)(
dev0
+0x114);

625
ãmp
 = *
±r
;

628
öt1
 =
ãmp
 | 0x70;

629 i‡(
rcd
 =2Ë{
ãmp
 =
öt1
 ^ 0x70; }

630 i‡(
rcd
 =3Ë{
ãmp
 =
öt1
 ^ 0x60; }

631 i‡(
rcd
 =4Ë{
ãmp
 =
öt1
 ^ 0x50; }

632 i‡(
rcd
 =5Ë{
ãmp
 =
öt1
 ^ 0x40; }

636
öt1
 =
ãmp
 | 0x7;

637 i‡(
Ω
 =2Ë{
ãmp
 =
öt1
 ^ 0x7; }

638 i‡(
Ω
 =3Ë{
ãmp
 =
öt1
 ^ 0x6; }

639 i‡(
Ω
 =4Ë{
ãmp
 =
öt1
 ^ 0x5; }

640 i‡(
Ω
 =5Ë{
ãmp
 =
öt1
 ^ 0x4; }

643 i‡(
mem_˘r
[
˘æ
].
devi˚
 == 0x2770 )

646
öt1
 =
ãmp
 | 0xF80000;

647 i‡(
øs
 =4Ë{
ãmp
 =
öt1
 ^ 0xD80000; }

648 i‡(
øs
 =5Ë{
ãmp
 =
öt1
 ^ 0xD00000; }

649 i‡(
øs
 =6Ë{
ãmp
 =
öt1
 ^ 0xC80000; }

650 i‡(
øs
 =7Ë{
ãmp
 =
öt1
 ^ 0xC00000; }

651 i‡(
øs
 =8Ë{
ãmp
 =
öt1
 ^ 0xB80000; }

652 i‡(
øs
 =9Ë{
ãmp
 =
öt1
 ^ 0xB00000; }

653 i‡(
øs
 =10Ë{
ãmp
 =
öt1
 ^ 0xA80000; }

654 i‡(
øs
 =11Ë{
ãmp
 =
öt1
 ^ 0xA00000; }

655 i‡(
øs
 =12Ë{
ãmp
 =
öt1
 ^ 0x980000; }

656 i‡(
øs
 =13Ë{
ãmp
 =
öt1
 ^ 0x900000; }

657 i‡(
øs
 =14Ë{
ãmp
 =
öt1
 ^ 0x880000; }

658 i‡(
øs
 =15Ë{
ãmp
 =
öt1
 ^ 0x800000; }

664
öt1
 =
ãmp
 | 0xF00000;

665 i‡(
øs
 =4Ë{
ãmp
 =
öt1
 ^ 0xB00000; }

666 i‡(
øs
 =5Ë{
ãmp
 =
öt1
 ^ 0xA00000; }

667 i‡(
øs
 =6Ë{
ãmp
 =
öt1
 ^ 0x900000; }

668 i‡(
øs
 =7Ë{
ãmp
 =
öt1
 ^ 0x800000; }

669 i‡(
øs
 =8Ë{
ãmp
 =
öt1
 ^ 0x700000; }

670 i‡(
øs
 =9Ë{
ãmp
 =
öt1
 ^ 0x600000; }

671 i‡(
øs
 =10Ë{
ãmp
 =
öt1
 ^ 0x500000; }

672 i‡(
øs
 =11Ë{
ãmp
 =
öt1
 ^ 0x400000; }

673 i‡(
øs
 =12Ë{
ãmp
 =
öt1
 ^ 0x300000; }

674 i‡(
øs
 =13Ë{
ãmp
 =
öt1
 ^ 0x200000; }

675 i‡(
øs
 =14Ë{
ãmp
 =
öt1
 ^ 0x100000; }

676 i‡(
øs
 =15Ë{
ãmp
 =
öt1
 ^ 0x000000; }

681
öt1
 =
ãmp
 | 0x0300;

682 i‡(
ˇs
 =1Ë{
ãmp
 =
öt1
 ^ 0x200; }

683 i‡(
ˇs
 =2Ë{
ãmp
 =
öt1
 ^ 0x100; }

684 i‡(
ˇs
 =3Ë{
ãmp
 =
öt1
 ^ 0x300; }

687 *
±r
 =
ãmp
;

688
	`__dñay
(500);

690
	}
}

692 
	$ch™ge_timög_Lakï‹t
(
ˇs
, 
rcd
, 
Ω
, 
øs
)

694
ul⁄g

öt1
,
dev0
,
ãmp
;

695 *
±r
;

698
	`pci_c⁄f_ªad
–0, 0, 0, 0x44, 4, &
dev0
);

699
dev0
 &= 0xFFFFC000;

701
±r
=(*)(
dev0
+0x114);

702
ãmp
 = *
±r
;

705
öt1
 =
ãmp
 | 0x70;

706 i‡(
rcd
 =2Ë{
ãmp
 =
öt1
 ^ 0x70; }

707 i‡(
rcd
 =3Ë{
ãmp
 =
öt1
 ^ 0x60; }

708 i‡(
rcd
 =4Ë{
ãmp
 =
öt1
 ^ 0x50; }

709 i‡(
rcd
 =5Ë{
ãmp
 =
öt1
 ^ 0x40; }

713
öt1
 =
ãmp
 | 0x7;

714 i‡(
Ω
 =2Ë{
ãmp
 =
öt1
 ^ 0x7; }

715 i‡(
Ω
 =3Ë{
ãmp
 =
öt1
 ^ 0x6; }

716 i‡(
Ω
 =4Ë{
ãmp
 =
öt1
 ^ 0x5; }

717 i‡(
Ω
 =5Ë{
ãmp
 =
öt1
 ^ 0x4; }

722
öt1
 =
ãmp
 | 0x0300;

723 i‡(
ˇs
 =1Ë{
ãmp
 =
öt1
 ^ 0x200; }

724 i‡(
ˇs
 =2Ë{
ãmp
 =
öt1
 ^ 0x100; }

725 i‡(
ˇs
 =3Ë{
ãmp
 =
öt1
 ^ 0x300; }

728 *
±r
 =
ãmp
;

729
	`__dñay
(500);

731
	}
}

733 
	$ch™ge_timög_i875
(
ˇs
, 
rcd
, 
Ω
, 
øs
){

735
ul⁄g

öt1
,
dev6
,
ãmp
;

736 *
±r
;

739
	`pci_c⁄f_ªad
–0, 6, 0, 0x10, 4, &
dev6
);

741
±r
=(*)(
dev6
+0x60);

743
ãmp
 = *
±r
;

746
öt1
 =
ãmp
 | 0xC;

747 i‡(
rcd
 =2Ë{
ãmp
 =
öt1
 ^ 0x4; }

748 i‡(
rcd
 =3Ë{
ãmp
 =
öt1
 ^ 0x8; }

749 i‡(
rcd
 =4Ë{
ãmp
 =
öt1
 ^ 0xC; }

750 i‡(
rcd
 =5Ë{
ãmp
 =
öt1
 ^ 0xC; }

755
öt1
 =
ãmp
 | 0x3;

756 i‡(
Ω
 =2Ë{
ãmp
 =
öt1
 ^ 0x1; }

757 i‡(
Ω
 =3Ë{
ãmp
 =
öt1
 ^ 0x2; }

758 i‡(
Ω
 =4Ë{
ãmp
 =
öt1
 ^ 0x3; }

759 i‡(
Ω
 =5Ë{
ãmp
 =
öt1
 ^ 0x3; }

764
öt1
 =
ãmp
 | 0x380;

765 i‡(
øs
 =5Ë{
ãmp
 =
öt1
 ^ 0x100; }

766 i‡(
øs
 =6Ë{
ãmp
 =
öt1
 ^ 0x180; }

767 i‡(
øs
 =7Ë{
ãmp
 =
öt1
 ^ 0x200; }

768 i‡(
øs
 =8Ë{
ãmp
 =
öt1
 ^ 0x280; }

769 i‡(
øs
 =9Ë{
ãmp
 =
öt1
 ^ 0x300; }

770 i‡(
øs
 =10Ë{
ãmp
 =
öt1
 ^ 0x380; }

774
öt1
 =
ãmp
 | 0x60;

775 i‡(
ˇs
 =1Ë{
ãmp
 =
öt1
 ^ 0x60; }

776 i‡(
ˇs
 =2Ë{
ãmp
 =
öt1
 ^ 0x40; }

777 i‡(
ˇs
 =3Ë{
ãmp
 =
öt1
 ^ 0x20; }

780 *
±r
 =
ãmp
;

781
	`__dñay
(500);

783
	}
}

786 
	$ch™ge_timög_nf2
(
ˇs
, 
rcd
, 
Ω
, 
øs
) {

788
ul⁄g

dømér
,
dømér2
;

789
ul⁄g

öt1
,
öt2
;

791
	`pci_c⁄f_ªad
(0, 0, 1, 0x90, 4, &
dømér
);

792
	`pci_c⁄f_ªad
(0, 0, 1, 0xA0, 4, &
dømér2
);

796
öt1
 =
dømér2
 | 0x0070;

797 i‡(
ˇs
 =1Ë{
öt2
 =
öt1
 ^ 0x10; }

798 i‡(
ˇs
 =2Ë{
öt2
 =
öt1
 ^ 0x50; }

799 i‡(
ˇs
 =3Ë{
öt2
 =
öt1
 ^ 0x40; }

800 {
öt2
 =
dømér2
; }

802
	`pci_c⁄f_wrôe
(0, 0, 1, 0xA0, 4,
öt2
);

806
öt1
 =
dømér
 | 0x700000;

807 i‡(
rcd
 =2Ë{
öt2
 =
öt1
 ^ 0x500000; }

808 i‡(
rcd
 =3Ë{
öt2
 =
öt1
 ^ 0x400000; }

809 i‡(
rcd
 =4Ë{
öt2
 =
öt1
 ^ 0x300000; }

810 i‡(
rcd
 =5Ë{
öt2
 =
öt1
 ^ 0x200000; }

811 i‡(
rcd
 =6Ë{
öt2
 =
öt1
 ^ 0x100000; }

812 {
öt2
 =
dømér
;}

816
öt1
 =
öt2
 | 0x70000000;

817 i‡(
Ω
 =2Ë{
öt2
 =
öt1
 ^ 0x50000000; }

818 i‡(
Ω
 =3Ë{
öt2
 =
öt1
 ^ 0x40000000; }

819 i‡(
Ω
 =4Ë{
öt2
 =
öt1
 ^ 0x30000000; }

820 i‡(
Ω
 =5Ë{
öt2
 =
öt1
 ^ 0x20000000; }

821 i‡(
Ω
 =6Ë{
öt2
 =
öt1
 ^ 0x10000000; }

827
öt1
 =
öt2
 | 0x78000;

828 i‡(
øs
 =4Ë{
öt2
 =
öt1
 ^ 0x58000; }

829 i‡(
øs
 =5Ë{
öt2
 =
öt1
 ^ 0x50000; }

830 i‡(
øs
 =6Ë{
öt2
 =
öt1
 ^ 0x48000; }

831 i‡(
øs
 =7Ë{
öt2
 =
öt1
 ^ 0x40000; }

832 i‡(
øs
 =8Ë{
öt2
 =
öt1
 ^ 0x38000; }

833 i‡(
øs
 =9Ë{
öt2
 =
öt1
 ^ 0x30000; }

834 i‡(
øs
 =10Ë{
öt2
 =
öt1
 ^ 0x28000; }

835 i‡(
øs
 =11Ë{
öt2
 =
öt1
 ^ 0x20000; }

836 i‡(
øs
 =12Ë{
öt2
 =
öt1
 ^ 0x18000; }

837 i‡(
øs
 =13Ë{
öt2
 =
öt1
 ^ 0x10000; }

838 i‡(
øs
 =14Ë{
öt2
 =
öt1
 ^ 0x08000; }

842
	`pci_c⁄f_wrôe
(0, 0, 1, 0x90, 4,
öt2
);

843
	`__dñay
(500);

844
	}
}

847 
	$ch™ge_timög_amd64
(
ˇs
, 
rcd
, 
Ω
, 
øs
) {

849
ul⁄g

dømér
;

850
ul⁄g

öt1
= 0x0;

852
	`pci_c⁄f_ªad
(0, 24, 2, 0x88, 4, &
dømér
);

855
öt1
 =
dømér
 | 0x7000;

856 i‡(
rcd
 =2Ë{
dømér
 =
öt1
 ^ 0x5000; }

857 i‡(
rcd
 =3Ë{
dømér
 =
öt1
 ^ 0x4000; }

858 i‡(
rcd
 =4Ë{
dømér
 =
öt1
 ^ 0x3000; }

859 i‡(
rcd
 =5Ë{
dømér
 =
öt1
 ^ 0x2000; }

860 i‡(
rcd
 =6Ë{
dømér
 =
öt1
 ^ 0x1000; }

861 i‡(
rcd
 =1Ë{
dømér
 =
öt1
 ^ 0x6000; }

866
öt1
 =
dømér
 | 0x7000000;

867 i‡(
Ω
 =2Ë{
dømér
 =
öt1
 ^ 0x5000000; }

868 i‡(
Ω
 =3Ë{
dømér
 =
öt1
 ^ 0x4000000; }

869 i‡(
Ω
 =1Ë{
dømér
 =
öt1
 ^ 0x6000000; }

870 i‡(
Ω
 =4Ë{
dømér
 =
öt1
 ^ 0x3000000; }

871 i‡(
Ω
 =5Ë{
dømér
 =
öt1
 ^ 0x2000000; }

872 i‡(
Ω
 =6Ë{
dømér
 =
öt1
 ^ 0x1000000; }

877
öt1
 =
dømér
 | 0xF00000;

878 i‡(
øs
 =5Ë{
dømér
 =
öt1
 ^ 0xA00000; }

879 i‡(
øs
 =6Ë{
dømér
 =
öt1
 ^ 0x900000; }

880 i‡(
øs
 =7Ë{
dømér
 =
öt1
 ^ 0x800000; }

881 i‡(
øs
 =8Ë{
dømér
 =
öt1
 ^ 0x700000; }

882 i‡(
øs
 =9Ë{
dømér
 =
öt1
 ^ 0x600000; }

883 i‡(
øs
 =10Ë{
dømér
 =
öt1
 ^ 0x500000; }

884 i‡(
øs
 =11Ë{
dømér
 =
öt1
 ^ 0x400000; }

885 i‡(
øs
 =12Ë{
dømér
 =
öt1
 ^ 0x300000; }

886 i‡(
øs
 =13Ë{
dømér
 =
öt1
 ^ 0x200000; }

887 i‡(
øs
 =14Ë{
dømér
 =
öt1
 ^ 0x100000; }

892
öt1
 =
dømér
 | 0x7;

893 i‡(
ˇs
 =1Ë{
dømér
 =
öt1
 ^ 0x2; }

894 i‡(
ˇs
 =2Ë{
dømér
 =
öt1
 ^ 0x6; }

895 i‡(
ˇs
 =3Ë{
dømér
 =
öt1
 ^ 0x5; }

896 i‡(
ˇs
 =4Ë{
dømér
 =
öt1
 ^ 0x7; }

900
	`pci_c⁄f_wrôe
(0, 24, 2, 0x88, 4,
dømér
);

901
	`__dñay
(500);

905
	}
}

908 
	$__dñay
(
ul⁄g

lo›s
)

910 
d0
;

911
__asm__

	`__vﬁ©ûe__
(

917 :"=&a" (
d0
)

918 :"0" (
lo›s
));

919
	}
}

921 
	$amd64_twók
(
rwt
, 
wπ
, 
ªf
, 
í2t
, 
r˘
, 
ºd
, 
rwqb
, 
wr
)

923
ul⁄g

dømér
;

924
ul⁄g

öt1
= 0x0;

926
	`pci_c⁄f_ªad
(0, 24, 2, 0x88, 4, &
dømér
);

929
öt1
 =
dømér
 | 0xF0;

930 i‡(
r˘
 =7 ) {
dømér
 =
öt1
 ^ 0xF0; }

931 i‡(
r˘
 =8 ) {
dømér
 =
öt1
 ^ 0xE0; }

932 i‡(
r˘
 =9 ) {
dømér
 =
öt1
 ^ 0xD0; }

933 i‡(
r˘
 =10Ë{
dømér
 =
öt1
 ^ 0xC0; }

934 i‡(
r˘
 =11Ë{
dømér
 =
öt1
 ^ 0xB0; }

935 i‡(
r˘
 =12Ë{
dømér
 =
öt1
 ^ 0xA0; }

936 i‡(
r˘
 =13Ë{
dømér
 =
öt1
 ^ 0x90; }

937 i‡(
r˘
 =14Ë{
dømér
 =
öt1
 ^ 0x80; }

938 i‡(
r˘
 =15Ë{
dømér
 =
öt1
 ^ 0x70; }

939 i‡(
r˘
 =16Ë{
dømér
 =
öt1
 ^ 0x60; }

940 i‡(
r˘
 =17Ë{
dømér
 =
öt1
 ^ 0x50; }

941 i‡(
r˘
 =18Ë{
dømér
 =
öt1
 ^ 0x40; }

942 i‡(
r˘
 =19Ë{
dømér
 =
öt1
 ^ 0x30; }

943 i‡(
r˘
 =20Ë{
dømér
 =
öt1
 ^ 0x20; }

947
öt1
 =
dømér
 | 0x70000;

948 i‡(
ºd
 =2Ë{
dømér
 =
öt1
 ^ 0x50000; }

949 i‡(
ºd
 =3Ë{
dømér
 =
öt1
 ^ 0x40000; }

950 i‡(
ºd
 =4Ë{
dømér
 =
öt1
 ^ 0x30000; }

954
öt1
 =
dømér
 | 0x10000000;

955 i‡(
wr
 =2Ë{
dømér
 =
öt1
 ^ 0x10000000; }

956 i‡(
wr
 =3Ë{
dømér
 =
öt1
 ^ 0x00000000; }

959
	`pci_c⁄f_wrôe
(0, 24, 2, 0x88, 4,
dømér
);

960
	`__dñay
(500);

963
	`pci_c⁄f_ªad
(0, 24, 2, 0x8C, 4, &
dømér
);

966
öt1
 =
dømér
 | 0x1;

967 i‡(
wπ
 =2Ë{
dømér
 =
öt1
 ^ 0x0; }

968 i‡(
wπ
 =1Ë{
dømér
 =
öt1
 ^ 0x1; }

972
öt1
 =
dømér
 | 0x70;

973 i‡(
rwt
 =1Ë{
dømér
 =
öt1
 ^ 0x70; }

974 i‡(
rwt
 =2Ë{
dømér
 =
öt1
 ^ 0x60; }

975 i‡(
rwt
 =3Ë{
dømér
 =
öt1
 ^ 0x50; }

976 i‡(
rwt
 =4Ë{
dømér
 =
öt1
 ^ 0x40; }

977 i‡(
rwt
 =5Ë{
dømér
 =
öt1
 ^ 0x30; }

978 i‡(
rwt
 =6Ë{
dømér
 =
öt1
 ^ 0x20; }

982
öt1
 =
dømér
 | 0x1800;

983 i‡(
ªf
 =1Ë{
dømér
 =
öt1
 ^ 0x1800; }

984 i‡(
ªf
 =2Ë{
dømér
 =
öt1
 ^ 0x1000; }

985 i‡(
ªf
 =3Ë{
dømér
 =
öt1
 ^ 0x0800; }

988
	`pci_c⁄f_wrôe
(0, 24, 2, 0x8c, 4,
dømér
);

989
	`__dñay
(500);

992
	`pci_c⁄f_ªad
(0, 24, 2, 0x90, 4, &
dømér
);

995
öt1
 =
dømér
 | 0x10000000;

996 i‡(
í2t
 =2Ë{
dømér
 =
öt1
 ^ 0x00000000; }

997 i‡(
í2t
 =1Ë{
dømér
 =
öt1
 ^ 0x10000000; }

1001
öt1
 =
dømér
 | 0xC000;

1002 i‡(
rwqb
 =2Ë{
dømér
 =
öt1
 ^ 0xC000; }

1003 i‡(
rwqb
 =4Ë{
dømér
 =
öt1
 ^ 0x8000; }

1004 i‡(
rwqb
 =8Ë{
dømér
 =
öt1
 ^ 0x4000; }

1005 i‡(
rwqb
 =16Ë{
dømér
 =
öt1
 ^ 0x0000; }

1008
	`pci_c⁄f_wrôe
(0, 24, 2, 0x90, 4,
dømér
);

1009
	`__dñay
(500);

1010
	`ª°¨t
();

1011
	}
}

	@extra.h

9 #i‚de‡
MEMTEST_EXTRA_H


10 
	#MEMTEST_EXTRA_H


	)

12 
ch™ge_timög
(
ˇs
, 
rcd
, 
Ω
, 
øs
);

13 
föd_mem˘r
();

14 
dis˛aimî
();

15 
gë_›ti⁄
();

16 
gë_míu
();

17 
a64_∑ømëî
();

18 
gë_ˇs
();

19 
ch™ge_timög_i852
(
ˇs
, 
rcd
, 
Ω
, 
øs
);

20 
ch™ge_timög_i925
(
ˇs
, 
rcd
, 
Ω
, 
øs
);

21 
ch™ge_timög_i875
(
ˇs
, 
rcd
, 
Ω
, 
øs
);

22 
ch™ge_timög_nf2
(
ˇs
, 
rcd
, 
Ω
, 
øs
);

23 
ch™ge_timög_amd64
(
ˇs
, 
rcd
, 
Ω
, 
øs
);

24 
amd64_twók
(
rwt
, 
wπ
, 
ªf
, 
í2t
, 
r˘
, 
ºd
, 
rwqb
, 
wr
);

25 
__dñay
(
ul⁄g

lo›s
);

	@init.c

11 
	~"ã°.h
"

12 
	~"defs.h
"

13 
	~"c⁄fig.h
"

14 
	~"c⁄åﬁÀr.h
"

15 
	~"pci.h
"

16 
	~"io.h
"

17 
	~"•d.h
"

19 
	#rdm§
(
m§
,
vÆ1
,
vÆ2
) \

20
__asm__

	`__vﬁ©ûe__
("rdmsr" \

21 : "˜" (
vÆ1
), "=d" (
vÆ2
) \

22 : "c" (
m§
))

	)

24 
t£q
Åseq[];

25 
memsz_mode
;

26 
fúmw¨e
;

27 
dmi_öôülized
;

28 
dmi_îr_˙ts
[
MAX_DMI_MEMDEVS
];

30 
˝u_idít

	g˝u_id
;

31
ul⁄g

	g°_low
,
	g°_high
;

32
ul⁄g

	gíd_low
,
	gíd_high
;

33
ul⁄g

	gˇl_low
,
	gˇl_high
;

34
ul⁄g

	gext˛ock
;

35 
	gimc_ty≥
 = 0;

37 
	gl1_ˇche
,
	gl2_ˇche
,
	gl3_ˇche
;

38 
	gtsc_öv¨übÀ
 = 0;

40
ul⁄g

mem•ìd
(ul⁄g
§c
, ul⁄g
Àn
, 
ôî
, 
ty≥
);

41 
˝u_ty≥
();

42 
ˇchóbÀ
();

43 
˝u•ìd
();

44 
	gbìpmode
,
	gÁû_ß„
;

48 
	$Áûß„
(
m£c
, 
scs
)

50 
ù
;

51
ul⁄g

sh
,
¶
,
l
,
h
,
t
;

52 
c
;

54
	`˝röt
(18, 22, "Press *F1*ÅoÉnter Fail-Safe Mode");

56
ù
 = 0;

58
asm

	`__vﬁ©ûe__
(

59 "rdtsc":"˜" (
¶
),"=d" (
sh
));

63
asm

	`__vﬁ©ûe__
(

64 "rdtsc":"˜" (
l
),"=d" (
h
));

65
asm

	`__vﬁ©ûe__
 (

68 :"˜" (
l
), "=d" (
h
)

69 :"g" (
¶
), "g" (
sh
),

70 "0" (
l
), "1" (
h
));

72
t
 =
h
 * (()0xfffffff‡/
v
->
˛ks_m£c
);

73
t
 +(
l
 /
v
->
˛ks_m£c
);

76 i‡(
t
 >
m£c
) {

77
	`˝röt
(18, 22, " ");

82
c
 =
	`gë_key
();

83
c
 &= 0x7f;

85 if(
c
 =
scs
) {

86
Áû_ß„
 = 1;

87
	`˝röt
(18, 22, " ");

91
	}
}

93 
	$di•œy_öô
()

95 
i
;

96 vﬁ©ûê*
µ
;

98
	`£rül_echo_öô
();

99
	`£rül_echo_¥öt
("\x1B[LINE_SCROLL;24r");

100
	`£rül_echo_¥öt
("\x1B[H\x1B[2J");

101
	`£rül_echo_¥öt
("\x1B[37m\x1B[44m");

102
	`£rül_echo_¥öt
("\x1B[0m");

103
	`£rül_echo_¥öt
("\x1B[37m\x1B[44m");

106 
i
=0,
µ
=(*)(
SCREEN_ADR
); i<80*24; i++) {

107 *
µ
++ = ' ';

108 *
µ
++ = 0x17;

112 
i
=0,
µ
=(*)(
SCREEN_ADR
+1); i<
TITLE_WIDTH
; i++,Öp+=2) {

113 *
µ
 = 0x20;

115
	`˝röt
(0, 0, " Memtest86 v4.20 ");

117 
i
=0,
µ
=(*)(
SCREEN_ADR
+1); i<2; i++,Öp+=30) {

118 *
µ
 = 0xA4;

120
	`˝röt
(0, 15, "+");

123 
i
=0,
µ
=(*)(
SCREEN_ADR
+1+(24 * 160)); i<80; i++,Öp+=2) {

124 *
µ
 = 0x71;

127
	`£rül_echo_¥öt
("\x1B[0m");

128
	}
}

133 
	$öô
()

135 
i
;

137
	`outb
(0x8, 0x3f2);

140
	`£t_ˇche
(1);

143
	`di•œy_öô
();

147 i‡((
fúmw¨e
 =
FIRMWARE_UNKNOWN
) &&

148 (
memsz_mode
 !
SZ_MODE_PROBE
)) {

149 i‡(
	`quîy_löuxbios
()) {

150
fúmw¨e
 =
FIRMWARE_LINUXBIOS
;

152 i‡(
	`quîy_pcbios
()) {

153
fúmw¨e
 =
FIRMWARE_PCBIOS
;

157
	`mem_size
();

160
	`pci_öô
();

163
bìpmode
 =
BEEP_MODE
;

165
v
->
ã°
 = 0;

166
v
->
∑ss
 = 0;

167
v
->
msg_löe
 = 0;

168
v
->
ecou¡
 = 0;

169
v
->
ecc_ecou¡
 = 0;

170
v
->
ã°£l
 = -1;

171
v
->
msg_löe
 =
LINE_SCROLL
-1;

172
v
->
s¸ﬁl_°¨t
 = v->
msg_löe
 * 160;

173
v
->
îri
.
low_addr
.
∑ge
 = 0x7fffffff;

174
v
->
îri
.
low_addr
.
off£t
 = 0xfff;

175
v
->
îri
.
high_addr
.
∑ge
 = 0;

176
v
->
îri
.
high_addr
.
off£t
 = 0;

177
v
->
îri
.
mö_bôs
 = 32;

178
v
->
îri
.
max_bôs
 = 0;

179
v
->
îri
.
mö_bôs
 = 32;

180
v
->
îri
.
max_bôs
 = 0;

181
v
->
îri
.
maxl
 = 0;

182
v
->
îri
.
c‹_îr
 = 0;

183
v
->
îri
.
ebôs
 = 0;

184
v
->
îri
.
hdr_Êag
 = 0;

185
v
->
îri
.
tbôs
 = 0;

186 
i
=0;
t£q
[i].
msg
 != 0; i++) {

187
t£q
[
i
].
îr‹s
 = 0;

189 i‡(
dmi_öôülized
) {

190 
i
=0; i <
MAX_DMI_MEMDEVS
; i++){

191 i‡(
dmi_îr_˙ts
[
i
] > 0) {

192
dmi_îr_˙ts
[
i
] = 0;

197
	`˝röt
(
LINE_CPU
+1, 0, "L1 Cache: Unknown ");

198
	`˝röt
(
LINE_CPU
+2, 0, "L2 Cache: Unknown ");

199
	`˝röt
(
LINE_CPU
+3, 0, "L3 Cache: None ");

200
	`˝röt
(
LINE_CPU
+4, 0, "Memory : |-------------------------------------------------");

201
	`≠röt
(
LINE_CPU
+4, 10,
v
->
ã°_∑ges
);

202
	`˝röt
(
LINE_CPU
+5, 0, "Chipset : ");

204
	`˝u_ty≥
();

207
	`Áûß„
(2000, 0x3B);

210
	`föd_c⁄åﬁÀr
();

213 if(
Áû_ß„
 =0Ë{
	`gë_•d_•ec
(); }

215 i‡(
v
->
rdtsc
) {

216
	`ˇchóbÀ
();

217
	`˝röt
(
LINE_TIME
,
COL_TIME
+4, ": :");

219
	`˝röt
(0,
COL_MID
,"Pass %");

220
	`˝röt
(1,
COL_MID
,"Test %");

221
	`˝röt
(2,
COL_MID
,"Test #");

222
	`˝röt
(3,
COL_MID
,"Testing: ");

223
	`˝röt
(4,
COL_MID
,"Pattern: ");

224
	`˝röt
(
LINE_INFO
-2, 0, " WallTime Cached RsvdMem MemMap Cache ECC Test Pass Errors ECC Errs");

225
	`˝röt
(
LINE_INFO
-1, 0, " --------- ------ ------- -------- ----- --- ---- ---- ------ --------");

226
	`˝röt
(
LINE_INFO
,
COL_TST
, " Std");

227
	`˝röt
(
LINE_INFO
,
COL_PASS
, " 0");

228
	`˝röt
(
LINE_INFO
,
COL_ERR
, " 0");

229
	`˝röt
(
LINE_INFO
+1, 0, " -----------------------------------------------------------------------------");

232 
i
=0; i < 5; i++) {

233
	`˝röt
(
i
,
COL_MID
-2, "| ");

235
	`foŸî
();

238
v
->
¥ötmode
=
PRINTMODE_ADDRESSES
;

239
v
->
num∑ä
=0;

241
	}
}

243 
	#FLAT
 0

	)

245 
	gm≠≥d_wödow
 = 1;

246 
	$∑gög_off
()

248 i‡(!
v
->
∑e
)

250
m≠≥d_wödow
 = 1;

251
__asm__

	`__vﬁ©ûe__
 (

264
	}
}

266 
	$∑gög_⁄
(*
pdp
)

268 i‡(!
v
->
∑e
)

270
__asm__

	`__vﬁ©ûe__
(

282 : "r" (
pdp
)

285
	}
}

287 
	$m≠_∑ge
(
∑ge
)

289 
i
;

290 
	spde
 {

291 
addr_lo
;

292 
addr_hi
;

294 
pdp
[];

295 
pde

pd2
[];

296 
wödow
 =
∑ge
 >> 19;

297 i‡(
FLAT
 || (
wödow
 =
m≠≥d_wödow
)) {

300 i‡(
wödow
 == 0) {

303 i‡(!
v
->
∑e
 || (
wödow
 >= 32)) {

311 
i
 = 0; i < 1024; i++) {

323
pd2
[
i
].
addr_lo
 = ((
wödow
 & 1) << 31) + ((i & 0x3ff) << 21) + 0xE3;

324
pd2
[
i
].
addr_hi
 = (
wödow
 >> 1);

326
	`∑gög_off
();

327 i‡(
wödow
 > 1) {

328
	`∑gög_⁄
(
pdp
);

330
m≠≥d_wödow
 =
wödow
;

332
	}
}

334 *
	$m≠pög
(
∑ge_addr
)

336 *
ªsu…
;

337 i‡(
FLAT
 || (
∑ge_addr
 < 0x80000)) {

339
ªsu…
 = (*)(
∑ge_addr
 << 12);

342 
Æüs
;

343
Æüs
 =
∑ge_addr
 & 0x7FFFF;

344
Æüs
 += 0x80000;

345
ªsu…
 = (*)(
Æüs
 << 12);

347 
ªsu…
;

348
	}
}

350 *
	$em≠pög
(
∑ge_addr
)

352 *
ªsu…
;

353
ªsu…
 =
	`m≠pög
(
∑ge_addr
 -1);

355
ªsu…
 = ((*)result) + 0xf00;

356 
ªsu…
;

357
	}
}

359 
	$∑ge_of
(*
addr
)

361 
∑ge
;

362
∑ge
 = (()
addr
) >> 12;

363 i‡(!
FLAT
 && (
∑ge
 >= 0x80000)) {

364
∑ge
 &= 0x7FFFF;

365
∑ge
 +
m≠≥d_wödow
 << 19;

368
	`˝röt
(
LINE_SCROLL
 -2, 0, "page_of( )-> ");

369
	`h¥öt
(
LINE_SCROLL
 -2, 8, (()
addr
));

370
	`h¥öt
(
LINE_SCROLL
 -2, 20,
∑ge
);

372 
∑ge
;

373
	}
}

381 
	$˝u_ty≥
()

383 
i
,
off
=0;

384 
l1_ˇche
=0,
l2_ˇche
=0,
l3_ˇche
=0;

385
ul⁄g

•ìd
;

387
v
->
rdtsc
 = 0;

388
v
->
∑e
 = 0;

390 #ifde‡
CPUID_DEBUG


391
	`d¥öt
(9,0,
˝u_id
.
ty≥
,3,1);

392
	`d¥öt
(10,0,
˝u_id
.
modñ
,3,1);

393
	`d¥öt
(11,0,
˝u_id
.
˝uid
,3,1);

398 i‡(
˝u_id
.
˝uid
 < 1) {

399 
˝u_id
.
ty≥
) {

402
i
 =
	`gëCx86
(0xfe);

403
i
 &= 0xf0;

404
i
 >>= 4;

405 
i
) {

408
	`˝röt
(
LINE_CPU
, 0, "Cyrix Cx486");

411
	`˝röt
(
LINE_CPU
, 0,"Cyrix 5x86");

414
	`˝röt
(
LINE_CPU
, 0,"Cyrix 6x86");

417
	`˝röt
(
LINE_CPU
, 0,"Cyrix MediaGX");

420
	`˝röt
(
LINE_CPU
, 0,"Cyrix 6x86MX");

423
	`˝röt
(
LINE_CPU
, 0,"Cyrix MII");

426
	`˝röt
(
LINE_CPU
, 0,"Cyrix ???");

431
	`˝röt
(
LINE_CPU
, 0, "386");

435
	`˝röt
(
LINE_CPU
, 0, "486");

436
l1_ˇche
 = 8;

443 i‡(
˝u_id
.
ˇ∑bûôy
 & (1 <<
X86_FEATURE_PAE
)) {

444
v
->
∑e
 = 1;

446 
˝u_id
.
víd_id
[0]) {

449 
˝u_id
.
ty≥
) {

451 
˝u_id
.
modñ
) {

453
	`˝röt
(
LINE_CPU
, 0, "AMD 486DX2");

456
	`˝röt
(
LINE_CPU
, 0, "AMD 486DX2-WB");

459
	`˝röt
(
LINE_CPU
, 0, "AMD 486DX4");

462
	`˝röt
(
LINE_CPU
, 0, "AMD 486DX4-WB");

465
	`˝röt
(
LINE_CPU
, 0, "AMD 5x86-WT");

471 
˝u_id
.
modñ
) {

476
	`˝röt
(
LINE_CPU
, 0, "AMD K5");

477
l1_ˇche
 = 8;

478
off
 = 6;

482
	`˝röt
(
LINE_CPU
, 0, "AMD K6");

483
off
 = 6;

484
l1_ˇche
 =
˝u_id
.
ˇche_öfo
[3];

485
l1_ˇche
 +
˝u_id
.
ˇche_öfo
[7];

488
	`˝röt
(
LINE_CPU
, 0, "AMD K6-2");

489
off
 = 8;

490
l1_ˇche
 =
˝u_id
.
ˇche_öfo
[3];

491
l1_ˇche
 +
˝u_id
.
ˇche_öfo
[7];

494
	`˝röt
(
LINE_CPU
, 0, "AMD K6-III");

495
off
 = 10;

496
l1_ˇche
 =
˝u_id
.
ˇche_öfo
[3];

497
l1_ˇche
 +
˝u_id
.
ˇche_öfo
[7];

498
l2_ˇche
 = (
˝u_id
.
ˇche_öfo
[11] << 8);

499
l2_ˇche
 +
˝u_id
.
ˇche_öfo
[10];

502
	`˝röt
(
LINE_CPU
, 0, "AMD Geode LX");

503
off
 = 12;

504
l1_ˇche
 =
˝u_id
.
ˇche_öfo
[3];

505
l1_ˇche
 +
˝u_id
.
ˇche_öfo
[7];

506
l2_ˇche
 = (
˝u_id
.
ˇche_öfo
[11] << 8);

507
l2_ˇche
 +
˝u_id
.
ˇche_öfo
[10];

510
	`˝röt
(
LINE_CPU
, 0, "AMD K6-III+");

511
off
 = 11;

512
l1_ˇche
 =
˝u_id
.
ˇche_öfo
[3];

513
l1_ˇche
 +
˝u_id
.
ˇche_öfo
[7];

514
l2_ˇche
 = (
˝u_id
.
ˇche_öfo
[11] << 8);

515
l2_ˇche
 +
˝u_id
.
ˇche_öfo
[10];

520 
˝u_id
.
modñ
) {

522
	`˝röt
(
LINE_CPU
, 0, "AMD Athlon (0.25)");

523
off
 = 17;

524
l2_ˇche
 = (
˝u_id
.
ˇche_öfo
[11] << 8);

525
l2_ˇche
 +
˝u_id
.
ˇche_öfo
[10];

529
	`˝röt
(
LINE_CPU
, 0, "AMD Athlon (0.18)");

530
off
 = 17;

531
l2_ˇche
 = (
˝u_id
.
ˇche_öfo
[11] << 8);

532
l2_ˇche
 +
˝u_id
.
ˇche_öfo
[10];

535
l2_ˇche
 = (
˝u_id
.
ˇche_öfo
[11] << 8);

536
l2_ˇche
 +
˝u_id
.
ˇche_öfo
[10];

537 i‡(
l2_ˇche
 == 64) {

538
	`˝röt
(
LINE_CPU
, 0, "AMD Duron (0.18)");

540
	`˝röt
(
LINE_CPU
, 0, "Athlon XP (0.18)");

542
off
 = 16;

546
l2_ˇche
 = (
˝u_id
.
ˇche_öfo
[11] << 8);

547
l2_ˇche
 +
˝u_id
.
ˇche_öfo
[10];

548 i‡(
l2_ˇche
 == 64) {

549
	`˝röt
(
LINE_CPU
, 0, "AMD Duron (0.13)");

551
	`˝röt
(
LINE_CPU
, 0, "Athlon XP (0.13)");

553
off
 = 16;

557
	`˝röt
(
LINE_CPU
, 0, "AMD Duron");

558
off
 = 9;

561 i‡(
˝u_id
.
°ï
 == 0) {

563
l2_ˇche
 = 64;

565
l2_ˇche
 = (
˝u_id
.
ˇche_öfo
[11] << 8);

566
l2_ˇche
 +
˝u_id
.
ˇche_öfo
[10];

570
l1_ˇche
 =
˝u_id
.
ˇche_öfo
[3];

571
l1_ˇche
 +
˝u_id
.
ˇche_öfo
[7];

574
l1_ˇche
 =
˝u_id
.
ˇche_öfo
[3];

575
l2_ˇche
 = (
˝u_id
.
ˇche_öfo
[11] << 8);

576
l2_ˇche
 +
˝u_id
.
ˇche_öfo
[10];

577
imc_ty≥
 = 0x0100;

578 if(((
˝u_id
.
ext
 >> 16) & 0xFF) < 0x10) {

580 
˝u_id
.
modñ
) {

582
	`˝röt
(
LINE_CPU
, 0, "AMD K8");

583
off
 = 6;

587 i‡(((
˝u_id
.
ext
 >> 16) & 0xF) != 0) {

588
	`˝röt
(
LINE_CPU
, 0, "AMD Opteron (0.09)");

590
	`˝röt
(
LINE_CPU
, 0, "AMD Opteron (0.13)");

592
off
 = 18;

596
	`˝röt
(
LINE_CPU
, 0, "Athlon 64 X2");

597
off
 = 12;

600
	`˝röt
(
LINE_CPU
, 0, "Turion 64 X2");

601
off
 = 12;

608 i‡(((
˝u_id
.
ext
 >> 16) & 0xF) != 0) {

609 i‡(
l2_ˇche
 > 256) {

610
	`˝röt
(
LINE_CPU
, 0, "Athlon 64 (0.09)");

612
	`˝röt
(
LINE_CPU
, 0, "Sempron (0.09)");

615 i‡(
l2_ˇche
 > 256) {

616
	`˝röt
(
LINE_CPU
, 0, "Athlon 64 (0.13)");

618
	`˝röt
(
LINE_CPU
, 0, "Sempron (0.13)");

621
off
 = 16;

627
l3_ˇche
 = (
˝u_id
.
ˇche_öfo
[15] << 8);

628
l3_ˇche
 +(
˝u_id
.
ˇche_öfo
[14] >> 2);

629
l3_ˇche
 *= 512;

630 
˝u_id
.
modñ
) {

632
imc_ty≥
 = 0x0102;

633
	`˝röt
(
LINE_CPU
, 0, "AMD Fusion @");

634
off
 = 12;

638
imc_ty≥
 = 0x0101;

639
	`˝röt
(
LINE_CPU
, 0, "AMD K10 (65nm) @");

640
off
 = 16;

643
imc_ty≥
 = 0x0101;

644
	`˝röt
(
LINE_CPU
, 0, "AMD K10 (45nm) @");

645
off
 = 16;

648
imc_ty≥
 = 0x0101;

649
	`˝röt
(
LINE_CPU
, 0, "AMD Magny-Cours");

650
off
 = 15;

660 i‡–
˝u_id
.
víd_id
[7] == 'T' ) {

661 i‡(
˝u_id
.
ty≥
 == 5) {

662
	`˝röt
(
LINE_CPU
, 0, "TM 5x00");

663
off
 = 7;

664 } i‡(
˝u_id
.
ty≥
 == 15) {

665
	`˝röt
(
LINE_CPU
, 0, "TM 8x00");

666
off
 = 7;

668
l1_ˇche
 =
˝u_id
.
ˇche_öfo
[3] + cpu_id.cache_info[7];

669
l2_ˇche
 = (
˝u_id
.
ˇche_öfo
[11]*256) + cpu_id.cache_info[10];

671 i‡(
˝u_id
.
ty≥
 == 4) {

672 
˝u_id
.
modñ
) {

675
	`˝röt
(
LINE_CPU
, 0, "Intel 486DX");

676
off
 = 11;

679
	`˝röt
(
LINE_CPU
, 0, "Intel 486SX");

680
off
 = 11;

683
	`˝röt
(
LINE_CPU
, 0, "Intel 486DX2");

684
off
 = 12;

687
	`˝röt
(
LINE_CPU
, 0, "Intel 486SL");

688
off
 = 11;

691
	`˝röt
(
LINE_CPU
, 0, "Intel 486SX2");

692
off
 = 12;

695
	`˝röt
(
LINE_CPU
, 0, "Intel 486DX2-WB");

696
off
 = 15;

699
	`˝röt
(
LINE_CPU
, 0, "Intel 486DX4");

700
off
 = 12;

703
	`˝röt
(
LINE_CPU
, 0, "Intel 486DX4-WB");

704
off
 = 15;

712 
i
=0; i<16; i++) {

713 #ifde‡
CPUID_DEBUG


714
	`d¥öt
(12,
i
*3,
˝u_id
.
ˇche_öfo
[i],2,1);

716 
˝u_id
.
ˇche_öfo
[
i
]) {

720
l1_ˇche
 = 8;

726
l1_ˇche
 = 16;

733
l1_ˇche
 = 32;

736
l2_ˇche
 = 0;

742
l2_ˇche
 = 128;

745
l2_ˇche
 = 192;

753
l2_ˇche
 = 256;

756
l2_ˇche
 = 384;

765
l2_ˇche
 = 512;

772
l2_ˇche
 = 1024;

777
l2_ˇche
 = 2048;

780
l2_ˇche
 = 3072;

783
l2_ˇche
 = 4096;

786
l2_ˇche
 = 6144;

790
l3_ˇche
 = 512;

794
l3_ˇche
 = 1024;

797
l3_ˇche
 = 1536;

803
l3_ˇche
 = 2048;

806
l3_ˇche
 = 3072;

812
l3_ˇche
 = 4096;

816
l3_ˇche
 = 6144;

821
l3_ˇche
 = 8192;

825
l3_ˇche
 = 12288;

828
l3_ˇche
 = 16374;

831
l3_ˇche
 = 18432;

834
l3_ˇche
 = 24576;

840 if(
l1_ˇche
 =0 && ((
˝u_id
.
dˇche0_óx
 >> 5) & 7) == 1)

843 
dˇche
[] = {
˝u_id
.
dˇche0_óx
, cpu_id.
dˇche0_ebx
, cpu_id.
dˇche0_ecx
, cpu_id.
dˇche0_edx
,

844
˝u_id
.
dˇche1_óx
, cpu_id.
dˇche1_ebx
, cpu_id.
dˇche1_ecx
, cpu_id.
dˇche1_edx
,

845
˝u_id
.
dˇche2_óx
, cpu_id.
dˇche2_ebx
, cpu_id.
dˇche2_ecx
, cpu_id.
dˇche2_edx
,

846
˝u_id
.
dˇche3_óx
, cpu_id.
dˇche3_ebx
, cpu_id.
dˇche3_ecx
, cpu_id.
dˇche3_edx


849 
i
=0; i<4; i++)

851 (
dˇche
[
i
*4] >> 5) & 7)

855 if((
dˇche
[
i
*4] & 3) != 2)

857
l1_ˇche
 = (((
dˇche
[
i
*4+1] >> 22) & 0x3FF) + 1) * (((dcache[i*4+1] >> 12) & 0x3FF) + 1);

858
l1_ˇche
 *((
dˇche
[
i
*4+1] & 0xFFF) + 1) * (dcache[i*4+2] + 1) / 1024;

862
l2_ˇche
 = (((
dˇche
[
i
*4+1] >> 22) & 0x3FF) + 1) * (((dcache[i*4+1] >> 12) & 0x3FF) + 1);

863
l2_ˇche
 *((
dˇche
[
i
*4+1] & 0xFFF) + 1) * (dcache[i*4+2] + 1) / 1024;

866
l3_ˇche
 = (((
dˇche
[
i
*4+1] >> 22) & 0x3FF) + 1) * (((dcache[i*4+1] >> 12) & 0x3FF) + 1);

867
l3_ˇche
 *((
dˇche
[
i
*4+1] & 0xFFF) + 1) * (dcache[i*4+2] + 1) / 1024;

874 
˝u_id
.
ty≥
) {

876 
˝u_id
.
modñ
) {

882
	`˝röt
(
LINE_CPU
, 0, "Pentium");

883 i‡(
l1_ˇche
 == 0) {

884
l1_ˇche
 = 8;

886
off
 = 7;

890
	`˝röt
(
LINE_CPU
, 0, "Pentium-MMX");

891 i‡(
l1_ˇche
 == 0) {

892
l1_ˇche
 = 16;

894
off
 = 11;

899 
˝u_id
.
modñ
) {

902
	`˝röt
(
LINE_CPU
, 0, "Pentium Pro");

903
off
 = 11;

906
	`˝röt
(
LINE_CPU
, 0, "Pentium II");

907
off
 = 10;

910 i‡((
˝u_id
.
ext
 >> 16) & 0xF) {

911 if(((
˝u_id
.
ext
 >> 16) & 0xF) > 1) {

912
	`˝röt
(
LINE_CPU
, 0, "Intel Core i3/i5");

913
tsc_öv¨übÀ
 = 1;

914
imc_ty≥
 = 0x0003;

915
off
 = 16;

917
	`˝röt
(
LINE_CPU
, 0, "Intel EP80579");

918 i‡(
l2_ˇche
 == 0) {Ü2_cache = 256; }

919
off
 = 13;

922 i‡(
l2_ˇche
 == 0) {

923
	`˝röt
(
LINE_CPU
, 0, "Celeron");

924
off
 = 7;

926
	`˝röt
(
LINE_CPU
, 0, "Pentium II");

927
off
 = 10;

932 i‡(
l2_ˇche
 == 128) {

933
	`˝röt
(
LINE_CPU
, 0, "Celeron");

934
off
 = 7;

936
	`˝röt
(
LINE_CPU
, 0, "Pentium II");

937
off
 = 10;

943 i‡(((
˝u_id
.
ext
 >> 16) & 0xF) != 0) {

944
tsc_öv¨übÀ
 = 1;

945 i‡(
l2_ˇche
 < 1024) {

946
	`˝röt
(
LINE_CPU
, 0, "Celeron");

947
off
 = 7;

949
	`˝röt
(
LINE_CPU
, 0, "Intel Core 2");

950
off
 = 12;

953 i‡(
l2_ˇche
 == 128) {

954
	`˝röt
(
LINE_CPU
, 0, "Celeron");

955
off
 = 7;

957
	`˝röt
(
LINE_CPU
, 0, "Pentium III");

958
off
 = 11;

963 i‡(
l2_ˇche
 == 512) {

964
	`˝röt
(
LINE_CPU
, 0, "Celeron M (0.13)");

966
	`˝röt
(
LINE_CPU
, 0, "Pentium M (0.13)");

968
off
 = 16;

971 i‡(((
˝u_id
.
ext
 >> 16) & 0xF) != 0) {

972
tsc_öv¨übÀ
 = 1;

973 if(((
˝u_id
.
ext
 >> 16) & 0xF) > 1) {

974
	`˝röt
(
LINE_CPU
, 0, "Intel Core Gen2");

975
imc_ty≥
 = 0x0004;

976
off
 = 15;

978
imc_ty≥
 = 0x0001;

979
	`˝röt
(
LINE_CPU
, 0, "Intel Core i7");

980
off
 = 13;

983
	`˝röt
(
LINE_CPU
, 0, "Pentium III Xeon");

984
off
 = 16;

988 i‡(((
˝u_id
.
ext
 >> 16) & 0xF) > 1) {

989
	`˝röt
(
LINE_CPU
, 0, "Core i7 (32nm)");

990
tsc_öv¨übÀ
 = 1;

991
imc_ty≥
 = 0x0002;

992
off
 = 14;

994
l1_ˇche
 = 24;

995
	`˝röt
(
LINE_CPU
, 0, "Atom (0.045)");

996
off
 = 12;

1000 i‡(
l2_ˇche
 == 1024) {

1001
	`˝röt
(
LINE_CPU
, 0, "Celeron M (0.09)");

1003
	`˝röt
(
LINE_CPU
, 0, "Pentium M (0.09)");

1005
off
 = 16;

1008 i‡(((
˝u_id
.
ext
 >> 16) & 0xF) != 0) {

1009
tsc_öv¨übÀ
 = 1;

1010
imc_ty≥
 = 0x0001;

1011
	`˝röt
(
LINE_CPU
, 0, "Intel Core i5/i7");

1012
off
 = 16;

1014
	`˝röt
(
LINE_CPU
, 0, "Intel Core");

1015
off
 = 10;

1019 i‡(
l2_ˇche
 == 1024) {

1020
	`˝röt
(
LINE_CPU
, 0, "Pentium E");

1021
off
 = 9;

1023
	`˝röt
(
LINE_CPU
, 0, "Intel Core 2");

1024
off
 = 12;

1026
tsc_öv¨übÀ
 = 1;

1031 
˝u_id
.
modñ
) {

1034 i‡(
l2_ˇche
 == 128) {

1035
	`˝röt
(
LINE_CPU
, 0, "Celeron (0.18)");

1036
off
 = 14;

1037 } i‡(
˝u_id
.
pwrˇp
 == 0x0B) {

1038
	`˝röt
(
LINE_CPU
, 0, "Xeon DP (0.18)");

1039
off
 = 14;

1040 } i‡(
˝u_id
.
pwrˇp
 == 0x0C) {

1041
	`˝röt
(
LINE_CPU
, 0, "Xeon MP (0.18)");

1042
off
 = 14;

1044
	`˝röt
(
LINE_CPU
, 0, "Pentium 4 (0.18)");

1045
off
 = 16;

1049 i‡(
l2_ˇche
 == 128) {

1050
	`˝röt
(
LINE_CPU
, 0, "Celeron (0.13)");

1051
off
 = 14;

1052 } i‡(
˝u_id
.
pwrˇp
 == 0x0B) {

1053
	`˝röt
(
LINE_CPU
, 0, "Xeon DP (0.13)");

1054
off
 = 14;

1055 } i‡(
˝u_id
.
pwrˇp
 == 0x0C) {

1056
	`˝röt
(
LINE_CPU
, 0, "Xeon MP (0.13)");

1057
off
 = 14;

1059
	`˝röt
(
LINE_CPU
, 0, "Pentium 4 (0.13)");

1060
off
 = 16;

1065 i‡(
l2_ˇche
 == 256) {

1066
	`˝röt
(
LINE_CPU
, 0, "Celeron (0.09)");

1067
off
 = 14;

1068 } i‡(
˝u_id
.
pwrˇp
 == 0x0B) {

1069
	`˝röt
(
LINE_CPU
, 0, "Xeon DP (0.09)");

1070
off
 = 14;

1071 } i‡(
˝u_id
.
pwrˇp
 == 0x0C) {

1072
	`˝röt
(
LINE_CPU
, 0, "Xeon MP (0.09)");

1073
off
 = 14;

1074 } i‡((
˝u_id
.
°ï
 =0x4 || cpu_id.°ï =0x7Ë&& cpu_id.
modñ
 == 0x4) {

1075
	`˝röt
(
LINE_CPU
, 0, "Pentium D (0.09)");

1076
off
 = 16;

1078
	`˝röt
(
LINE_CPU
, 0, "Pentium 4 (0.09)");

1079
off
 = 16;

1083
	`˝röt
(
LINE_CPU
, 0, "Pentium D (65nm)");

1084
off
 = 16;

1087
	`˝röt
(
LINE_CPU
, 0, "Unknown Intel");

1088
off
 = 13;

1098 i‡–
˝u_id
.
víd_id
[1] == 'e' ) {

1099
l1_ˇche
 =
˝u_id
.
ˇche_öfo
[3] + cpu_id.cache_info[7];

1100
l2_ˇche
 =
˝u_id
.
ˇche_öfo
[11];

1101 
˝u_id
.
ty≥
){

1103
	`˝röt
(
LINE_CPU
, 0, "Centaur 5x86");

1104
off
 = 12;

1107 
˝u_id
.
modñ
){

1109 i‡(
˝u_id
.
°ï
 < 8) {

1110
	`˝röt
(
LINE_CPU
, 0, "VIA C3 Samuel2");

1111
off
 = 14;

1113
	`˝röt
(
LINE_CPU
, 0, "VIA C3 Eden");

1114
off
 = 11;

1118
	`˝röt
(
LINE_CPU
, 0, "VIA C7 (C5J)");

1119
l1_ˇche
 = 64;

1120
l2_ˇche
 = 128;

1121
off
 = 16;

1124
	`˝röt
(
LINE_CPU
, 0, "VIA C7 (C5R)");

1125
l1_ˇche
 = 64;

1126
l2_ˇche
 = 128;

1127
off
 = 12;

1130
	`˝röt
(
LINE_CPU
, 0, "VIA Isaiah (CN)");

1131
l1_ˇche
 = 64;

1132
l2_ˇche
 = 1024;

1133
off
 = 15;

1138 
˝u_id
.
ty≥
) {

1140 
˝u_id
.
modñ
) {

1142
	`˝röt
(
LINE_CPU
, 0, "Cyrix 6x86MX/MII");

1143
off
 = 16;

1146
	`˝röt
(
LINE_CPU
, 0, "Cyrix GXm");

1147
off
 = 9;

1153 
˝u_id
.
modñ
) {

1155
	`˝röt
(
LINE_CPU
, 0, "Cyrix III");

1156
off
 = 9;

1159 i‡(
˝u_id
.
°ï
 < 8) {

1160
	`˝röt
(
LINE_CPU
, 0, "VIA C3 Samuel2");

1161
off
 = 14;

1163
	`˝röt
(
LINE_CPU
, 0, "VIA C3 Ezra-T");

1164
off
 = 13;

1168
	`˝röt
(
LINE_CPU
, 0, "VIA C3 Ezra-T");

1169
off
 = 13;

1172
	`˝röt
(
LINE_CPU
, 0, "VIA C3 Nehemiah");

1173
off
 = 15;

1177
l1_ˇche
 = 64;

1178
l2_ˇche
 = 64;

1186
off
 = 3;

1188 
˝u_id
.
ty≥
) {

1190
	`˝röt
(
LINE_CPU
, 0, "586");

1193
	`˝röt
(
LINE_CPU
, 0, "686");

1201 i‡((
•ìd
 =
	`˝u•ìd
()) > 0) {

1202 i‡(
•ìd
 < 1000000-50) {

1203
•ìd
 += 50;

1204
	`˝röt
(
LINE_CPU
,
off
, " . MHz");

1205
	`d¥öt
(
LINE_CPU
,
off
+1,
•ìd
/1000, 3, 1);

1206
	`d¥öt
(
LINE_CPU
,
off
+5, (
•ìd
/100)%10, 1, 0);

1208
•ìd
 += 500;

1209
	`˝röt
(
LINE_CPU
,
off
, " MHz");

1210
	`d¥öt
(
LINE_CPU
,
off
,
•ìd
/1000, 5, 0);

1212
ext˛ock
 =
•ìd
;

1218 i‡(
l1_ˇche
) {

1219
	`˝röt
(
LINE_CPU
+1, 0, "L1 Cache: K ");

1220
	`d¥öt
(
LINE_CPU
+1, 11,
l1_ˇche
, 3, 0);

1221 i‡((
•ìd
=
	`mem•ìd
((
ul⁄g
)
	`m≠pög
(0x100), (
l1_ˇche
 / 4Ë* 1024, 200,
MS_COPY
))) {

1222
	`˝röt
(
LINE_CPU
+1, 16, " MB/s");

1223
	`d¥öt
(
LINE_CPU
+1, 16,
•ìd
, 6, 0);

1231 i‡(
l2_ˇche
) {

1232
	`˝röt
(
LINE_CPU
+2, 0, "L2 Cache: K ");

1233
	`d¥öt
(
LINE_CPU
+2, 10,
l2_ˇche
, 4, 0);

1234
	`d¥öt
(
LINE_CPU
+2, 10,
l2_ˇche
, 4, 0);

1236 i‡(
l2_ˇche
 <
l1_ˇche
) {

1237
i
 =
l1_ˇche
 / 4 +
l2_ˇche
 / 4;

1239
i
 =
l1_ˇche
;

1241 i‡((
•ìd
=
	`mem•ìd
((
ul⁄g
)
	`m≠pög
(0x100),
i
*1024, 200,
MS_COPY
))) {

1242
	`˝röt
(
LINE_CPU
+2, 16, " MB/s");

1243
	`d¥öt
(
LINE_CPU
+2, 16,
•ìd
, 6, 0);

1251 i‡(
l3_ˇche
) {

1252
	`˝röt
(
LINE_CPU
+3, 0, "L3 Cache: K ");

1253
	`d¥öt
(
LINE_CPU
+3, 10,
l3_ˇche
, 4, 0);

1254
	`d¥öt
(
LINE_CPU
+3, 10,
l3_ˇche
, 4, 0);

1256
i
 =
l2_ˇche
*2;

1258 i‡((
•ìd
=
	`mem•ìd
((
ul⁄g
)
	`m≠pög
(0x100),
i
*1024, 150,
MS_COPY
))) {

1259
	`˝röt
(
LINE_CPU
+3, 16, " MB/s");

1260
	`d¥öt
(
LINE_CPU
+3, 16,
•ìd
, 6, 0);

1267
i
 = (
l3_ˇche
 +
l2_ˇche
 +
l1_ˇche
) * 5;

1270 i‡((1 + (
i
 * 2)Ë> (
v
->
∂im_uµî
 << 2)) {

1271
i
 = ((
v
->
∂im_uµî
 <<2) - 1) / 2;

1273 if((
•ìd
 =
	`mem•ìd
((
ul⁄g
)
	`m≠pög
(0x100),
i
*1024, 50,
MS_COPY
))) {

1274
	`˝röt
(
LINE_CPU
+4, 16, " MB/s");

1275
	`d¥öt
(
LINE_CPU
+4, 16,
•ìd
, 6, 0);

1279
asm

	`__vﬁ©ûe__
 ("rdtsc":"˜" (
v
->
°¨é
),"=d" (v->
°¨th
));

1280
v
->
¢≠l
 = v->
°¨é
;

1281
v
->
¢≠h
 = v->
°¨th
;

1282
v
->
rdtsc
 = 1;

1283 i‡(
l1_ˇche
 == 0) {Ü1_cache = 66; }

1284 i‡(
l2_ˇche
 =0Ë{
l1_ˇche
 = 666; }

1285
	}
}

1288 
	$ˇchóbÀ
()

1290
ul⁄g

•ìd
,
p•ìd
;

1291
ul⁄g

∑ddr
,
mem_t›
,
ˇched
;

1293
mem_t›
 =
v
->
pm≠
[v->
m£gs
 - 1].
íd
;

1294
ˇched
 =
v
->
ã°_∑ges
;

1295
p•ìd
 = 0;

1296 
∑ddr
=0x200;Öadd∏<
mem_t›
 - 64;Öaddr+=0x400) {

1297 
i
;

1298 
found
;

1300
found
 = 0;

1301 
i
 = 0; i <
v
->
m£gs
; i++) {

1302 i‡((
v
->
pm≠
[
i
].
°¨t
 >
∑ddr
) &&

1303 (
v
->
pm≠
[
i
].
íd
 <(
∑ddr
 + 32))) {

1304
found
 = 1;

1308 i‡(!
found
) {

1312
	`m≠_∑ge
(
∑ddr
);

1313
•ìd
 =
	`mem•ìd
((
ul⁄g
)
	`m≠pög
(
∑ddr
), 32*4096, 1,
MS_READ
);

1314 i‡(
p•ìd
) {

1315 i‡(
•ìd
 <
p•ìd
) {

1316
ˇched
 -= 32;

1318
p•ìd
 = (
ul⁄g
)(()
•ìd
 * 0.7);

1321
	`≠röt
(
LINE_INFO
,
COL_CACHE_TOP
,
ˇched
);

1323
	`m≠_∑ge
(0);

1324
	`m≠_∑ge
(0x80000);

1325
	}
}

1331 
	#TICKS
 59659

	)

1334 
	$˝u•ìd
()

1336 
lo›s
;

1339
	`outb
((
	`öb
(0x61) & ~0x02) | 0x01, 0x61);

1340
	`outb
(0xb0, 0x43);

1341
	`outb
(
TICKS
 & 0xff, 0x42);

1342
	`outb
(
TICKS
 >> 8, 0x42);

1344
asm

	`__vﬁ©ûe__
 ("rdtsc":"˜" (
°_low
),"=d" (
°_high
));

1346
lo›s
 = 0;

1348
lo›s
++;

1349 } (
	`öb
(0x61) & 0x20) == 0);

1351
asm

	`__vﬁ©ûe__
 (

1355 :"˜" (
íd_low
), "=d" (
íd_high
)

1359 i‡(
lo›s
 < 4 ||
íd_low
 < 50000) {

1363 if(
tsc_öv¨übÀ
){
íd_low
 =
	`c‹ª˘_tsc
(end_low); }

1365
v
->
˛ks_m£c
 =
íd_low
/50;

1366 (
v
->
˛ks_m£c
);

1367
	}
}

1371
ul⁄g

	$mem•ìd
(
ul⁄g

§c
, ul⁄g
Àn
, 
ôî
, 
ty≥
)

1373
ul⁄g

d°
;

1374
ul⁄g

wÀn
;

1375 
i
;

1377
d°
 =
§c
 +
Àn
;

1378
wÀn
 =
Àn
 / 4;

1381
asm

	`__vﬁ©ûe__
 ("rdtsc":"˜" (
°_low
),"=d" (
°_high
));

1382 
i
=0; i<
ôî
; i++) {

1383
asm

	`__vﬁ©ûe__
 (

1390 :: "g" (
§c
), "g" (
d°
), "g" (0)

1394
asm

	`__vﬁ©ûe__
 ("rdtsc":"˜" (
ˇl_low
),"=d" (
ˇl_high
));

1397
asm

	`__vﬁ©ûe__
 (

1400 :"˜" (
ˇl_low
), "=d" (
ˇl_high
)

1401 :"g" (
°_low
), "g" (
°_high
),

1402 "0" (
ˇl_low
), "1" (
ˇl_high
)

1407 
ty≥
) {

1408 
MS_COPY
:

1410
asm

	`__vﬁ©ûe__
 (

1417 :: "g" (
§c
), "g" (
d°
), "g" (
wÀn
)

1420
asm

	`__vﬁ©ûe__
 ("rdtsc":"˜" (
°_low
),"=d" (
°_high
));

1421 
i
=0; i<
ôî
; i++) {

1422
asm

	`__vﬁ©ûe__
 (

1429 :: "g" (
§c
), "g" (
d°
), "g" (
wÀn
)

1433
asm

	`__vﬁ©ûe__
 ("rdtsc":"˜" (
íd_low
),"=d" (
íd_high
));

1435 
MS_WRITE
:

1436
asm

	`__vﬁ©ûe__
 ("rdtsc":"˜" (
°_low
),"=d" (
°_high
));

1437 
i
=0; i<
ôî
; i++) {

1438
asm

	`__vﬁ©ûe__
 (

1444 :: "g" (
wÀn
), "g" (
d°
), "g" (0)

1448
asm

	`__vﬁ©ûe__
 ("rdtsc":"˜" (
íd_low
),"=d" (
íd_high
));

1450 
MS_READ
:

1451
asm

	`__vﬁ©ûe__
 (

1458 :: "g" (
§c
), "g" (
wÀn
)

1461
asm

	`__vﬁ©ûe__
 ("rdtsc":"˜" (
°_low
),"=d" (
°_high
));

1462 
i
=0; i<
ôî
; i++) {

1463
asm

	`__vﬁ©ûe__
 (

1470 :: "g" (
§c
), "g" (
wÀn
)

1474
asm

	`__vﬁ©ûe__
 ("rdtsc":"˜" (
íd_low
),"=d" (
íd_high
));

1479
asm

	`__vﬁ©ûe__
 (

1482 :"˜" (
íd_low
), "=d" (
íd_high
)

1483 :"g" (
°_low
), "g" (
°_high
),

1484 "0" (
íd_low
), "1" (
íd_high
)

1487
asm

	`__vﬁ©ûe__
 (

1490 :"˜" (
íd_low
), "=d" (
íd_high
)

1491 :"g" (
ˇl_low
), "g" (
ˇl_high
),

1492 "0" (
íd_low
), "1" (
íd_high
)

1496 i‡(
íd_high
) {

1501 i‡(
ty≥
 =
MS_COPY
) {

1502
íd_low
 /= 2;

1506
íd_low
 /
Àn
;

1507
íd_low
 *= 1024;

1508
íd_low
 /
ôî
;

1509 i‡(
íd_low
 == 0) {

1513 if(
tsc_öv¨übÀ
){
íd_low
 =
	`c‹ª˘_tsc
(end_low); }

1516 ((
v
->
˛ks_m£c
)/
íd_low
);

1517
	}
}

1519
ul⁄g

	$c‹ª˘_tsc
(
ul⁄g

ñ_‹g
)

1522 
c€f_now
,
c€f_max
;

1523 
m§_lo
,
m§_hi
,
is_xe
;

1525
	`rdm§
(0x198,
m§_lo
,
m§_hi
);

1526
is_xe
 = (
m§_lo
 >> 31) & 0x1;

1528 if(
is_xe
){

1529
	`rdm§
(0x198,
m§_lo
,
m§_hi
);

1530
c€f_max
 = ((
m§_hi
 >> 8) & 0x1F);

1531 i‡((
m§_hi
 >> 14Ë& 0x1Ë{
c€f_max
 = coef_max + 0.5f; }

1533
	`rdm§
(0x17,
m§_lo
,
m§_hi
);

1534
c€f_max
 = ((
m§_lo
 >> 8) & 0x1F);

1535 i‡((
m§_lo
 >> 14Ë& 0x1Ë{
c€f_max
 = coef_max + 0.5f; }

1538 if((
˝u_id
.
„©uª_Êag
 >> 7) & 1) {

1539
	`rdm§
(0x198,
m§_lo
,
m§_hi
);

1540
c€f_now
 = ((
m§_lo
 >> 8) & 0x1F);

1541 i‡((
m§_lo
 >> 14Ë& 0x1Ë{
c€f_now
 = coef_now + 0.5f; }

1543
	`rdm§
(0x2A,
m§_lo
,
m§_hi
);

1544
c€f_now
 = (
m§_lo
 >> 22) & 0x1F;

1547 if(
c€f_max
 &&
c€f_now
Ë{
ñ_‹g
 = (
ul⁄g
)(el_org * coef_now / coef_max); }

1549 
ñ_‹g
;

1551
	}
}

	@io.h

1 #i‚de‡
_ASM_IO_H


2 
	#_ASM_IO_H


	)

17 #ifde‡
SLOW_IO_BY_JUMPING


18 
	#__SLOW_DOWN_IO

__asm__

	`__vﬁ©ûe__
("jm∞1f\n1:\tjm∞1f\n1:")

	)

20 
	#__SLOW_DOWN_IO

__asm__

	`__vﬁ©ûe__
("outb %Æ,$0x80")

	)

23 #ifde‡
REALLY_SLOW_IO


24 
	#SLOW_DOWN_IO
 {
__SLOW_DOWN_IO
; __SLOW_DOWN_IO; __SLOW_DOWN_IO; __SLOW_DOWN_IO; }

	)

26 
	#SLOW_DOWN_IO

__SLOW_DOWN_IO


	)

33 
	#__OUT1
(
s
,
x
) \

34 
ölöe
 
__out
##
	`s
(
x

vÆue
, 
p‹t
Ë{

	)

36 
	#__OUT2
(
s
,
s1
,
s2
) \

37
__asm__

	`__vﬁ©ûe__
 ("out" #†" %"
s1
 "0,%"
s2
 "1"

	)

39 
	#__OUT
(
s
,
s1
,
x
) \

40
	`__OUT1
(
s
,
x
Ë
	`__OUT2
(s,
s1
,"w"Ë: : "a" (
vÆue
), "d" (
p‹t
)); } \

41
	`__OUT1
(
s
##
c
,
x
Ë
	`__OUT2
(s,
s1
,""Ë: : "a" (
vÆue
), "id" (
p‹t
)); } \

42
	`__OUT1
(
s
##
_p
,
x
Ë
	`__OUT2
(s,
s1
,"w"Ë: : "a" (
vÆue
), "d" (
p‹t
));
SLOW_DOWN_IO
; } \

43
	`__OUT1
(
s
##
c_p
,
x
Ë
	`__OUT2
(s,
s1
,""Ë: : "a" (
vÆue
), "id" (
p‹t
));
SLOW_DOWN_IO
; }

	)

45 
	#__IN1
(
s
) \

46 
ölöe

RETURN_TYPE

__ö
##
	`s
(
p‹t
Ë{ RETURN_TYPE
_v
;

	)

48 
	#__IN2
(
s
,
s1
,
s2
) \

49
__asm__

	`__vﬁ©ûe__
 ("ö" #†" %"
s2
 "1,%"
s1
 "0"

	)

51 
	#__IN
(
s
,
s1
,
i
...) \

52
	`__IN1
(
s
Ë
	`__IN2
(s,
s1
,"w"Ë: "˜" (
_v
Ë: "d" (
p‹t
Ë,##
i
 );  _v; } \

53
	`__IN1
(
s
##
c
Ë
	`__IN2
(s,
s1
,""Ë: "˜" (
_v
Ë: "id" (
p‹t
Ë,##
i
 );  _v; } \

54
	`__IN1
(
s
##
_p
Ë
	`__IN2
(s,
s1
,"w"Ë: "˜" (
_v
Ë: "d" (
p‹t
Ë,##
i
 );
SLOW_DOWN_IO
;  _v; } \

55
	`__IN1
(
s
##
c_p
Ë
	`__IN2
(s,
s1
,""Ë: "˜" (
_v
Ë: "id" (
p‹t
Ë,##
i
 );
SLOW_DOWN_IO
;  _v; }

	)

57 
	#__OUTS
(
s
) \

58 
ölöe
 
outs
##
	`s
(
p‹t
, c⁄° *
addr
, 
cou¡
) \

59 {
__asm__

	`__vﬁ©ûe__
 ("cld ;Ñep ; outs" #s \

60 : "=S" (
addr
), "=c" (
cou¡
Ë: "d" (
p‹t
),"0" (addr),"1" (cou¡)); }

	)

62 
	#RETURN_TYPE
 

	)

64
__IN
(
b
,"")

65 #unde‡
RETURN_TYPE


66 
	#RETURN_TYPE
 

	)

68
__IN
(
w
,"")

69 #unde‡
RETURN_TYPE


70 
	#RETURN_TYPE
 

	)

71
__IN
(
l
,"")

72 #unde‡
RETURN_TYPE


74
__OUT
(
b
,"b",)

75
__OUT
(
w
,"w",)

76
	$__OUT
(
l
,,)

78
	$__OUTS
(
b
)

79
	$__OUTS
(
w
)

80
	$__OUTS
(
l
)

88 
	#outb
(
vÆ
,
p‹t
) \

89 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 256) ? \

90
	`__outbc
((
vÆ
),(
p‹t
)) : \

91
	`__outb
((
vÆ
),(
p‹t
)))

	)

93 
	#öb
(
p‹t
) \

94 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 256) ? \

95
	`__öbc
(
p‹t
) : \

96
	`__öb
(
p‹t
))

	)

99 
	#outw
(
vÆ
,
p‹t
) \

100 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 256) ? \

101
	`__outwc
((
vÆ
),(
p‹t
)) : \

102
	`__outw
((
vÆ
),(
p‹t
)))

	)

104 
	#öw
(
p‹t
) \

105 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 256) ? \

106
	`__öwc
(
p‹t
) : \

107
	`__öw
(
p‹t
))

	)

110 
	#oué
(
vÆ
,
p‹t
) \

111 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 256) ? \

112
	`__ouéc
((
vÆ
),(
p‹t
)) : \

113
	`__oué
((
vÆ
),(
p‹t
)))

	)

115 
	#öl
(
p‹t
) \

116 ((
	`__buûtö_c⁄°™t_p
((
p‹t
)) && (port) < 256) ? \

117
	`__ölc
(
p‹t
) : \

118
	`__öl
(
p‹t
))

	)

	@jedec_id.h

6 
	s•d_jedec_m™uÁ˘uªr
 {

7 
	mc⁄t_code
;

8 
	mhex_byã
;

9 *
	m«me
;

12 
•d_jedec_m™uÁ˘uªr

	gjï106
[] = {

	@lib.c

11 
	~"io.h
"

12 
	~"£rül.h
"

13 
	~"ã°.h
"

14 
	~"c⁄fig.h
"

15 
	~"s¸ìn_buf„r.h
"

16 
	~"smp.h
"

18 
	#NULL
 0

	)

20 
	g¶ock
 = 0,
	gl§
 = 0;

21 
	g£rül_c⁄s
 =
SERIAL_CONSOLE_DEFAULT
;

23 #i‡
SERIAL_TTY
 != 0 && SERIAL_TTY != 1

24 #îr‹
Bad

SERIAL_TTY
.
O∆y

âyS0

™d

âyS1

¨e

suµ‹ãd
.

26 
	g£rül_ây
 =
SERIAL_TTY
;

27 c⁄° 
	g£rül_ba£_p‹ts
[] = {0x3f8, 0x2f8, 0x3e8, 0x2e8};

29 #i‡((115200%
SERIAL_BAUD_RATE
) != 0)

30 #îr‹
Bad
 
baud

øã


32 
	g£rül_baud_øã
 =
SERIAL_BAUD_RATE
;

33 
	g£rül_∑rôy
 = 0;

34 
	g£rül_bôs
 = 8;

36 
	gbuf
[18];

38 
	sascii_m≠_°r
 {

39 
	mascii
;

40 
	mkeycode
;

43 *
	gcodes
[] = {

66 
	sîegs
 {

67
ul⁄g

	mss
;

68
ul⁄g

	mds
;

69
ul⁄g

	me•
;

70
ul⁄g

	mebp
;

71
ul⁄g

	mesi
;

72
ul⁄g

	medi
;

73
ul⁄g

	medx
;

74
ul⁄g

	mecx
;

75
ul⁄g

	mebx
;

76
ul⁄g

	móx
;

77
ul⁄g

	mve˘
;

78
ul⁄g

	mcode
;

79
ul⁄g

	meù
;

80
ul⁄g

	mcs
;

81
ul⁄g

	meÊag
;

84 
	$memcmp
(c⁄° *
s1
, c⁄° *
s2
,
ul⁄g

cou¡
)

86 c⁄° *
§c1
 =
s1
, *
§c2
 =
s2
;

87 
i
;

88 
i
 = 0; i <
cou¡
; i++) {

89 i‡(
§c1
[
i
] !
§c2
[i]) {

90  ()
§c1
[
i
] - ()
§c2
[i];

94
	}
}

96 
	$mem˝y
 (*
d°
, *
§c
, 
Àn
)

98 *
s
 = (*)
§c
;

99 *
d
 = (*)
d°
;

100 
i
;

102 i‡(
Àn
 <= 0) {

105 
i
 = 0 ; i <
Àn
; i++) {

106 *
d
++ = *
s
++;

108
	}
}

109 
	$°∫cmp
(c⁄° *
s1
, c⁄° *
s2
,
ul⁄g

n
) {

110 sig√d 
ªs
 = 0;

111 
n
) {

112
ªs
 = *
s1
 - *
s2
;

113 i‡(
ªs
 != 0)

114 
ªs
;

115 i‡(*
s1
 == '\0')

117 ++
s1
, ++
s2
;

118 --
n
;

120 
ªs
;

121
	}
}

123 *
	$memmove
(*
de°
, c⁄° *
§c
,
ul⁄g

n
)

125 
i
;

126 *
d
 = (*)
de°
, *
s
 = (*)
§c
;

129 i‡(
de°
 <
§c
) {

130 
i
 = 0; i <
n
; i++) {

131
d
[
i
] =
s
[i];

134 i‡(
de°
 >
§c
) {

135 
i
 =
n
 -1; i >= 0; i--) {

136
d
[
i
] =
s
[i];

139 
de°
;

140
	}
}

142 
	$touµî
(
c
)

144 i‡(
c
 >= 'a' && c <= 'z')

145 
c
 + 'A' -'a';

147 
c
;

148
	}
}

150 
	$isdigô
(
c
)

152 
c
 >= '0' && c <= '9';

153
	}
}

155 
	$isxdigô
(
c
)

157 
	`isdigô
(
c
Ë|| (
	`touµî
(cË>'A' &&Åouµî(cË<'F');
	}
}

159 
	$sim∂e_°πoul
(c⁄° *
˝
, **
ídp
, 
ba£
) {

160 
ªsu…
 = 0,
vÆue
;

162 i‡(!
ba£
) {

163
ba£
 = 10;

164 i‡(*
˝
 == '0') {

165
ba£
 = 8;

166
˝
++;

167 i‡(
	`touµî
(*
˝
Ë='X' &&
	`isxdigô
(cp[1])) {

168
˝
++;

169
ba£
 = 16;

172 } i‡(
ba£
 == 16) {

173 i‡(
˝
[0] ='0' &&
	`touµî
(cp[1]) == 'X')

174
˝
 += 2;

176 
	`isxdigô
(*
˝
) &&

177 (
vÆue
 =
	`isdigô
(*
˝
Ë? *˝-'0' :
	`touµî
(*˝)-'A'+10Ë<
ba£
) {

178
ªsu…
 =Ñesu…*
ba£
 +
vÆue
;

179
˝
++;

181 i‡(
ídp
)

182 *
ídp
 = (*)
˝
;

183 
ªsu…
;

184
	}
}

191 
	$s¸ﬁl
()

193 
i
,
j
;

194 *
s
,
tmp
;

197 i‡(
v
->
msg_löe
 < 23) {

198
v
->
msg_löe
++;

201 
¶ock
) {

202
	`check_öput
();

204 
i
=
LINE_SCROLL
; i<23; i++) {

205
s
 = (*)(
SCREEN_ADR
 + ((
i
+1) * 160));

206 
j
=0; j<160; j+=2,
s
+=2) {

207 *(
s
-160) = *s;

208
tmp
 =
	`gë_s¸n_buf
(
i
+1,
j
/2);

209
	`£t_s¸n_buf
(
i
,
j
/2,
tmp
);

213
s
 = (*)(
SCREEN_ADR
 + (23 * 160));

214 
j
=0; j<80; j++) {

215 *
s
 = ' ';

216
	`£t_s¸n_buf
(23,
j
, ' ');

217
s
 += 2;

219
	`ây_¥öt_ªgi⁄
(
LINE_SCROLL
, 0, 23, 79);

221
	}
}

226 
	$˛ór_s¸ﬁl
()

228 
i
;

229 *
s
;

231
s
 = (*)(
SCREEN_ADR
+
LINE_HEADER
*160);

232 
i
=0; i<80*(24-
LINE_HEADER
); i++) {

233 *
s
++ = ' ';

234 *
s
++ = 0x17;

236
	}
}

241 
	$˝röt
(
y
, 
x
, c⁄° *
ãxt
)

243 
i
;

244 *
d±r
;

246
d±r
 = (*)(
SCREEN_ADR
 + (160*
y
Ë+ (2*
x
));

247 
i
=0;
ãxt
[i]; i++) {

248 *
d±r
 =
ãxt
[
i
];

249
d±r
 += 2;

251
	`ây_¥öt_löe
(
y
,
x
,
ãxt
);

252
	}
}

254 
	$ôﬂ
(
s
[], 
n
)

256 
i
,
sign
;

258 if((
sign
 =
n
) < 0)

259
n
 = -n;

260
i
=0;

262
s
[
i
++] =
n
 % 10 + '0';

263 } (
n
 /= 10) > 0);

264 if(
sign
 < 0)

265
s
[
i
++] = '-';

266
s
[
i
] = '\0';

267
	`ªvî£
(
s
);

268
	}
}

270 
	$ªvî£
(
s
[])

272 
c
,
i
,
j
;

273 
j
 = 0;
s
[j] != 0; j++)

276 
i
=0,
j
 = j - 1; i < j; i++, j--) {

277
c
 =
s
[
i
];

278
s
[
i
] = s[
j
];

279
s
[
j
] =
c
;

281
	}
}

286 
	$≠röt
(
y
, 
x
,
ul⁄g

∑ge
)

289 i‡((
∑ge
 << 2) < 9999) {

290
	`d¥öt
(
y
,
x
,
∑ge
 << 2, 4, 0);

291
	`˝röt
(
y
,
x
+4, "K");

293 i‡((
∑ge
 >>8) < 9999) {

294
	`d¥öt
(
y
,
x
, (
∑ge
 + (1 << 7)) >> 8, 4, 0);

295
	`˝röt
(
y
,
x
+4, "M");

297 i‡((
∑ge
 >>18) < 9999) {

298
	`d¥öt
(
y
,
x
, (
∑ge
 + (1 << 17)) >> 18, 4, 0);

299
	`˝röt
(
y
,
x
+4, "G");

302
	`d¥öt
(
y
,
x
, (
∑ge
 + (1 << 27)) >> 28, 4, 0);

303
	`˝röt
(
y
,
x
+4, "T");

305
	}
}

310 
	$d¥öt
(
y
, 
x
,
ul⁄g

vÆ
, 
Àn
, 
right
)

312
ul⁄g

j
,
k
;

313 
i
,
Êag
=0;

315 i‡(
vÆ
 > 999999999 ||
Àn
 > 9) {

318 
i
=0,
j
=1; i<
Àn
-1; i++) {

319
j
 *= 10;

321 i‡(!
right
) {

322 
i
=0;
j
>0; j/=10) {

323
k
 =
vÆ
/
j
;

324 i‡(
k
 > 9) {

325
j
 *= 100;

328 i‡(
Êag
 ||
k
 ||
j
 == 1) {

329
buf
[
i
++] =
k
 + '0';

330
Êag
++;

332
buf
[
i
++] = ' ';

334
vÆ
 -
k
 *
j
;

337 
i
=0; i<
Àn
;
j
/=10) {

338 i‡(
j
) {

339
k
 =
vÆ
/
j
;

340 i‡(
k
 > 9) {

341
j
 *= 100;

342
Àn
++;

345 i‡(
k
 =0 &&
Êag
 == 0) {

348
buf
[
i
++] =
k
 + '0';

349
vÆ
 -
k
 *
j
;

351 i‡(
Êag
 =0 &&
i
 <
Àn
-1) {

352
buf
[
i
++] = '0';

354
buf
[
i
++] = ' ';

357
Êag
++;

360
buf
[
i
] = 0;

361
	`˝röt
(
y
,
x
,
buf
);

362
	}
}

368 
	$gënum
(
ul⁄g

vÆ
)

370 
Àn
 = 0;

371 
i
 = 1;

373 
i
 <
vÆ
)

375
Àn
++;

376
i
 *= 10;

379 
Àn
;

381
	}
}

386 
	$h¥öt2
(
y
,
x
, 
vÆ
, 
digôs
)

388 
j
;

389 
i
,
idx
,
Êag
 = 0;

391 
i
=0,
idx
=0; i<8; i++) {

392
j
 =
vÆ
 >> (28 - (4 *
i
));

393
j
 &= 0xf;

394 i‡(
j
 < 10) {

395 i‡(
Êag
 ||
j
 ||
i
 == 7) {

396
buf
[
idx
++] =
j
 + '0';

397
Êag
++;

399
buf
[
idx
++] = '0';

402
buf
[
idx
++] =
j
 + 'a' - 10;

403
Êag
++;

406 i‡(
digôs
 > 8) {

407
digôs
 = 8;

409 i‡(
Êag
 >
digôs
) {

410
digôs
 =
Êag
;

412
buf
[
idx
] = 0;

413
	`˝röt
(
y
,
x
,
buf
 + (
idx
 -
digôs
));

414
	}
}

419 
	$h¥öt3
(
y
,
x
, 
vÆ
, 
digôs
)

421 
j
;

422 
i
,
idx
,
Êag
 = 0;

425 
i
=0,
idx
=0; i<
digôs
; i++) {

426
j
 = 0x‡&
vÆ
;

427
vÆ
 /= 16;

429 i‡(
j
 < 10) {

430 i‡(
Êag
 ||
j
 ||
i
 == 7) {

431
buf
[
digôs
 - ++
idx
] =
j
 + '0';

432
Êag
++;

434
buf
[
digôs
 - ++
idx
] = '0';

437
buf
[
digôs
 - ++
idx
] =
j
 + 'a' - 10;

438
Êag
++;

441
buf
[
idx
] = 0;

442
	`˝röt
(
y
,
x
,
buf
);

443
	}
}

448 
	$h¥öt
(
y
, 
x
, 
vÆ
)

450 
	`h¥öt2
(
y
,
x
,
vÆ
, 8);

451
	}
}

456 
	$x¥öt
(
y
,
x
,
ul⁄g

vÆ
)

458
ul⁄g

j
;

460
j
 = (
vÆ
 & 0xffc00000) >> 20;

461
	`d¥öt
(
y
,
x
,
j
, 4, 0);

462
	`˝röt
(
y
,
x
+4, "m");

463
j
 = (
vÆ
 & 0xffc00) >> 10;

464
	`d¥öt
(
y
,
x
+5,
j
, 4, 0);

465
	`˝röt
(
y
,
x
+9, "k");

466
j
 =
vÆ
 & 0x3ff;

467
	`d¥öt
(
y
,
x
+10,
j
, 4, 0);

468
	}
}

471 
	$öãr
(
îegs
 *
å≠_ªgs
)

473 
i
,
löe
;

474 *
µ
;

475
ul⁄g

addªss
 = 0;

478 i‡(
å≠_ªgs
->
ve˘
 == 14) {

479
	`__asm__
("mov»%%¸2,%0":"Ù" (
addªss
));

481 #ifde‡
PARITY_MEM


484 i‡(
å≠_ªgs
->
ve˘
 == 2) {

485
	`∑rôy_îr
(
å≠_ªgs
->
edi
,Åøp_ªgs->
esi
);

491
µ
=(*)(
SCREEN_ADR
+(2*80*(
LINE_SCROLL
-2)));

492 
i
=0; i<2*80*(24-
LINE_SCROLL
-2); i++,
µ
+=2) {

493 *
µ
 = ' ';

495
löe
 =
LINE_SCROLL
-2;

497
	`˝röt
(
löe
, 0, "Unexpected Interrupt - Halting");

498
	`˝röt
(
löe
+2, 0, " Type: ");

499 i‡(
å≠_ªgs
->
ve˘
 <= 19) {

500
	`˝röt
(
löe
+2, 7,
codes
[
å≠_ªgs
->
ve˘
]);

502
	`h¥öt
(
löe
+2, 7,
å≠_ªgs
->
ve˘
);

504
	`˝röt
(
löe
+3, 0, " PC: ");

505
	`h¥öt
(
löe
+3, 7,
å≠_ªgs
->
eù
);

506
	`˝röt
(
löe
+4, 0, " CS: ");

507
	`h¥öt
(
löe
+4, 7,
å≠_ªgs
->
cs
);

508
	`˝röt
(
löe
+5, 0, "Eflag: ");

509
	`h¥öt
(
löe
+5, 7,
å≠_ªgs
->
eÊag
);

510
	`˝röt
(
löe
+6, 0, " Code: ");

511
	`h¥öt
(
löe
+6, 7,
å≠_ªgs
->
code
);

512 i‡(
å≠_ªgs
->
ve˘
 == 14) {

514
	`˝röt
(
löe
+7, 0, " Addr: ");

515
	`h¥öt
(
löe
+7, 7,
addªss
);

518
	`˝röt
(
löe
+2, 20, "eax: ");

519
	`h¥öt
(
löe
+2, 25,
å≠_ªgs
->
óx
);

520
	`˝röt
(
löe
+3, 20, "ebx: ");

521
	`h¥öt
(
löe
+3, 25,
å≠_ªgs
->
ebx
);

522
	`˝röt
(
löe
+4, 20, "ecx: ");

523
	`h¥öt
(
löe
+4, 25,
å≠_ªgs
->
ecx
);

524
	`˝röt
(
löe
+5, 20, "edx: ");

525
	`h¥öt
(
löe
+5, 25,
å≠_ªgs
->
edx
);

526
	`˝röt
(
löe
+6, 20, "edi: ");

527
	`h¥öt
(
löe
+6, 25,
å≠_ªgs
->
edi
);

528
	`˝röt
(
löe
+7, 20, "esi: ");

529
	`h¥öt
(
löe
+7, 25,
å≠_ªgs
->
esi
);

530
	`˝röt
(
löe
+8, 20, "ebp: ");

531
	`h¥öt
(
löe
+8, 25,
å≠_ªgs
->
ebp
);

532
	`˝röt
(
löe
+9, 20, "esp: ");

533
	`h¥öt
(
löe
+9, 25,
å≠_ªgs
->
e•
);

534
	`˝röt
(
löe
+7, 0, " DS: ");

535
	`h¥öt
(
löe
+7, 7,
å≠_ªgs
->
ds
);

536
	`˝röt
(
löe
+8, 0, " SS: ");

537
	`h¥öt
(
löe
+8, 7,
å≠_ªgs
->
ss
);

538
	`˝röt
(
löe
+1, 38, "Stack:");

539 
i
=0; i<12; i++) {

540
	`h¥öt
(
löe
+2+
i
, 38,
å≠_ªgs
->
e•
+(4*i));

541
	`h¥öt
(
löe
+2+
i
, 47, *(
ul⁄g
*)(
å≠_ªgs
->
e•
+(4*i)));

542
	`h¥öt
(
löe
+2+
i
, 57,
å≠_ªgs
->
e•
+(4*(i+12)));

543
	`h¥öt
(
löe
+2+
i
, 66, *(
ul⁄g
*)(
å≠_ªgs
->
e•
+(4*(i+12))));

546
	`˝röt
(
löe
+11, 0, "CS:EIP: ");

547
µ
 = (*)
å≠_ªgs
->
eù
;

548 
i
 = 0; i < 10; i++) {

549
	`h¥öt2
(
löe
+11, 8+(3*
i
),
µ
[i], 2);

553
	`check_öput
();

555
	}
}

557 
	$£t_ˇche
(
vÆ
)

559 
˝u_idít

˝u_id
;

561 i‡((
˝u_id
.
˝uid
 < 1Ë&& (˝u_id.
ty≥
 == 3)) {

562
	`˝röt
(
LINE_INFO
,
COL_CACHE
, "none");

565 
vÆ
) {

567
	`ˇche_off
();

568
	`˝röt
(
LINE_INFO
,
COL_CACHE
, "off");

571
	`ˇche_⁄
();

572
	`˝röt
(
LINE_INFO
,
COL_CACHE
, " on");

575
	}
}

577 
	$gë_key
() {

578 
c
;

580
c
 =
	`öb
(0x64);

581 i‡((
c
 & 1) == 0) {

582 i‡(
£rül_c⁄s
) {

583 
com°©
;

584
com°©
 =
	`£rül_echo_öb
(
UART_LSR
);

585 i‡(
com°©
 &
UART_LSR_DR
) {

586
c
 =
	`£rül_echo_öb
(
UART_RX
);

591  (
	`ascii_to_keycode
(
c
));

596
c
 =
	`öb
(0x60);

597 ((
c
));

598
	}
}

600 
	$check_öput
()

602 
c
;

604 i‡((
c
 =
	`gë_key
())) {

605 
c
 & 0x7f) {

608
	`˝röt
(
LINE_RANGE
,
COL_MID
+23, "Halting... ");

612
	`outb
(0xfe,0x64);

616
	`gë_c⁄fig
();

620
¶ock
 = 0;

621
	`foŸî
();

625
¶ock
 = 1;

626
	`foŸî
();

630
	`ây_¥öt_s¸ìn
();

634
	}
}

636 
	$foŸî
()

638
	`˝röt
(24, 0, "(ESC)Reboot (c)configuration (SP)scroll_lock (CR)scroll_unlock");

639 i‡(
¶ock
) {

640
	`˝röt
(24, 74, "LOCKED");

642
	`˝röt
(24, 74, " ");

644
	}
}

646
ul⁄g

	$gëvÆ
(
x
, 
y
, 
ªsu…_shi·
)

648 
vÆ
;

649 
d⁄e
;

650 
c
;

651 
i
,
n
;

652 
ba£
;

653 
shi·
;

654 
buf
[16];

656 
i
 = 0; i < (
buf
)/(buf[0]); i++ ) {

657
buf
[
i
] = ' ';

659
buf
[(buf)/(buf[0]) -1] = '\0';

661
	`waô_keyup
();

662
d⁄e
 = 0;

663
n
 = 0;

664
ba£
 = 10;

665 !
d⁄e
) {

667
c
 =
	`gë_key
();

668 
c
) {

670
	`ây_¥öt_s¸ìn
();

674 if(
n
Ë
d⁄e
 = 1;

676 0x19:
buf
[
n
] = 'p'; ;

677 0x22:
buf
[
n
] = 'g'; ;

678 0x32:
buf
[
n
] = 'm'; ;

679 0x25:
buf
[
n
] = 'k'; ;

682 i‡(
n
 =1 && (
buf
[0] == '0')) {

683
buf
[
n
] = 'x';

687 i‡(
n
 > 0) {

688
n
 -= 1;

689
buf
[
n
] = ' ';

693 0x0B: i‡(
ba£
 >1Ë
buf
[
n
] = '0'; ;

694 0x02: i‡(
ba£
 >2Ë
buf
[
n
] = '1'; ;

695 0x03: i‡(
ba£
 >3Ë
buf
[
n
] = '2'; ;

696 0x04: i‡(
ba£
 >4Ë
buf
[
n
] = '3'; ;

697 0x05: i‡(
ba£
 >5Ë
buf
[
n
] = '4'; ;

698 0x06: i‡(
ba£
 >6Ë
buf
[
n
] = '5'; ;

699 0x07: i‡(
ba£
 >7Ë
buf
[
n
] = '6'; ;

700 0x08: i‡(
ba£
 >8Ë
buf
[
n
] = '7'; ;

701 0x09: i‡(
ba£
 >9Ë
buf
[
n
] = '8'; ;

702 0x0A: i‡(
ba£
 >10Ë
buf
[
n
] = '9'; ;

703 0x1e: i‡(
ba£
 >11Ë
buf
[
n
] = 'a'; ;

704 0x30: i‡(
ba£
 >12Ë
buf
[
n
] = 'b'; ;

705 0x2e: i‡(
ba£
 >13Ë
buf
[
n
] = 'c'; ;

706 0x20: i‡(
ba£
 >14Ë
buf
[
n
] = 'd'; ;

707 0x12: i‡(
ba£
 >15Ë
buf
[
n
] = 'e'; ;

708 0x21: i‡(
ba£
 >16Ë
buf
[
n
] = 'f'; ;

713 i‡(
n
 > 0 && (

714 (
buf
[
n
-1] == 'p') || (buf[n-1] == 'g') ||

715 (
buf
[
n
-1] == 'm') || (buf[n-1] == 'k'))) {

716
buf
[
n
] = ' ';

719 i‡(
buf
[
n
] != ' ') {

720
n
++;

722
buf
[
n
] = ' ';

724
	`˝röt
(
x
,
y
,
buf
);

727
ba£
 = 10;

728 i‡((
buf
[0] == '0') && (buf[1] == 'x')) {

729
ba£
 = 16;

731 i‡(
buf
[0] == '0') {

732
ba£
 = 8;

736
shi·
 = 0;

737 
buf
[
n
-1]) {

738 'g':
shi·
 = 30; ;

739 'm':
shi·
 = 20; ;

740 'p':
shi·
 = 12; ;

741 'k':
shi·
 = 10; ;

743
shi·
 -
ªsu…_shi·
;

746
vÆ
 =
	`sim∂e_°πoul
(
buf
,
NULL
,
ba£
);

747 i‡(
shi·
 > 0) {

748 i‡(
shi·
 >= 32) {

749
vÆ
 = 0xffffffff;

751
vÆ
 <<
shi·
;

754 i‡(-
shi·
 >= 32) {

755
vÆ
 = 0;

758
vÆ
 >>-
shi·
;

761 
vÆ
;

762
	}
}

764 
	$ây¥öt
(
y
, 
x
, c⁄° *
p
)

766 
sx
[3];

767 
sy
[3];

769
sx
[0]='\0';

770
sy
[0]='\0';

771
x
++;
y
++;

772
	`ôﬂ
(
sx
,
x
);

773
	`ôﬂ
(
sy
,
y
);

774
	`£rül_echo_¥öt
("[");

775
	`£rül_echo_¥öt
(
sy
);

776
	`£rül_echo_¥öt
(";");

777
	`£rül_echo_¥öt
(
sx
);

778
	`£rül_echo_¥öt
("H");

779
	`£rül_echo_¥öt
(
p
);

780
	}
}

783 
	$£rül_echo_öô
()

785 
com°©
,
hi
,
lo
,
£rül_div
;

786 
l¸
;

789
com°©
 =
	`£rül_echo_öb
(
UART_LCR
);

790
	`£rül_echo_outb
(
com°©
 |
UART_LCR_DLAB
,
UART_LCR
);

791
hi
 =
	`£rül_echo_öb
(
UART_DLM
);

792
lo
 =
	`£rül_echo_öb
(
UART_DLL
);

793
	`£rül_echo_outb
(
com°©
,
UART_LCR
);

796
l¸
 =
£rül_∑rôy
 | (
£rül_bôs
 - 5);

797
	`£rül_echo_outb
(
l¸
,
UART_LCR
);

798
£rül_div
 = 115200 /
£rül_baud_øã
;

799
	`£rül_echo_outb
(0x80|
l¸
,
UART_LCR
);

800
	`£rül_echo_outb
(
£rül_div
 & 0xff,
UART_DLL
);

801
	`£rül_echo_outb
((
£rül_div
 >> 8Ë& 0xff,
UART_DLM
);

802
	`£rül_echo_outb
(
l¸
,
UART_LCR
);

807
com°©
 =
	`£rül_echo_öb
(
UART_LSR
);

808
com°©
 =
	`£rül_echo_öb
(
UART_RX
);

809
	`£rül_echo_outb
(0x00,
UART_IER
);

811
	`˛ór_s¸ìn_buf
();

814
	}
}

816 
	$£rül_echo_¥öt
(c⁄° *
p
)

818 i‡(!
£rül_c⁄s
) {

822 *
p
) {

823
WAIT_FOR_XMITR
;

826
	`£rül_echo_outb
(*
p
,
UART_TX
);

827 if(*
p
==10) {

828
WAIT_FOR_XMITR
;

829
	`£rül_echo_outb
(13,
UART_TX
);

831
p
++;

833
	}
}

842 
ascii_m≠_°r

	g£r_m≠
[] =

995 
	$ascii_to_keycode
 (
ö
)

997 
ascii_m≠_°r
 *
p
;

998 
p
 =
£r_m≠
;Ö->
ascii
;Ö++) {

999 i‡(
ö
 ==
p
->
ascii
)

1000 
p
->
keycode
;

1003
	}
}

1010 
	$waô_keyup
( ) {

1013 i‡((
	`gë_key
() & 0x80) != 0) {

1023 i‡(
£rül_c⁄s
) {

1027
	}
}

1039 
	$£rül_c⁄sﬁe_£tup
(*
∑øm
)

1041 *
›ti⁄
, *
íd
;

1042 
ây
;

1043 
baud_øã
;

1044 
∑rôy
,
bôs
;

1046 i‡(
	`°∫cmp
(
∑øm
, "ttyS", 4))

1049
∑øm
 += 4;

1051
ây
 =
	`sim∂e_°πoul
(
∑øm
, &
›ti⁄
, 10);

1053 i‡(
›ti⁄
 =
∑øm
)

1056 i‡(
ây
 > 3)

1059 i‡(*
›ti⁄
 == '\0' || *option == ' ')

1060 
ßve_ây
;

1062 i‡(*
›ti⁄
 != ',')

1066
›ti⁄
++;

1067
baud_øã
 =
	`sim∂e_°πoul
(
›ti⁄
, &
íd
, 10);

1069 i‡(
íd
 =
›ti⁄
)

1072 i‡(
baud_øã
 == 0 || (115200 % baud_rate) != 0)

1075 i‡(*
íd
 == '\0' || *end == ' ')

1076 
ßve_baud_øã
;

1078 
	`touµî
(*
íd
)) {

1080
∑rôy
 = 0;

1083
∑rôy
 =
UART_LCR_PARITY
;

1086
∑rôy
 =
UART_LCR_PARITY
 |
UART_LCR_EPAR
;

1093
íd
++;

1094 i‡(*
íd
 == '\0' || *end == ' ')

1095 
ßve_∑rôy
;

1098 i‡(*
íd
 < '7' || *end > '8')

1101
bôs
 = *
íd
 - '0';

1103
íd
++;

1105 i‡(*
íd
 != '\0' && *end != ' ')

1108
£rül_bôs
 =
bôs
;

1109
ßve_∑rôy
:

1110
£rül_∑rôy
 =
∑rôy
;

1111
ßve_baud_øã
:

1112
£rül_baud_øã
 = (Ë
baud_øã
;

1113
ßve_ây
:

1114
£rül_ây
 = (Ë
ây
;

1115
£rül_c⁄s
 = 1;

1116
	}
}

1119 #ifde‡
LP


1120 
	#DATA
 0x00

	)

1121 
	#STATUS
 0x01

	)

1122 
	#CONTROL
 0x02

	)

1124 
	#LP_PBUSY
 0x80

	)

1125 
	#LP_PERRORP
 0x08

	)

1127 
	#LP_PSELECP
 0x08

	)

1128 
	#LP_PINITP
 0x04

	)

1129 
	#LP_PSTROBE
 0x01

	)

1131 
	#DELAY
 0x10c6ul

	)

1133 
	$Õ_waô
(
ul⁄g

xlo›s
)

1135 
d0
;

1136
	`__asm__
("mull %0"

1137 :"=d" (
xlo›s
), "=&a" (
d0
)

1138 :"1" (
xlo›s
),"0" (
cuºít_˝u_d©a
.
lo›s_≥r_£c
));

1139
	`__dñay
(
xlo›s
);

1140
	}
}

1141 
	$__dñay
(
ul⁄g

lo›s
)

1143 
d0
;

1144
__asm__

	`__vﬁ©ûe__
(

1150 :"=&a" (
d0
)

1151 :"0" (
lo›s
));

1152
	}
}

1154
	$put_Õ
(
c
, 
p‹t
)

1156 
°©us
;

1160
°©us
 =
	`öb
(
	`STATUS
(
p‹t
));

1161 i‡(
°©us
 &
LP_PERRORP
) {

1162 i‡(
°©us
 &
LP_PBUSY
) {

1168
	`outb
(
d
,
	`DATA
(
c
));

1169
	`Õ_waô
(
DELAY
);

1170
	`outb
((
LP_PSELECP
 |
LP_PINITP
 |
LP_PSTROBE
),
	`CONTROL
(
p‹t
));

1171
	`Õ_waô
(
DELAY
);

1172
	`outb
((
LP_PSELECP
 |
LP_PINITP
),
	`CONTROL
(
p‹t
));

1173
	`Õ_waô
(
DELAY
);

1174
	}
}

	@linuxbios.c

1 
	~"löuxbios_èbÀs.h
"

2 
	~"ã°.h
"

4 
	$ù_compuã_csum
(*
addr
, 
Àngth
)

6
uöt16_t
 *
±r
;

7 
sum
;

8 
Àn
;

9 
œddr
;

11
œddr
 = ()
addr
;

12
sum
 = 0;

13 i‡(
œddr
 & 1) {

14
uöt16_t

buf„r
;

15 *
±r
;

20
buf„r
 = 0;

21
±r
 =
addr
;

22
	`memmove
(&
buf„r
,
±r
, 1);

23
sum
 +
buf„r
;

24 i‡(
sum
 > 0xFFFF)

25
sum
 -= 0xFFFF;

26
Àngth
 -= 1;

27
addr
 =
±r
 +1;

30
Àn
 =
Àngth
 >> 1;

31
±r
 =
addr
;

32 
Àn
--) {

33
sum
 +*(
±r
++);

34 i‡(
sum
 > 0xFFFF)

35
sum
 -= 0xFFFF;

37
addr
 =
±r
;

38 i‡(
Àngth
 & 1) {

39
uöt16_t

buf„r
;

40 *
±r
;

45
buf„r
 = 0;

46
±r
 =
addr
;

47
	`memmove
(&
buf„r
,
±r
, 1);

48
sum
 +
buf„r
;

49 i‡(
sum
 > 0xFFFF)

50
sum
 -= 0xFFFF;

52  (~
sum
) & 0xFFFF;

54
	}
}

56 
	#f‹_óch_lbªc
(
hód
,
ªc
) \

57 
ªc
 = (
lb_ªc‹d
 *)(((*)
hód
) + (*head)); \

58 (((*)
ªc
Ë< (((*)
hód
Ë+ (*hódË+ hód->
èbÀ_byãs
)) && \

59 (
ªc
->
size
 >= 1) && \

60 ((((*)
ªc
Ë+Ñec->
size
Ë<(((*)
hód
Ë+ (*hódË+ hód->
èbÀ_byãs
)); \

61
ªc
 = (
lb_ªc‹d
 *)(((*ÏecË+Ñec->
size
))

	)

64 
	$cou¡_lb_ªc‹ds
(
lb_hódî
 *
hód
)

66 
lb_ªc‹d
 *
ªc
;

67 
cou¡
;

68
cou¡
 = 0;

69
	`f‹_óch_lbªc
(
hód
,
ªc
) {

70
cou¡
++;

72 
cou¡
;

73
	}
}

75 
lb_hódî
 *
	$__föd_lb_èbÀ
(
°¨t
, 
íd
)

77 
addr
;

79 
addr
 =
°¨t
;ádd∏<
íd
;áddr += 16) {

80 
lb_hódî
 *
hód
 = (lb_hódî *)
addr
;

81 
lb_ªc‹d
 *
ªcs
 = (lb_ªc‹d *)(
addr
 + (*
hód
));

82 i‡(
	`memcmp
(
hód
->
sig«tuª
, "LBIO", 4) != 0)

84 i‡(
hód
->
hódî_byãs
 != (*head))

86 i‡(
	`ù_compuã_csum
((*)
hód
, (*head)) != 0)

88 i‡(
	`ù_compuã_csum
((*)
ªcs
,
hód
->
èbÀ_byãs
)

89 !
hód
->
èbÀ_checksum
)

91 i‡(
	`cou¡_lb_ªc‹ds
(
hód
Ë!hód->
èbÀ_íåõs
)

93 
hód
;

96
	}
}

98 
lb_hódî
 *
	$föd_lb_èbÀ
()

100 
lb_hódî
 *
hód
;

101
hód
 = 0;

102 i‡(!
hód
) {

104
hód
 =
	`__föd_lb_èbÀ
(0x00000, 0x1000);

106 i‡(!
hód
) {

108
hód
 =
	`__föd_lb_èbÀ
(0xf0000, 0x100000);

110 
hód
;

111
	}
}

113 
	$quîy_löuxbios
()

115 
lb_hódî
 *
hód
;

116 
lb_ªc‹d
 *
ªc
;

117 
lb_mem‹y
 *
mem
;

118 
lb_f‹w¨d
 *
f‹w¨d
;

119 
i
,
íåõs
;

121
hód
 =
	`föd_lb_èbÀ
();

122 i‡(!
hód
) {

127
ªc
 = (
lb_ªc‹d
 *)(((*)
hód
) + (*head));

128 i‡(
ªc
->
èg
 =
LB_TAG_FORWARD
) {

129
f‹w¨d
 = (
lb_f‹w¨d
 *)
ªc
;

130
hód
 = (
lb_hódî
 *)()(
f‹w¨d
->forward);

131 i‡(!
hód
) {  0; }

134
mem
 = 0;

135
	`f‹_óch_lbªc
(
hód
,
ªc
) {

136 i‡(
ªc
->
èg
 =
LB_TAG_MEMORY
) {

137
mem
 = (
lb_mem‹y
 *)
ªc
;

141 i‡(!
mem
) {

144
íåõs
 = (
mem
->
size
 - (*mem))/(mem->
m≠
[0]);

145 i‡(
íåõs
 == 0)

147
mem_öfo
.
e820_ƒ
 = 0;

148 
i
 = 0; i <
íåõs
; i++) {

149 
°¨t
;

150 
size
;

151 
ty≥
;

152 i‡(
i
 >
E820MAX
) {

155
°¨t
 =
mem
->
m≠
[
i
].start;

156
size
 =
mem
->
m≠
[
i
].size;

157
ty≥
 = (
mem
->
m≠
[
i
].ty≥ =
LB_MEM_RAM
)?
E820_RAM
:
E820_RESERVED
;

158
mem_öfo
.
e820
[mem_öfo.
e820_ƒ
].
addr
 =
°¨t
;

159
mem_öfo
.
e820
[mem_öfo.
e820_ƒ
].
size
 = size;

160
mem_öfo
.
e820
[mem_öfo.
e820_ƒ
].
ty≥
 =Åype;

161
mem_öfo
.
e820_ƒ
++;

164
	}
}

	@linuxbios_tables.h

1 #i‚de‡
LINUXBIOS_TABLES_H


2 
	#LINUXBIOS_TABLES_H


	)

4 
	~"°döt.h
"

35 
	slb_hódî


37
uöt8_t

	msig«tuª
[4];

38
uöt32_t

	mhódî_byãs
;

39
uöt32_t

	mhódî_checksum
;

40
uöt32_t

	mèbÀ_byãs
;

41
uöt32_t

	mèbÀ_checksum
;

42
uöt32_t

	mèbÀ_íåõs
;

51 
	slb_ªc‹d
 {

52
uöt32_t

	mèg
;

53
uöt32_t

	msize
;

56 
	#LB_TAG_UNUSED
 0x0000

	)

58 
	#LB_TAG_MEMORY
 0x0001

	)

59 
	#LB_TAG_FORWARD
 0x0011

	)

61 
	slb_mem‹y_ønge
 {

62
uöt64_t

	m°¨t
;

63
uöt64_t

	msize
;

64
uöt32_t

	mty≥
;

65 
	#LB_MEM_RAM
 1

	)

66 
	#LB_MEM_RESERVED
 2

	)

70 
	slb_mem‹y
 {

71
uöt32_t

	mèg
;

72
uöt32_t

	msize
;

73 
lb_mem‹y_ønge

	mm≠
[0];

76 
	#LB_TAG_HWRPB
 0x0002

	)

77 
	slb_hwΩb
 {

78
uöt32_t

	mèg
;

79
uöt32_t

	msize
;

80
uöt64_t

	mhwΩb
;

83 
	slb_f‹w¨d
 {

84
uöt32_t

	mèg
;

85
uöt32_t

	msize
;

86
uöt64_t

	mf‹w¨d
;

	@main.c

11 
	~"ã°.h
"

12 
	~"defs.h
"

13 
	~"c⁄fig.h
"

14 #unde‡
TEST_TIMES


15 
	#DEFTESTS
 9

	)

17 
bzîo
();

19 c⁄° 
t£q

	gt£q
[] = {

30 {0, 0, 0, 0,
NULL
}

33 
	gfú°time
 = 0;

34 
	gcmdlöe_∑r£d
 = 0;

36 
v¨s

	gv¨übÀs
 = {};

37 
v¨s
 * c⁄°
	gv
 = &
v¨übÀs
;

39 vﬁ©ûê
ul⁄g
 *
	gp
 = 0;

40
ul⁄g

	gp1
 = 0,
	gp2
 = 0,
	gp0
 = 0;

41 
	g£gs
 = 0,
	gbaû
 = 0;

42 
	gã°_ticks
;

43 
	g¡icks
;

44
ul⁄g

	ghigh_ã°_adr
 = 0x200000;

46 
	gwödow
 = 0;

47 
	gc_ôî
;

48 
pm≠

	gwödows
[] =

101 #i‡(
LOW_TEST_ADR
 > (640*1024))

102 #îr‹
LOW_TEST_ADR

mu°

be

bñow
 640
K


105 
föd_ticks_f‹_ã°
(
ch
, 
ã°
);

106 
compuã_£gmíts
(
wö
);

107 
föd_ticks_f‹_∑ss
();

109 
	$__run_©
(
addr
)

112
	`memmove
((*)
addr
, &
_°¨t
,
_íd
 - _start);

114
p
 = (
ul⁄g
 *)(
addr
 +
°¨tup_32
 -
_°¨t
);

115 *
p
;

116
	}
}

118 
	grun_©_addr
 = 0xffffffff;

119 
	$run_©
(
addr
)

121 
°¨t
;

122 
Àn
;

124
run_©_addr
 =
addr
;

126
°¨t
 = (Ë&
_°¨t
;

127
Àn
 =
_íd
 -
_°¨t
;

128 i‡–((
°¨t
 <
addr
Ë&& ((°¨à+
Àn
) >=áddr)) ||

129 ((
addr
 <
°¨t
Ë&& (◊dd∏+
Àn
) >= start))) {

131 i‡(
addr
 +
Àn
 <
high_ã°_adr
) {

132
	`__run_©
(
high_ã°_adr
);

134 i‡(
°¨t
 +
Àn
 <
addr
) {

135
	`__run_©
(
LOW_TEST_ADR
);

138
	`__run_©
(
run_©_addr
);

139
	}
}

142 
	#MK_PTR
(
£g
,
off
Ë((*)((()(£gË<< 4Ë+ (off)))

	)

143 
	#OLD_CL_MAGIC_ADDR
 ((*Ë
	`MK_PTR
(
INITSEG
,0x20))

	)

144 
	#OLD_CL_MAGIC
 0xA33F

	)

145 
	#OLD_CL_OFFSET_ADDR
 ((*Ë
	`MK_PTR
(
INITSEG
,0x22))

	)

147 
	$∑r£_comm™d_löe
()

149 *
cmdlöe
;

151 i‡(
cmdlöe_∑r£d
)

154 i‡(*
OLD_CL_MAGIC_ADDR
 !
OLD_CL_MAGIC
)

157 
off£t
 = *
OLD_CL_OFFSET_ADDR
;

158
cmdlöe
 =
	`MK_PTR
(
INITSEG
,
off£t
);

161 *
cmdlöe
 == ' ')

162
cmdlöe
++;

164 *
cmdlöe
) {

165 i‡(!
	`°∫cmp
(
cmdlöe
, "console=", 8)) {

166
cmdlöe
 += 8;

167
	`£rül_c⁄sﬁe_£tup
(
cmdlöe
);

171 *
cmdlöe
 && *cmdline != ' ')

172
cmdlöe
++;

173 *
cmdlöe
 == ' ')

174
cmdlöe
++;

177
cmdlöe_∑r£d
 = 1;

178
	}
}

181 
	$do_ã°
()

183 
i
 = 0,
j
 = 0;

184 
chunks
;

185 
lo
,
hi
;

187
	`∑r£_comm™d_löe
();

190 i‡(
run_©_addr
 =()&
_°¨t
) {

191
run_©_addr
 = 0xffffffff;

192 } i‡(
run_©_addr
 != 0xffffffff) {

193
	`__run_©
(
run_©_addr
);

197 i‡(
fú°time
 == 0) {

198 i‡((
ul⁄g
)&
_°¨t
 !
LOW_TEST_ADR
) {

199
	`ª°¨t
();

202
	`öô
();

204
	`föd_ticks_f‹_∑ss
();

206
wödows
[0].
°¨t
 =

207 –
LOW_TEST_ADR
 + (
_íd
 -
_°¨t
) + 4095) >> 12;

210 i‡(
v
->
pm≠
[v->
m£gs
-1].
íd
 > 0x1100) {

211
high_ã°_adr
 = 0x01000000;

213
wödows
[1].
íd
 = (
high_ã°_adr
 >> 12);

214
fú°time
 = 1;

216
baû
 = 0;

219
	`compuã_£gmíts
(
wödow
);

220 i‡(
£gs
 == 0) {

221 
skù_wödow
;

224 i‡(
	`m≠_∑ge
(
v
->
m≠
[0].
pba£_addr
) < 0) {

225 
skù_wödow
;

228 i‡((
ul⁄g
)&
_°¨t
 >
LOW_TEST_ADR
) {

230
v
->
m≠
[0].
°¨t
 =
	`m≠pög
(v->
∂im_lowî
);

232 #ifde‡
USB_WAR


236 i‡((
ul⁄g
)
v
->
m≠
[0].
°¨t
 < 0x500) {

237
v
->
m≠
[0].
°¨t
 = (
ul⁄g
*)0x500;

241
	`˝röt
(
LINE_RANGE
,
COL_MID
+28, " Relocated");

243
	`˝röt
(
LINE_RANGE
,
COL_MID
+28, " ");

247
lo
 =
	`∑ge_of
(
v
->
m≠
[0].
°¨t
);

248
hi
 =
	`∑ge_of
(
v
->
m≠
[
£gs
 -1].
íd
);

249
	`≠röt
(
LINE_RANGE
,
COL_MID
+9,
lo
);

250
	`˝röt
(
LINE_RANGE
,
COL_MID
+14, " - ");

251
	`≠röt
(
LINE_RANGE
,
COL_MID
+17,
hi
);

252
	`≠röt
(
LINE_RANGE
,
COL_MID
+23,
v
->
£À˘ed_∑ges
);

255 #ifde‡
TEST_TIMES


257
ul⁄g

l
,
h
,
t
;

259
asm

	`__vﬁ©ûe__
 (

263 :"˜" (
l
), "=d" (
h
)

264 :"b" (
v
->
¢≠l
), "c" (v->
¢≠h
)

267
	`˝röt
(20, 5, ": :");

268
t
 =
h
 * (()0xfffffff‡/
v
->
˛ks_m£c
) / 1000;

269
t
 +(
l
 /
v
->
˛ks_m£c
) / 1000;

270
i
 =
t
 % 60;

271
	`d¥öt
(20, 10,
i
%10, 1, 0);

272
	`d¥öt
(20, 9,
i
/10, 1, 0);

273
t
 /= 60;

274
i
 =
t
 % 60;

275
	`d¥öt
(20, +7,
i
 % 10, 1, 0);

276
	`d¥öt
(20, +6,
i
 / 10, 1, 0);

277
t
 /= 60;

278
	`d¥öt
(20, 0,
t
, 5, 0);

280
asm

	`__vﬁ©ûe__
 ("rdtsc":"˜" (
v
->
¢≠l
),"=d" (v->
¢≠h
));

285 i‡(
v
->
ã°£l
 >= 0) {

286
v
->
ã°
 = v->
ã°£l
;

289 i‡(
v
->
∑ss
 == 0) {

290
c_ôî
 =
t£q
[
v
->
ã°
].
ôî
/2;

292
c_ôî
 =
t£q
[
v
->
ã°
].
ôî
;

295
	`d¥öt
(
LINE_TST
,
COL_MID
+6,
v
->
ã°
, 2, 1);

296
	`˝röt
(
LINE_TST
,
COL_MID
+9,
t£q
[
v
->
ã°
].
msg
);

297
	`£t_ˇche
(
t£q
[
v
->
ã°
].
ˇche
);

300
chunks
 = 0;

301 
i
 = 0; i <
£gs
; i++) {

302 
Àn
;

303
Àn
 =
v
->
m≠
[
i
].
íd
 - v->m≠[i].
°¨t
;

304
chunks
 +(
Àn
 +
SPINSZ
 -1)/SPINSZ;

306
ã°_ticks
 =
	`föd_ticks_f‹_ã°
(
chunks
,
v
->
ã°
);

307
¡icks
 = 0;

308
v
->
çå
 = 0;

309
	`˝röt
(1,
COL_MID
+8, " ");

310 
t£q
[
v
->
ã°
].
∑t
) {

314
p1
 = 0;

315
p2
 = ~
p1
;

316
	`movöv1
(
c_ôî
,
p1
,
p2
);

317
BAILOUT
;

320
p2
 =
p1
;

321
p1
 = ~
p2
;

322
	`movöv1
(
c_ôî
,
p1
,
p2
);

323
BAILOUT
;

327
p0
 = 0x80;

328 
i
=0; i<8; i++,
p0
=p0>>1) {

329
p1
 =
p0
 | (p0<<8) | (p0<<16) | (p0<<24);

330
p2
 = ~
p1
;

331
	`movöv1
(
c_ôî
,
p1
,
p2
);

332
BAILOUT
;

335
p2
 =
p1
;

336
p1
 = ~
p2
;

337
	`movöv1
(
c_ôî
,
p1
,
p2
);

338
BAILOUT


343 
i
=0,
p1
=1;Ö1;Ö1=p1<<1, i++) {

344
	`movöv32
(
c_ôî
,
p1
, 1, 0x80000000, 0,
i
);

345
BAILOUT


346
	`movöv32
(
c_ôî
,~
p1
, 0xfffffffe,

347 0x7fffffff, 1,
i
);

348
BAILOUT


353
p1
=0;

354 
i
=0; i<
MOD_SZ
; i++) {

355
p2
 = ~
p1
;

356
	`modt°
(
i
,
c_ôî
,
p1
,
p2
);

357
BAILOUT


360
p2
 =
p1
;

361
p1
 = ~
p2
;

362
	`modt°
(
i
,
c_ôî
,
p1
,
p2
);

363
BAILOUT


368
p0
 = 0x80;

369 
j
=0; j<8; j++,
p0
=p0>>1) {

370
p1
 =
p0
 | (p0<<8) | (p0<<16) | (p0<<24);

371 
i
=0; i<
MOD_SZ
; i++) {

372
p2
 = ~
p1
;

373
	`modt°
(
i
,
c_ôî
,
p1
,
p2
);

374
BAILOUT


377
p2
 =
p1
;

378
p1
 = ~
p2
;

379
	`modt°
(
i
,
c_ôî
,
p1
,
p2
);

380
BAILOUT


385
	`addr_t°1
();

386
BAILOUT
;

390
	`addr_t°2
();

391
BAILOUT
;

395
	`block_move
(
c_ôî
);

396
BAILOUT
;

399 i‡(
wödow
 == 0 ) {

400
	`bô_Áde
();

402
BAILOUT
;

405 
i
=0; i <
c_ôî
; i++) {

406
	`movövr
();

407
BAILOUT
;

411 
i
=0; i <
c_ôî
; i++) {

412
p1
 =
	`ønd
();

413
p2
 = ~
p1
;

414
	`movöv1
(2,
p1
,
p2
);

415
BAILOUT
;

420 
j
=0; j<
c_ôî
; j++) {

421
p1
 =
	`ønd
();

422 
i
=0; i<
MOD_SZ
; i++) {

423
p2
 = ~
p1
;

424
	`modt°
(
i
, 2,
p1
,
p2
);

425
BAILOUT


428
p2
 =
p1
;

429
p1
 = ~
p2
;

430
	`modt°
(
i
, 2,
p1
,
p2
);

431
BAILOUT


436
skù_wödow
:

437 i‡(
baû
) {

438 
baû_ã°
;

441
	`∑gög_off
();

442
	`£t_ˇche
(1);

443
wödow
++;

444 i‡(
wödow
 >(
wödows
)/(windows[0])) {

445
wödow
 = 0;

448
	`˝röt
(
LINE_PAT
,
COL_PAT
, " ");

449 i‡(
wödow
 != 0) {

455 i‡(
wödows
[
wödow
].
°¨t
 <

456 ((
ul⁄g
)&
_°¨t
 + (
_íd
 - _start)) >> 12) {

457 i‡(
v
->
pm≠
[v->
m£gs
-1].
íd
 >

458 (((
high_ã°_adr
 + (
_íd
 -
_°¨t
)) >> 12)+1)) {

462
	`run_©
(
high_ã°_adr
);

465 
skù_wödow
;

469
	`run_©
(
LOW_TEST_ADR
);

476
skù_ã°
:

477
v
->
ã°
++;

478
baû_ã°
:

482
	`∑gög_off
();

483
	`£t_ˇche
(1);

484
	`check_öput
();

485
wödow
 = 0;

486
	`˝röt
(
LINE_PAT
,
COL_PAT
-3, " ");

488 i‡(
v
->
ã°
 >9 || v->
ã°£l
 >= 0) {

489
v
->
∑ss
++;

490
	`d¥öt
(
LINE_INFO
,
COL_PASS
,
v
->
∑ss
, 5, 0);

491
v
->
ã°
 = 0;

492
v
->
tŸÆ_ticks
 = 0;

493
v
->
µå
 = 0;

494
	`˝röt
(0,
COL_MID
+8,

496 i‡(
v
->
ecou¡
 =0 && v->
ã°£l
 < 0) {

497
	`˝röt
(
LINE_MSG
+5, 0,

499 if(
BEEP_END_NO_ERROR
) {

500
	`bìp
(1000);

501
	`bìp
(2000);

502
	`bìp
(1000);

503
	`bìp
(2000);

509
	`run_©
(
LOW_TEST_ADR
);

511
	}
}

513 
	$ª°¨t
()

515 
i
;

516 vﬁ©ûê*
µ
;

519
fú°time
 = 0;

520
v
->
ã°
 = 0;

521
v
->
∑ss
 = 0;

522
v
->
msg_löe
 = 0;

523
v
->
ecou¡
 = 0;

524
v
->
ecc_ecou¡
 = 0;

527 
i
=0,
µ
=(*)(
SCREEN_ADR
+0); i<80*24; i++,Öp+=2) {

528 *
µ
 = ' ';

530
	`run_©
(
LOW_TEST_ADR
);

531
	}
}

533 
	$föd_ticks_f‹_∑ss
()

535 
i
,
j
,
chunks
;

537
v
->
µå
 = 0;

540
chunks
 = 0;

541 
j
 = 0; j < (
wödows
)/(windows[0]); j++) {

542
	`compuã_£gmíts
(
j
);

543 
i
 = 0; i <
£gs
; i++) {

544 
Àn
;

545
Àn
 =
v
->
m≠
[
i
].
íd
 - v->m≠[i].
°¨t
;

546
chunks
 +(
Àn
 +
SPINSZ
 -1)/SPINSZ;

549
	`compuã_£gmíts
(
wödow
);

550
wödow
 = 0;

551 
v
->
∑ss_ticks
=0,
i
=0; ((i<
DEFTESTS
Ë&& (DEFTESTS !
NULL
)); i++) {

554 i‡(
v
->
ã°£l
 >= 0) {

555 i‡(
i
 !
v
->
ã°£l
) {

559
v
->
∑ss_ticks
 +
	`föd_ticks_f‹_ã°
(
chunks
,
i
);

561
	}
}

564 
	$föd_ticks_f‹_ã°
(
ch
, 
ã°
)

566 
ticks
=0,
c
;

570 i‡(
v
->
∑ss
 =0 &&
FIRST_PASS_HALF_ITERATIONS
) {

571
c
 =
t£q
[
ã°
].
ôî
/2;

573
c
 =
t£q
[
ã°
].
ôî
;

576 
t£q
[
ã°
].
∑t
) {

578
ticks
 = 2 + 4 *
c
;

581
ticks
 = 24 + 24 *
c
;

584
ticks
 = (1 +
c
 * 2) * 80;

587
ticks
 = (2 +
c
) * 40;

590
ticks
 = (2 +
c
) * 40 * 8;

593
ticks
 = 4;

596
ticks
 = 2;

599
ticks
 = 2 +
c
;

602
ticks
 = 1;

605
ticks
 = 3 *
c
;

608
ticks
 =
c
 + 4 * c;

611
ticks
 = 4 * 40 *
c
;

615 
ticks
*
ch
;

616
	}
}

618 
	$compuã_£gmíts
(
wö
)

620 
w°¨t
,
wíd
;

621 
i
;

624
w°¨t
 =
wödows
[
wö
].
°¨t
;

625
wíd
 =
wödows
[
wö
].
íd
;

626
£gs
 = 0;

629 i‡(
w°¨t
 <
v
->
∂im_lowî
) {

630
w°¨t
 =
v
->
∂im_lowî
;

632 i‡(
wíd
 >
v
->
∂im_uµî
) {

633
wíd
 =
v
->
∂im_uµî
;

635 i‡(
w°¨t
 >
wíd
) {

639 
i
=0; i<
v
->
m£gs
; i++) {

640 
°¨t
,
íd
;

641
°¨t
 =
v
->
pm≠
[
i
].start;

642
íd
 =
v
->
pm≠
[
i
].end;

643 i‡(
°¨t
 <
w°¨t
) {

644
°¨t
 =
w°¨t
;

646 i‡(
íd
 >
wíd
) {

647
íd
 =
wíd
;

650
	`˝röt
(
LINE_SCROLL
+(2*
i
), 0, " (");

651
	`h¥öt
(
LINE_SCROLL
+(2*
i
), 2,
°¨t
);

652
	`˝röt
(
LINE_SCROLL
+(2*
i
), 10, ", ");

653
	`h¥öt
(
LINE_SCROLL
+(2*
i
), 12,
íd
);

654
	`˝röt
(
LINE_SCROLL
+(2*
i
), 20, ") ");

656
	`˝röt
(
LINE_SCROLL
+(2*
i
), 22, "r(");

657
	`h¥öt
(
LINE_SCROLL
+(2*
i
), 24,
w°¨t
);

658
	`˝röt
(
LINE_SCROLL
+(2*
i
), 32, ", ");

659
	`h¥öt
(
LINE_SCROLL
+(2*
i
), 34,
wíd
);

660
	`˝röt
(
LINE_SCROLL
+(2*
i
), 42, ") ");

662
	`˝röt
(
LINE_SCROLL
+(2*
i
), 44, "p(");

663
	`h¥öt
(
LINE_SCROLL
+(2*
i
), 46,
v
->
∂im_lowî
);

664
	`˝röt
(
LINE_SCROLL
+(2*
i
), 54, ", ");

665
	`h¥öt
(
LINE_SCROLL
+(2*
i
), 56,
v
->
∂im_uµî
);

666
	`˝röt
(
LINE_SCROLL
+(2*
i
), 64, ") ");

668
	`˝röt
(
LINE_SCROLL
+(2*
i
+1), 0, "w(");

669
	`h¥öt
(
LINE_SCROLL
+(2*
i
+1), 2,
wödows
[
wö
].
°¨t
);

670
	`˝röt
(
LINE_SCROLL
+(2*
i
+1), 10, ", ");

671
	`h¥öt
(
LINE_SCROLL
+(2*
i
+1), 12,
wödows
[
wö
].
íd
);

672
	`˝röt
(
LINE_SCROLL
+(2*
i
+1), 20, ") ");

674
	`˝röt
(
LINE_SCROLL
+(2*
i
+1), 22, "m(");

675
	`h¥öt
(
LINE_SCROLL
+(2*
i
+1), 24,
v
->
pm≠
[i].
°¨t
);

676
	`˝röt
(
LINE_SCROLL
+(2*
i
+1), 32, ", ");

677
	`h¥öt
(
LINE_SCROLL
+(2*
i
+1), 34,
v
->
pm≠
[i].
íd
);

678
	`˝röt
(
LINE_SCROLL
+(2*
i
+1), 42, ") ");

680
	`˝röt
(
LINE_SCROLL
+(2*
i
+1), 44, "i=");

681
	`h¥öt
(
LINE_SCROLL
+(2*
i
+1), 46, i);

683
	`˝röt
(
LINE_SCROLL
+(2*
i
+2), 0,

686
	`˝röt
(
LINE_SCROLL
+(2*
i
+3), 0,

690 i‡((
°¨t
 <
íd
Ë&& (°¨à<
wíd
Ë&& (íd >
w°¨t
)) {

691
v
->
m≠
[
£gs
].
pba£_addr
 =
°¨t
;

692
v
->
m≠
[
£gs
].
°¨t
 =
	`m≠pög
(start);

693
v
->
m≠
[
£gs
].
íd
 =
	`em≠pög
(end);

695
	`˝röt
(
LINE_SCROLL
+(2*
i
+1), 54, " sg: ");

696
	`h¥öt
(
LINE_SCROLL
+(2*
i
+1), 61,
sg
);

698
£gs
++;

701  (
£gs
);

702
	}
}

	@memsize.c

7 
	~"ã°.h
"

8 
	~"defs.h
"

9 
	~"c⁄fig.h
"

11 
	ge820_ƒ
;

12 
	gmemsz_mode
 =
SZ_MODE_BIOS
;

13 
	gfúmw¨e
 =
FIRMWARE_UNKNOWN
;

15 
ul⁄g

	gÆt_mem_k
;

16 
ul⁄g

	gext_mem_k
;

17 
e820íåy

	ge820
[
E820MAX
];

19 
ul⁄g

p1
,
p2
;

20 vﬁ©ûê
ul⁄g
 *
p
;

22 
s‹t_pm≠
();

23 
check_øm
();

24 
memsize_bios
();

25 
memsize_820
();

26 
memsize_801
();

27 
ßnôize_e820_m≠
(
e820íåy
 *
‹ig_m≠
,

28 
e820íåy
 *
√w_bios
, 
ﬁd_ƒ
);

29 
memsize_löuxbios
();

30 
memsize_¥obe
();

31 
check_øm
();

36 
	$mem_size
()

38 
i
;

39
v
->
ª£rved_∑ges
 = 0;

40
v
->
ã°_∑ges
 = 0;

45 i‡(
e820_ƒ
 =0 &&
Æt_mem_k
 =0 &&
ext_mem_k
 == 0) {

46
ext_mem_k
 =
mem_öfo
.
e88_mem_k
;

47
Æt_mem_k
 =
mem_öfo
.
e801_mem_k
;

48
e820_ƒ
 =
mem_öfo
.e820_nr;

49 
i
=0; i<
mem_öfo
.
e820_ƒ
; i++) {

50
e820
[
i
].
addr
 =
mem_öfo
.e820[i].addr;

51
e820
[
i
].
size
 =
mem_öfo
.e820[i].size;

52
e820
[
i
].
ty≥
 =
mem_öfo
.e820[i].type;

56 
memsz_mode
) {

57 
SZ_MODE_BIOS
:

59
	`memsize_bios
();

61 
SZ_MODE_PROBE
:

63
	`memsize_¥obe
();

64
	`˝röt
(
LINE_INFO
,
COL_MMAP
, "Probed");

68
	`s‹t_pm≠
();

69
v
->
∂im_lowî
 = 0;

70
v
->
∂im_uµî
 = v->
pm≠
[v->
m£gs
-1].
íd
;

72
	`adj_mem
();

73
	`≠röt
(
LINE_INFO
,
COL_RESERVED
,
v
->
ª£rved_∑ges
);

74
	}
}

76 
	$memsize_bios
()

78 i‡(
fúmw¨e
 =
FIRMWARE_PCBIOS
) {

79
	`memsize_820
();

81 i‡(
fúmw¨e
 =
FIRMWARE_LINUXBIOS
) {

82
	`memsize_löuxbios
();

84
	}
}

86 
	$s‹t_pm≠
()

88 
i
,
j
;

92 
i
 = 0; i <
v
->
m£gs
; i++) {

94 
j
 =
i
 -1; j >= 0; j--) {

95 i‡(
v
->
pm≠
[
i
].
°¨t
 > v->pm≠[
j
].start) {

96
j
++;

101 i‡(
i
 !
j
) {

102 
pm≠

ãmp
;

103
ãmp
 =
v
->
pm≠
[
i
];

104
	`memmove
(&
v
->
pm≠
[
j
], &v->pmap[j+1],

105 (
i
 -
j
)* (
ãmp
));

106
v
->
pm≠
[
j
] =
ãmp
;

109
	}
}

110 
	$memsize_löuxbios
()

112 
i
,
n
;

114
n
 = 0;

115 
i
=0; i <
e820_ƒ
; i++) {

116 
íd
;

117 i‡(
e820
[
i
].
ty≥
 !
E820_RAM
) {

120
íd
 =
e820
[
i
].
addr
;

121
íd
 +
e820
[
i
].
size
;

122
v
->
pm≠
[
n
].
°¨t
 = (
e820
[
i
].
addr
 + 4095) >> 12;

123
v
->
pm≠
[
n
].
íd
 =Énd >> 12;

124
v
->
ã°_∑ges
 +v->
pm≠
[
n
].
íd
 - v->pm≠[n].
°¨t
;

125
n
++;

127
v
->
m£gs
 =
n
;

128
	`˝röt
(
LINE_INFO
,
COL_MMAP
, "LxBIOS");

129
	}
}

130 
	$memsize_820
()

132 
i
,
n
,
ƒ
;

133 
e820íåy

nm
[
E820MAX
];

136
ƒ
 =
	`ßnôize_e820_m≠
(
e820
,
nm
,
e820_ƒ
);

139 i‡(
ƒ
 < 1 ||Ç∏>
E820MAX
) {

140
	`memsize_801
();

145
n
 = 0;

146 
i
=0; i<
ƒ
; i++) {

147 i‡(
nm
[
i
].
ty≥
 =
E820_RAM
 ||Çm[i].ty≥ =
E820_ACPI
) {

148 
°¨t
;

149 
íd
;

150
°¨t
 =
nm
[
i
].
addr
;

151
íd
 =
°¨t
 +
nm
[
i
].
size
;

154 i‡(
°¨t
 >
RES_START
 && sèπ <
RES_END
) {

155 i‡(
íd
 <
RES_END
) {

158
°¨t
 =
RES_END
;

160 i‡(
íd
 >
RES_START
 &&Énd <
RES_END
) {

161
íd
 =
RES_START
;

163
v
->
pm≠
[
n
].
°¨t
 = (start + 4095) >> 12;

164
v
->
pm≠
[
n
].
íd
 =Énd >> 12;

165
v
->
ã°_∑ges
 +v->
pm≠
[
n
].
íd
 - v->pm≠[n].
°¨t
;

166
n
++;

167 } i‡(
nm
[
i
].
ty≥
 =
E820_NVS
) {

168
v
->
ª£rved_∑ges
 +
nm
[
i
].
size
 >> 12;

171
v
->
m£gs
 =
n
;

172
	`˝röt
(
LINE_INFO
,
COL_MMAP
, "É820");

173
	}
}

175 
	$memsize_801
()

177
ul⁄g

mem_size
;

182 i‡(
Æt_mem_k
 <
ext_mem_k
) {

183
mem_size
 =
ext_mem_k
;

184
	`˝röt
(
LINE_INFO
,
COL_MMAP
, "É88");

186
mem_size
 =
Æt_mem_k
;

187
	`˝röt
(
LINE_INFO
,
COL_MMAP
, "É801");

190
v
->
pm≠
[0].
°¨t
 = 0;

191
v
->
pm≠
[0].
íd
 =
RES_START
 >> 12;

192
v
->
ã°_∑ges
 =
RES_START
 >> 12;

195
v
->
pm≠
[1].
°¨t
 = (
RES_END
 + 4095) >> 12;

196
v
->
pm≠
[1].
íd
 = (
mem_size
 + 1024) >> 2;

197
v
->
ã°_∑ges
 +
mem_size
 >> 2;

198
v
->
m£gs
 = 2;

199
	}
}

208 
	$ßnôize_e820_m≠
(
e820íåy
 *
‹ig_m≠
, e820íåy *
√w_bios
,

209 
ﬁd_ƒ
)

211 
	sch™ge_membî
 {

212 
e820íåy
 *
pbios
;

213 
addr
;

215 
ch™ge_membî

ch™ge_poöt_li°
[2*
E820MAX
];

216 
ch™ge_membî
 *
ch™ge_poöt
[2*
E820MAX
];

217 
e820íåy
 *
ovîœp_li°
[
E820MAX
];

218 
e820íåy

biosm≠
[
E820MAX
];

219 
ch™ge_membî
 *
ch™ge_tmp
;

220
ul⁄g

cuºít_ty≥
,
œ°_ty≥
;

221 
œ°_addr
;

222 
chgidx
,
°ûl_ch™gög
;

223 
ovîœp_íåõs
;

224 
√w_bios_íåy
;

225 
i
;

262 
i
=0; i<
ﬁd_ƒ
; i++) {

263
biosm≠
[
i
].
addr
 =
‹ig_m≠
[i].addr;

264
biosm≠
[
i
].
size
 =
‹ig_m≠
[i].size;

265
biosm≠
[
i
].
ty≥
 =
‹ig_m≠
[i].type;

269 
i
=0; i<
ﬁd_ƒ
; i++) {

270 i‡(
biosm≠
[
i
].
addr
 + biosm≠[i].
size
 < biosmap[i].addr)

275 
i
=0; i < 2*
ﬁd_ƒ
; i++)

276
ch™ge_poöt
[
i
] = &
ch™ge_poöt_li°
[i];

279
chgidx
 = 0;

280 
i
=0; i <
ﬁd_ƒ
; i++) {

281
ch™ge_poöt
[
chgidx
]->
addr
 =
biosm≠
[
i
].addr;

282
ch™ge_poöt
[
chgidx
++]->
pbios
 = &
biosm≠
[
i
];

283
ch™ge_poöt
[
chgidx
]->
addr
 =
biosm≠
[
i
].add∏+ biosm≠[i].
size
;

284
ch™ge_poöt
[
chgidx
++]->
pbios
 = &
biosm≠
[
i
];

288
°ûl_ch™gög
 = 1;

289 
°ûl_ch™gög
) {

290
°ûl_ch™gög
 = 0;

291 
i
=1; i < 2*
ﬁd_ƒ
; i++) {

294 i‡((
ch™ge_poöt
[
i
]->
addr
 < change_point[i-1]->addr) ||

295 ((
ch™ge_poöt
[
i
]->
addr
 == change_point[i-1]->addr) &&

296 (
ch™ge_poöt
[
i
]->
addr
 =ch™ge_poöt[i]->
pbios
->addr) &&

297 (
ch™ge_poöt
[
i
-1]->
addr
 !ch™ge_poöt[i-1]->
pbios
->addr))

300
ch™ge_tmp
 =
ch™ge_poöt
[
i
];

301
ch™ge_poöt
[
i
] = change_point[i-1];

302
ch™ge_poöt
[
i
-1] =
ch™ge_tmp
;

303
°ûl_ch™gög
=1;

309
ovîœp_íåõs
=0;

310
√w_bios_íåy
=0;

311
œ°_ty≥
 = 0;

312
œ°_addr
 = 0;

314 
chgidx
=0; chgidx < 2*
ﬁd_ƒ
; chgidx++)

317 i‡(
ch™ge_poöt
[
chgidx
]->
addr
 =ch™ge_poöt[chgidx]->
pbios
->addr)

320
ovîœp_li°
[
ovîœp_íåõs
++]=
ch™ge_poöt
[
chgidx
]->
pbios
;

325 
i
=0; i<
ovîœp_íåõs
; i++)

327 i‡(
ovîœp_li°
[
i
] =
ch™ge_poöt
[
chgidx
]->
pbios
)

328
ovîœp_li°
[
i
] = ovîœp_li°[
ovîœp_íåõs
-1];

330
ovîœp_íåõs
--;

334
cuºít_ty≥
 = 0;

335 
i
=0; i<
ovîœp_íåõs
; i++)

336 i‡(
ovîœp_li°
[
i
]->
ty≥
 >
cuºít_ty≥
)

337
cuºít_ty≥
 =
ovîœp_li°
[
i
]->
ty≥
;

339 i‡(
cuºít_ty≥
 !
œ°_ty≥
) {

340 i‡(
œ°_ty≥
 != 0) {

341
√w_bios
[
√w_bios_íåy
].
size
 =

342
ch™ge_poöt
[
chgidx
]->
addr
 -
œ°_addr
;

344 i‡(
√w_bios
[
√w_bios_íåy
].
size
 != 0)

345 i‡(++
√w_bios_íåy
 >
E820MAX
)

348 i‡(
cuºít_ty≥
 != 0) {

349
√w_bios
[
√w_bios_íåy
].
addr
 =
ch™ge_poöt
[
chgidx
]->addr;

350
√w_bios
[
√w_bios_íåy
].
ty≥
 =
cuºít_ty≥
;

351
œ°_addr
=
ch™ge_poöt
[
chgidx
]->
addr
;

353
œ°_ty≥
 =
cuºít_ty≥
;

356 (
√w_bios_íåy
);

357
	}
}

359 
	$memsize_¥obe
()

361 
i
,
n
;

362
ul⁄g

m_lim
;

363 
magic
 = 0x1234569;

368
p1
 = (
ul⁄g
)&
magic
;

369
m_lim
 = 0xfffffffc;

370 
p2
 = 0x100000;Ö2;Ö2 <<= 1) {

371
p
 = (
ul⁄g
 *)(
p1
 +
p2
);

372 i‡(*
p
 == 0x1234569) {

373
m_lim
 = --
p2
;

379
	`£t_ˇche
(1);

383
i
 = 0;

384
v
->
pm≠
[
i
].
°¨t
 = ((
ul⁄g
)&
_íd
 + (1 << 12) - 1) >> 12;

385
p
 = (
ul⁄g
 *)(
v
->
pm≠
[
i
].
°¨t
 << 12);

389 (
ul⁄g
)
p
 <
m_lim
 && (ul⁄gÌ >(ul⁄g)&
_íd
) {

393 i‡((
ul⁄g
)
p
 <
RES_END
 && (ul⁄gÌ >
RES_START
) {

394
v
->
pm≠
[
i
].
íd
 =
RES_START
 >> 12;

395
v
->
ã°_∑ges
 +(v->
pm≠
[
i
].
íd
 - v->pm≠[i].
°¨t
);

396
p
 = (
ul⁄g
 *)
RES_END
;

397
i
++;

398
v
->
pm≠
[
i
].
°¨t
 = 0;

399 
f°¨t
;

402 i‡(
	`check_øm
() == 0) {

404
v
->
pm≠
[
i
].
íd
 = ((
ul⁄g
)
p
) >> 12;

405
v
->
ã°_∑ges
 +(v->
pm≠
[
i
].
íd
 - v->pm≠[i].
°¨t
);

406
i
++;

407
v
->
pm≠
[
i
].
°¨t
 = 0;

408
f°¨t
:

413
n
 = 32768 >> 2;

414 (
ul⁄g
)
p
 <
m_lim
 && (ul⁄gÌ >(ul⁄g)&
_íd
) {

417 i‡((
ul⁄g
)
p
 <
RES_END
 &&

418 (
ul⁄g
)
p
 >
RES_START
) {

419
p
 = (
ul⁄g
 *)
RES_END
;

421 i‡(
	`check_øm
() == 1) {

423
v
->
pm≠
[
i
].
°¨t
 = (
ul⁄g
)
p
 >> 12;

429 i‡(--
n
 <= 0) {

430
p
 = (
ul⁄g
 *)
m_lim
;

433
p
 += 0x1000;

436
p
 += 0x1000;

441 i‡(
v
->
pm≠
[
i
].
°¨t
) {

442
v
->
pm≠
[
i
].
íd
 =
m_lim
 >> 12;

443
v
->
ã°_∑ges
 +(v->
pm≠
[
i
].
íd
 - v->pm≠[i].
°¨t
);

444
i
++;

446
v
->
m£gs
 =
i
;

447
	}
}

454 
	$check_øm
()

456 
s
;

458
p1
 = *
p
;

461 *
p
 = ~
p1
;

462
p2
 = *
p
;

463
s
 = 0;

466 i‡((0xf‡&
p1
Ë!(0xf‡&
p2
)) {

467
s
++;

469 i‡((0xff00 &
p1
Ë!(0xff00 &
p2
)) {

470
s
++;

472 i‡((0xff0000 &
p1
Ë!(0xff0000 &
p2
)) {

473
s
++;

475 i‡((0xff000000 &
p1
Ë!(0xff000000 &
p2
)) {

476
s
++;

478 i‡(
s
 == 4) {

484
	}
}

	@msr.h

1 #i‚de‡
__ASM_MSR_H


2 
	#__ASM_MSR_H


	)

10 
	#rdm§
(
m§
,
vÆ1
,
vÆ2
) \

11
__asm__

	`__vﬁ©ûe__
("rdmsr" \

12 : "˜" (
vÆ1
), "=d" (
vÆ2
) \

13 : "c" (
m§
))

	)

15 
	#wrm§
(
m§
,
vÆ1
,
vÆ2
) \

16
__asm__

	`__vﬁ©ûe__
("wrmsr" \

18 : "c" (
m§
), "a" (
vÆ1
), "d" (
vÆ2
))

	)

20 
	#rdtsc
(
low
,
high
) \

21
__asm__

	`__vﬁ©ûe__
("rdtsc" : "˜" (
low
), "=d" (
high
))

	)

23 
	#rdts˛
(
low
) \

24
__asm__

	`__vﬁ©ûe__
("rdtsc" : "˜" (
low
Ë: : "edx")

	)

26 
	#rdts˛l
(
vÆ
) \

27
__asm__

	`__vﬁ©ûe__
("rdtsc" : "=A" (
vÆ
))

	)

29 
	#wrôe_tsc
(
vÆ1
,
vÆ2
Ë
	`wrm§
(0x10, vÆ1, vÆ2)

	)

31 
	#rdpmc
(
cou¡î
,
low
,
high
) \

32
__asm__

	`__vﬁ©ûe__
("rdpmc" \

33 : "˜" (
low
), "=d" (
high
) \

34 : "c" (
cou¡î
))

	)

38 
	#MSR_IA32_P5_MC_ADDR
 0

	)

39 
	#MSR_IA32_P5_MC_TYPE
 1

	)

40 
	#MSR_IA32_PLATFORM_ID
 0x17

	)

41 
	#MSR_IA32_EBL_CR_POWERON
 0x2a

	)

43 
	#MSR_IA32_APICBASE
 0x1b

	)

44 
	#MSR_IA32_APICBASE_BSP
 (1<<8)

	)

45 
	#MSR_IA32_APICBASE_ENABLE
 (1<<11)

	)

46 
	#MSR_IA32_APICBASE_BASE
 (0xfffff<<12)

	)

48 
	#MSR_IA32_UCODE_WRITE
 0x79

	)

49 
	#MSR_IA32_UCODE_REV
 0x8b

	)

51 
	#MSR_IA32_BBL_CR_CTL
 0x119

	)

53 
	#MSR_IA32_MCG_CAP
 0x179

	)

54 
	#MSR_IA32_MCG_STATUS
 0x17a

	)

55 
	#MSR_IA32_MCG_CTL
 0x17b

	)

57 
	#MSR_IA32_THERM_CONTROL
 0x19a

	)

58 
	#MSR_IA32_THERM_INTERRUPT
 0x19b

	)

59 
	#MSR_IA32_THERM_STATUS
 0x19c

	)

60 
	#MSR_IA32_MISC_ENABLE
 0x1a0

	)

62 
	#MSR_IA32_DEBUGCTLMSR
 0x1d9

	)

63 
	#MSR_IA32_LASTBRANCHFROMIP
 0x1db

	)

64 
	#MSR_IA32_LASTBRANCHTOIP
 0x1dc

	)

65 
	#MSR_IA32_LASTINTFROMIP
 0x1dd

	)

66 
	#MSR_IA32_LASTINTTOIP
 0x1de

	)

68 
	#MSR_IA32_MC0_CTL
 0x400

	)

69 
	#MSR_IA32_MC0_STATUS
 0x401

	)

70 
	#MSR_IA32_MC0_ADDR
 0x402

	)

71 
	#MSR_IA32_MC0_MISC
 0x403

	)

73 
	#MSR_P6_PERFCTR0
 0xc1

	)

74 
	#MSR_P6_PERFCTR1
 0xc2

	)

75 
	#MSR_P6_EVNTSEL0
 0x186

	)

76 
	#MSR_P6_EVNTSEL1
 0x187

	)

78 
	#MSR_IA32_PERF_STATUS
 0x198

	)

79 
	#MSR_IA32_PERF_CTL
 0x199

	)

82 
	#MSR_K6_EFER
 0xC0000080

	)

83 
	#MSR_K6_STAR
 0xC0000081

	)

84 
	#MSR_K6_WHCR
 0xC0000082

	)

85 
	#MSR_K6_UWCCR
 0xC0000085

	)

86 
	#MSR_K6_EPMR
 0xC0000086

	)

87 
	#MSR_K6_PSOR
 0xC0000087

	)

88 
	#MSR_K6_PFIR
 0xC0000088

	)

90 
	#MSR_K7_EVNTSEL0
 0xC0010000

	)

91 
	#MSR_K7_PERFCTR0
 0xC0010004

	)

92 
	#MSR_K7_HWCR
 0xC0010015

	)

93 
	#MSR_K7_CLK_CTL
 0xC001001b

	)

94 
	#MSR_K7_FID_VID_CTL
 0xC0010041

	)

95 
	#MSR_K7_VID_STATUS
 0xC0010042

	)

98 
	#MSR_IDT_FCR1
 0x107

	)

99 
	#MSR_IDT_FCR2
 0x108

	)

100 
	#MSR_IDT_FCR3
 0x109

	)

101 
	#MSR_IDT_FCR4
 0x10a

	)

103 
	#MSR_IDT_MCR0
 0x110

	)

104 
	#MSR_IDT_MCR1
 0x111

	)

105 
	#MSR_IDT_MCR2
 0x112

	)

106 
	#MSR_IDT_MCR3
 0x113

	)

107 
	#MSR_IDT_MCR4
 0x114

	)

108 
	#MSR_IDT_MCR5
 0x115

	)

109 
	#MSR_IDT_MCR6
 0x116

	)

110 
	#MSR_IDT_MCR7
 0x117

	)

111 
	#MSR_IDT_MCR_CTRL
 0x120

	)

114 
	#MSR_VIA_FCR
 0x1107

	)

115 
	#MSR_VIA_LONGHAUL
 0x110a

	)

116 
	#MSR_VIA_BCR2
 0x1147

	)

119 
	#MSR_TMTA_LONGRUN_CTRL
 0x80868010

	)

120 
	#MSR_TMTA_LONGRUN_FLAGS
 0x80868011

	)

121 
	#MSR_TMTA_LRTI_READOUT
 0x80868018

	)

122 
	#MSR_TMTA_LRTI_VOLT_MHZ
 0x8086801a

	)

	@patn.c

16 
	~"ã°.h
"

22 
	#DEFAULT_MASK
 ((~0LË<< 2)

	)

35 
	#COMBINE_MASK
(
a
,
b
,
c
,
d
Ë(◊ & b & c & dË| (~®& b & ~¯& d))

	)

39 
	$comböe
 (
ul⁄g

adr1
, ul⁄g
mask1
, ul⁄g
adr2
, ul⁄g
mask2
,

40
ul⁄g
 *
adr
, ul⁄g *
mask
) {

42 *
mask
 =
	`COMBINE_MASK
 (
adr1
,
mask1
,
adr2
,
mask2
);

44 *
adr
 =
adr1
 |
adr2
;

45 *
adr
 &*
mask
;

46
	}
}

50
ul⁄g

	$addªs£s
 (
ul⁄g

mask
) {

51
ul⁄g

˘r
=1;

52 
i
=32;

53 
i
-- > 0) {

54 i‡(! (
mask
 & 1)) {

55
˘r
 += ctr;

57
mask
 >>= 1;

59 
˘r
;

60
	}
}

65
ul⁄g

	$combico°
 (
ul⁄g

adr1
, ul⁄g
mask1
, ul⁄g
adr2
, ul⁄g
mask2
) {

66
ul⁄g

co°1
=
	`addªs£s
 (
mask1
);

67
ul⁄g

tmp
,
mask
;

68
	`comböe
 (
adr1
,
mask1
,
adr2
,
mask2
, &
tmp
, &
mask
);

69 
	`addªs£s
 (
mask
Ë-
co°1
;

70
	}
}

75 
	$chópödex
 (
ul⁄g

adr1
, ul⁄g
mask1
, ul⁄g
möco°
) {

76 
i
=
v
->
num∑ä
;

77 
idx
=-1;

78 
i
-- > 0) {

79
ul⁄g

tmpco°
=
	`combico°
(
v
->
∑ä
[
i
].
adr
, v->∑ä[i].
mask
,
adr1
,
mask1
);

80 i‡(
tmpco°
 <
möco°
) {

81
möco°
=
tmpco°
;

82
idx
=
i
;

85 
idx
;

86
	}
}

91 
	$ªloˇãidx
 (
idx
) {

92
ul⁄g

adr
 =
v
->
∑ä
[
idx
].adr;

93
ul⁄g

mask
=
v
->
∑ä
[
idx
].mask;

94 
√w
;

95
v
->
∑ä
[
idx
].
adr
 ^= ~0L;

96
√w
=
	`chópödex
 (
adr
,
mask
, 1+
	`addªs£s
 (mask));

97
v
->
∑ä
[
idx
].
adr
 =ádr;

98 
√w
;

99
	}
}

105 
	$ªloˇãif‰ì
 (
idx
) {

106 
√widx
=
	`ªloˇãidx
 (
idx
);

107 i‡(
√widx
>=0) {

108
ul⁄g

ˇdr
,
cmask
;

109
	`comböe
 (
v
->
∑ä
 [
√widx
].
adr
, v->∑ä[√widx].
mask
,

110
v
->
∑ä
 [
idx
].
adr
, v->∑ä[ idx].
mask
,

111 &
ˇdr
, &
cmask
);

112
v
->
∑ä
[
√widx
].
adr
 =
ˇdr
;

113
v
->
∑ä
[
√widx
].
mask
=
cmask
;

114 i‡(
idx
 < --
v
->
num∑ä
) {

115
v
->
∑ä
[
idx
].
adr
 =v->∑ä[v->
num∑ä
].adr;

116
v
->
∑ä
[
idx
].
mask
=v->∑ä[v->
num∑ä
].mask;

118
	`ªloˇãif‰ì
 (
√widx
);

120
	}
}

125 
	$ö£πaddªss
 (
ul⁄g

adr
) {

126 i‡(
	`chópödex
 (
adr
,
DEFAULT_MASK
, 1L) != -1)

129 i‡(
v
->
num∑ä
 <
BADRAM_MAXPATNS
) {

130
v
->
∑ä
[v->
num∑ä
].
adr
 =adr;

131
v
->
∑ä
[v->
num∑ä
].
mask
=
DEFAULT_MASK
;

132
v
->
num∑ä
++;

133
	`ªloˇãif‰ì
 (
v
->
num∑ä
-1);

135 
idx
=
	`chópödex
 (
adr
,
DEFAULT_MASK
, ~0L);

136
ul⁄g

ˇdr
,
cmask
;

137
	`comböe
 (
v
->
∑ä
 [
idx
].
adr
, v->∑ä[idx].
mask
,

138
adr
,
DEFAULT_MASK
, &
ˇdr
, &
cmask
);

139
v
->
∑ä
[
idx
].
adr
 =
ˇdr
;

140
v
->
∑ä
[
idx
].
mask
=
cmask
;

141
	`ªloˇãif‰ì
 (
idx
);

144
	}
}

	@pci.c

11 
	~"io.h
"

12 
	~"pci.h
"

13 
	~"ã°.h
"

15 
	#PCI_CONF_TYPE_NONE
 0

	)

16 
	#PCI_CONF_TYPE_1
 1

	)

17 
	#PCI_CONF_TYPE_2
 2

	)

19 
˝u_idít

˝u_id
;

21 
	gpci_c⁄f_ty≥
 =
PCI_CONF_TYPE_NONE
;

23 
	#PCI_CONF1_ADDRESS
(
bus
,
dev
,
‚
,
ªg
) \

24 (0x80000000 | (
bus
 << 16Ë| (
dev
 << 11Ë| (
‚
 << 8Ë| (
ªg
 & ~3))

	)

26 
	#PCI_CONF2_ADDRESS
(
dev
,
ªg
Ë()(0xC000 | (dev << 8Ë|Ñeg)

	)

28 
	#PCI_CONF3_ADDRESS
(
bus
,
dev
,
‚
,
ªg
) \

29 (0x80000000 | (((
ªg
 >> 8Ë& 0xFË<< 24Ë| (
bus
 << 16Ë| ((
dev
 & 0x1FË<< 11Ë| (
‚
 << 8Ë| (ªg & 0xFF))

	)

31 
	$pci_c⁄f_ªad
(
bus
, 
dev
, 
‚
, 
ªg
, 
Àn
, *
vÆue
)

33 
ªsu…
;

35 i‡(!
vÆue
 || (
bus
 > 255Ë|| (
dev
 > 31Ë|| (
‚
 > 7Ë|| (
ªg
 > 255 &&
pci_c⁄f_ty≥
 !
PCI_CONF_TYPE_1
))

38
ªsu…
 = -1;

39 
pci_c⁄f_ty≥
) {

40 
PCI_CONF_TYPE_1
:

41 if(
ªg
 < 256){

42
	`oué
(
	`PCI_CONF1_ADDRESS
(
bus
,
dev
,
‚
,
ªg
), 0xCF8);

44
	`oué
(
	`PCI_CONF3_ADDRESS
(
bus
,
dev
,
‚
,
ªg
), 0xCF8);

46 
Àn
) {

47 1: *
vÆue
 =
	`öb
(0xCFC + (
ªg
 & 3));
ªsu…
 = 0; ;

48 2: *
vÆue
 =
	`öw
(0xCFC + (
ªg
 & 2));
ªsu…
 = 0; ;

49 4: *
vÆue
 =
	`öl
(0xCFC);
ªsu…
 = 0; ;

52 
PCI_CONF_TYPE_2
:

53
	`outb
(0xF0 | (
‚
 << 1), 0xCF8);

54
	`outb
(
bus
, 0xCFA);

56 
Àn
) {

57 1: *
vÆue
 =
	`öb
(
	`PCI_CONF2_ADDRESS
(
dev
,
ªg
));
ªsu…
 = 0; ;

58 2: *
vÆue
 =
	`öw
(
	`PCI_CONF2_ADDRESS
(
dev
,
ªg
));
ªsu…
 = 0; ;

59 4: *
vÆue
 =
	`öl
(
	`PCI_CONF2_ADDRESS
(
dev
,
ªg
));
ªsu…
 = 0; ;

61
	`outb
(0, 0xCF8);

64 
ªsu…
;

65
	}
}

67 
	$pci_c⁄f_wrôe
(
bus
, 
dev
, 
‚
, 
ªg
, 
Àn
, 
vÆue
)

69 
ªsu…
;

71 i‡((
bus
 > 255Ë|| (
dev
 > 31Ë|| (
‚
 > 7Ë|| (
ªg
 > 255))

74
ªsu…
 = -1;

75 
pci_c⁄f_ty≥
) {

76 
PCI_CONF_TYPE_1
:

77
	`oué
(
	`PCI_CONF1_ADDRESS
(
bus
,
dev
,
‚
,
ªg
), 0xCF8);

78 
Àn
) {

79 1:
	`outb
(
vÆue
, 0xCFC + (
ªg
 & 3));
ªsu…
 = 0; ;

80 2:
	`outw
(
vÆue
, 0xCFC + (
ªg
 & 2));
ªsu…
 = 0; ;

81 4:
	`oué
(
vÆue
, 0xCFC);
ªsu…
 = 0; ;

84 
PCI_CONF_TYPE_2
:

85
	`outb
(0xF0 | (
‚
 << 1), 0xCF8);

86
	`outb
(
bus
, 0xCFA);

88 
Àn
) {

89 1:
	`outb
(
vÆue
,
	`PCI_CONF2_ADDRESS
(
dev
,
ªg
));
ªsu…
 = 0; ;

90 2:
	`outw
(
vÆue
,
	`PCI_CONF2_ADDRESS
(
dev
,
ªg
));
ªsu…
 = 0; ;

91 4:
	`oué
(
vÆue
,
	`PCI_CONF2_ADDRESS
(
dev
,
ªg
));
ªsu…
 = 0; ;

93
	`outb
(0, 0xCF8);

96 
ªsu…
;

97
	}
}

99 
	$pci_ßnôy_check
()

101 
vÆue
;

102 
ªsu…
;

108
ªsu…
 =
	`pci_c⁄f_ªad
(0, 0, 0,
PCI_CLASS_DEVICE
, 2, &
vÆue
);

109 i‡(
ªsu…
 == 0) {

110
ªsu…
 = -1;

111 i‡(
vÆue
 =
PCI_CLASS_BRIDGE_HOST
) {

112
ªsu…
 = 0;

115 
ªsu…
;

116
	}
}

118 
	$pci_check_dúe˘
()

120 
tmpCFB
;

121 
tmpCF8
;

123 i‡(
˝u_id
.
víd_id
[0] ='A' && cpu_id.
ty≥
 == 15) {

124
pci_c⁄f_ty≥
 =
PCI_CONF_TYPE_1
;

128
pci_c⁄f_ty≥
 =
PCI_CONF_TYPE_1
;

129
tmpCFB
 =
	`öb
(0xCFB);

130
	`outb
(0x01, 0xCFB);

131
tmpCF8
 =
	`öl
(0xCF8);

132
	`oué
(0x80000000, 0xCF8);

133 i‡((
	`öl
(0xCF8Ë=0x80000000Ë&& (
	`pci_ßnôy_check
() == 0)) {

134
	`oué
(
tmpCF8
, 0xCF8);

135
	`outb
(
tmpCFB
, 0xCFB);

138
	`oué
(
tmpCF8
, 0xCF8);

141
pci_c⁄f_ty≥
 =
PCI_CONF_TYPE_2
;

142
	`outb
(0x00, 0xCFB);

143
	`outb
(0x00, 0xCF8);

144
	`outb
(0x00, 0xCFA);

145 i‡(
	`öb
(0xCF8Ë=0x00 && inb(0xCFAË=0x00 && (
	`pci_ßnôy_check
() == 0)) {

146
	`outb
(
tmpCFB
, 0xCFB);

150
	`outb
(
tmpCFB
, 0xCFB);

153
pci_c⁄f_ty≥
 =
PCI_CONF_TYPE_NONE
;

157
	}
}

159 
	$pci_öô
()

161 
ªsu…
;

165
ªsu…
 =
	`pci_check_dúe˘
();

166 
ªsu…
;

167
	}
}

	@pci.h

1 #i‚de‡
MEMTEST_PCI_H


2 
	#MEMTEST_PCI_H


	)

4 
pci_c⁄f_ªad
(
bus
, 
dev
, 
‚
, 
ªg
,

5 
Àn
, *
vÆue
);

6 
pci_c⁄f_wrôe
(
bus
, 
dev
, 
‚
, 
ªg
,

7 
Àn
, 
vÆue
);

8 
pci_öô
();

15 
	#PCI_VENDOR_ID
 0x00

	)

16 
	#PCI_DEVICE_ID
 0x02

	)

17 
	#PCI_COMMAND
 0x04

	)

18 
	#PCI_COMMAND_IO
 0x1

	)

19 
	#PCI_COMMAND_MEMORY
 0x2

	)

20 
	#PCI_COMMAND_MASTER
 0x4

	)

21 
	#PCI_COMMAND_SPECIAL
 0x8

	)

22 
	#PCI_COMMAND_INVALIDATE
 0x10

	)

23 
	#PCI_COMMAND_VGA_PALETTE
 0x20

	)

24 
	#PCI_COMMAND_PARITY
 0x40

	)

25 
	#PCI_COMMAND_WAIT
 0x80

	)

26 
	#PCI_COMMAND_SERR
 0x100

	)

27 
	#PCI_COMMAND_FAST_BACK
 0x200

	)

29 
	#PCI_STATUS
 0x06

	)

30 
	#PCI_STATUS_CAP_LIST
 0x10

	)

31 
	#PCI_STATUS_66MHZ
 0x20

	)

32 
	#PCI_STATUS_UDF
 0x40

	)

33 
	#PCI_STATUS_FAST_BACK
 0x80

	)

34 
	#PCI_STATUS_PARITY
 0x100

	)

35 
	#PCI_STATUS_DEVSEL_MASK
 0x600

	)

36 
	#PCI_STATUS_DEVSEL_FAST
 0x000

	)

37 
	#PCI_STATUS_DEVSEL_MEDIUM
 0x200

	)

38 
	#PCI_STATUS_DEVSEL_SLOW
 0x400

	)

39 
	#PCI_STATUS_SIG_TARGET_ABORT
 0x800

	)

40 
	#PCI_STATUS_REC_TARGET_ABORT
 0x1000

	)

41 
	#PCI_STATUS_REC_MASTER_ABORT
 0x2000

	)

42 
	#PCI_STATUS_SIG_SYSTEM_ERROR
 0x4000

	)

43 
	#PCI_STATUS_DETECTED_PARITY
 0x8000

	)

45 
	#PCI_CLASS_REVISION
 0x08

	)

47 
	#PCI_REVISION_ID
 0x08

	)

48 
	#PCI_CLASS_PROG
 0x09

	)

49 
	#PCI_CLASS_DEVICE
 0x0®

	)

51 
	#PCI_CACHE_LINE_SIZE
 0x0¯

	)

52 
	#PCI_LATENCY_TIMER
 0x0d

	)

53 
	#PCI_HEADER_TYPE
 0x0ê

	)

54 
	#PCI_HEADER_TYPE_NORMAL
 0

	)

55 
	#PCI_HEADER_TYPE_BRIDGE
 1

	)

56 
	#PCI_HEADER_TYPE_CARDBUS
 2

	)

58 
	#PCI_BIST
 0x0‡

	)

59 
	#PCI_BIST_CODE_MASK
 0x0‡

	)

60 
	#PCI_BIST_START
 0x40

	)

61 
	#PCI_BIST_CAPABLE
 0x80

	)

69 
	#PCI_BASE_ADDRESS_0
 0x10

	)

70 
	#PCI_BASE_ADDRESS_1
 0x14

	)

71 
	#PCI_BASE_ADDRESS_2
 0x18

	)

72 
	#PCI_BASE_ADDRESS_3
 0x1¯

	)

73 
	#PCI_BASE_ADDRESS_4
 0x20

	)

74 
	#PCI_BASE_ADDRESS_5
 0x24

	)

75 
	#PCI_BASE_ADDRESS_SPACE
 0x01

	)

76 
	#PCI_BASE_ADDRESS_SPACE_IO
 0x01

	)

77 
	#PCI_BASE_ADDRESS_SPACE_MEMORY
 0x00

	)

78 
	#PCI_BASE_ADDRESS_MEM_TYPE_MASK
 0x06

	)

79 
	#PCI_BASE_ADDRESS_MEM_TYPE_32
 0x00

	)

80 
	#PCI_BASE_ADDRESS_MEM_TYPE_1M
 0x02

	)

81 
	#PCI_BASE_ADDRESS_MEM_TYPE_64
 0x04

	)

82 
	#PCI_BASE_ADDRESS_MEM_PREFETCH
 0x08

	)

83 
	#PCI_BASE_ADDRESS_MEM_MASK
 (~0x0fUL)

	)

84 
	#PCI_BASE_ADDRESS_IO_MASK
 (~0x03UL)

	)

89 
	#PCI_CLASS_NOT_DEFINED
 0x0000

	)

90 
	#PCI_CLASS_NOT_DEFINED_VGA
 0x0001

	)

92 
	#PCI_BASE_CLASS_BRIDGE
 0x06

	)

93 
	#PCI_CLASS_BRIDGE_HOST
 0x0600

	)

	@random.c

6 
ønd
( );

7 
ønd_£ed
( , );

10 
	#ønd_Êﬂt
 (()
	`ønd
(Ë/ 4294967296.0)

	)

12 
	gSEED_X
 = 521288629;

13 
	gSEED_Y
 = 362436069;

16 
	$ønd
 ()

18 
a
 = 18000,
b
 = 30903;

20
SEED_X
 =
a
*(SEED_X&65535) + (SEED_X>>16);

21
SEED_Y
 =
b
*(SEED_Y&65535) + (SEED_Y>>16);

23  ((
SEED_X
<<16Ë+ (
SEED_Y
&65535));

24
	}
}

27 
	$ønd_£ed
–
£ed1
, 
£ed2
 )

29 i‡(
£ed1
Ë
SEED_X
 = seed1;

30 i‡(
£ed2
Ë
SEED_Y
 = seed2;

31
	}
}

	@reloc.c

1 
	~<°ddef.h
>

2 
	~"°döt.h
"

3 
	~"ñf.h
"

4 
	~<°rög.h
>

6 
	#__ELF_NATIVE_CLASS
 32

	)

7 
	#ELF_MACHINE_NO_RELA
 1

	)

12 
	#ElfW
(
ty≥
Ë
	`_ElfW
 (
Elf
,
__ELF_NATIVE_CLASS
,Åy≥)

	)

13 
	#_ElfW
(
e
,
w
,
t
Ë
	`_ElfW_1
 (e, w,
_
##t)

	)

14 
	#_ElfW_1
(
e
,
w
,
t
Ëe##w##
	)
t

17 
	#ELFW
(
ty≥
Ë
	`_ElfW
 (
ELF
,
__ELF_NATIVE_CLASS
,Åy≥)

	)

19 
	#as£π
(
ex¥
Ë((Ë0)

	)

23 
	#RTLD_BOOTSTRAP


	)

25 
	slök_m≠


27
ElfW
(
Addr
Ë
	ml_addr
;

28
ElfW
(
Addr
Ë
	mŒ_addr
;

29
ElfW
(
Dyn
Ë*
	ml_ld
;

39
ElfW
(
Dyn
Ë*
	ml_öfo
[
DT_NUM
 +
DT_PROCNUM
 +
DT_EXTRANUM
];

46 
ölöe

Elf32_Addr

__©åibuã__
 ((
unu£d
))

47
	$ñf_machöe_dy«mic
 ()

49 
Elf32_Addr
 *
gŸ

	`asm
 ("%ebx");

50  *
gŸ
;

51
	}
}

54 
ölöe

Elf32_Addr

__©åibuã__
 ((
unu£d
))

55
	$ñf_machöe_lﬂd_addªss
 ()

57
Elf32_Addr

addr
;

58
asm
 volatile ("leal _start@GOTOFF(%%ebx), %0\n"

59 : "Ù" (
addr
) : : "cc");

60 
addr
;

61
	}
}

65 
ölöe
 

66
	$ñf_machöe_ªl
 (
lök_m≠
 *
m≠
, c⁄°
Elf32_Rñ
 *
ªloc
,

67 c⁄°
Elf32_Sym
 *
sym
,
Elf32_Addr
 *c⁄°
ªloc_addr
)

69
Elf32_Addr

ls_addr
,
s_addr
;

70
Elf32_Addr

vÆue
;

71 i‡(
	`ELF32_R_TYPE
 (
ªloc
->
r_öfo
Ë=
R_386_RELATIVE
)

73 *
ªloc_addr
 +
m≠
->
l_addr
 - m≠->
Œ_addr
;

76 i‡(
	`ELF32_R_TYPE
(
ªloc
->
r_öfo
Ë=
R_386_NONE
) {

79
vÆue
 =
sym
->
°_vÆue
;

81
ls_addr
 =
sym
->
°_shndx
 =
SHN_UNDEF
 ? 0 :
m≠
->
Œ_addr
;

82
s_addr
 =
sym
->
°_shndx
 =
SHN_UNDEF
 ? 0 :
m≠
->
l_addr
;

84 
	`ELF32_R_TYPE
 (
ªloc
->
r_öfo
))

86 
R_386_COPY
:

89 *
de°
, *
§c
;

90 
i
;

91
de°
 = (*)
ªloc_addr
;

92
§c
 = (*)(
vÆue
 +
s_addr
);

93 
i
 = 0; i <
sym
->
°_size
; i++) {

94
de°
[
i
] =
§c
[i];

98 
R_386_GLOB_DAT
:

99 *
ªloc_addr
 =
s_addr
 +
vÆue
;

101 
R_386_JMP_SLOT
:

102 *
ªloc_addr
 =
s_addr
 +
vÆue
;

104 
R_386_32
:

105 i‡(
m≠
->
Œ_addr
 == 0) {

106 *
ªloc_addr
 +
vÆue
;

108 *
ªloc_addr
 +
s_addr
 -
ls_addr
;

110 
R_386_PC32
:

111 i‡(
m≠
->
Œ_addr
 == 0) {

112 *
ªloc_addr
 +
vÆue
 -
ªloc
->
r_off£t
;

114 *
ªloc_addr
 +(
s_addr
 -
m≠
->
l_addr
Ë- (
ls_addr
 - m≠->
Œ_addr
);

117
	`as£π
 (! "unexpected dynamicÑelocÅype");

120
	}
}

124 
ölöe
 
__©åibuã__
 ((
unu£d
))

125
ñf_gë_dy«mic_öfo
(
ElfW
(
Dyn
Ë*
dyn
,
	$ElfW
(
Addr
Ë
l_addr
,

126
	`ElfW
(
Dyn
Ë*
öfo
[
DT_NUM
 +
DT_PROCNUM
 +
DT_EXTRANUM
])

128 i‡(!
dyn
)

131 
dyn
->
d_èg
 !
DT_NULL
)

133 i‡(
dyn
->
d_èg
 <
DT_NUM
)

134
öfo
[
dyn
->
d_èg
] = dyn;

135 i‡(
dyn
->
d_èg
 >
DT_LOPROC
 &&

136
dyn
->
d_èg
 <
DT_LOPROC
 +
DT_PROCNUM
)

137
öfo
[
dyn
->
d_èg
 -
DT_LOPROC
 +
DT_NUM
] = dyn;

138 i‡((
Elf32_W‹d
Ë
	`DT_EXTRATAGIDX
 (
dyn
->
d_èg
Ë<
DT_EXTRANUM
)

139
öfo
[
	`DT_EXTRATAGIDX
 (
dyn
->
d_èg
Ë+
DT_NUM
 +
DT_PROCNUM


140 ] =
dyn
;

142
	`as£π
 (! "bad dynamicÅag");

143 ++
dyn
;

146 i‡(
öfo
[
DT_PLTGOT
] !
NULL
)

147
öfo
[
DT_PLTGOT
]->
d_un
.
d_±r
 +
l_addr
;

148 i‡(
öfo
[
DT_STRTAB
] !
NULL
)

149
öfo
[
DT_STRTAB
]->
d_un
.
d_±r
 +
l_addr
;

150 i‡(
öfo
[
DT_SYMTAB
] !
NULL
)

151
öfo
[
DT_SYMTAB
]->
d_un
.
d_±r
 +
l_addr
;

152 #i‡!
ELF_MACHINE_NO_RELA


153 i‡(
öfo
[
DT_RELA
] !
NULL
)

155
	`as£π
 (
öfo
[
DT_RELAENT
]->
d_un
.
d_vÆ
 = (
	`ElfW
(
Rña
)));

156
öfo
[
DT_RELA
]->
d_un
.
d_±r
 +
l_addr
;

159 #i‡!
ELF_MACHINE_NO_REL


160 i‡(
öfo
[
DT_REL
] !
NULL
)

162
	`as£π
 (
öfo
[
DT_RELENT
]->
d_un
.
d_vÆ
 = (
	`ElfW
(
Rñ
)));

163
öfo
[
DT_REL
]->
d_un
.
d_±r
 +
l_addr
;

166 i‡(
öfo
[
DT_PLTREL
] !
NULL
)

168 #i‡
ELF_MACHINE_NO_RELA


169
	`as£π
 (
öfo
[
DT_PLTREL
]->
d_un
.
d_vÆ
 =
DT_REL
);

170 #ñi‡
ELF_MACHINE_NO_REL


171
	`as£π
 (
öfo
[
DT_PLTREL
]->
d_un
.
d_vÆ
 =
DT_RELA
);

173
	`as£π
 (
öfo
[
DT_PLTREL
]->
d_un
.
d_vÆ
 =
DT_REL


174 ||
öfo
[
DT_PLTREL
]->
d_un
.
d_vÆ
 =
DT_RELA
);

177 i‡(
öfo
[
DT_JMPREL
] !
NULL
)

178
öfo
[
DT_JMPREL
]->
d_un
.
d_±r
 +
l_addr
;

179
	}
}

188 
ölöe
 

189
ñf_dy«mic_do_ªl
 (
lök_m≠
 *
m≠
,

190
	$ElfW
(
Addr
Ë
ªœddr
,
	$ElfW
(
Addr
Ë
ªlsize
)

192 c⁄°
	`ElfW
(
Rñ
Ë*
r
 = (c⁄° *Ë
ªœddr
;

193 c⁄°
	`ElfW
(
Rñ
Ë*
íd
 = (c⁄° *Ë(
ªœddr
 +
ªlsize
);

195 c⁄°
	`ElfW
(
Sym
Ë*c⁄°
symèb
 =

196 (c⁄° *Ë
m≠
->
l_öfo
[
DT_SYMTAB
]->
d_un
.
d_±r
;

198 ;
r
 <
íd
; ++r) {

199
	`ñf_machöe_ªl
 (
m≠
,
r
, &
symèb
[
	`ELFW
(
R_SYM
Ë‘->
r_öfo
)],

200 (*Ë(
m≠
->
l_addr
 +
r
->
r_off£t
));

202
	}
}

205 
	$_dl_°¨t
()

207 
Elf32_Addr

œ°_lﬂd_addªss
 = 0;

208 
lök_m≠

m≠
;

209
size_t

˙t
;

215 
˙t
 = 0; c¡ < (
m≠
.
l_öfo
) / (map.l_info[0]); ++cnt) {

216
m≠
.
l_öfo
[
˙t
] = 0;

220
m≠
.
Œ_addr
 =
œ°_lﬂd_addªss
;

223
œ°_lﬂd_addªss
 =
m≠
.
l_addr
 =
	`ñf_machöe_lﬂd_addªss
();

226
m≠
.
l_ld
 = (*)m≠.
l_addr
 +
	`ñf_machöe_dy«mic
();

228
	`ñf_gë_dy«mic_öfo
 (
m≠
.
l_ld
, m≠.
l_addr
 - m≠.
Œ_addr
, m≠.
l_öfo
);

233 #i‡!
ELF_MACHINE_NO_REL


234
	`ñf_dy«mic_do_ªl
(&
m≠
,

235
m≠
.
l_öfo
[
DT_REL
]->
d_un
.
d_±r
,

236
m≠
.
l_öfo
[
DT_RELSZ
]->
d_un
.
d_vÆ
);

237 i‡(
m≠
.
l_öfo
[
DT_PLTREL
]->
d_un
.
d_vÆ
 =
DT_REL
) {

238
	`ñf_dy«mic_do_ªl
(&
m≠
,

239
m≠
.
l_öfo
[
DT_JMPREL
]->
d_un
.
d_±r
,

240
m≠
.
l_öfo
[
DT_PLTRELSZ
]->
d_un
.
d_vÆ
);

244 #i‡!
ELF_MACHINE_NO_RELA


245
	`ñf_dy«mic_do_ªœ
(&
m≠
,

246
m≠
.
l_öfo
[
DT_RELA
]->
d_un
.
d_±r
,

247
m≠
.
l_öfo
[
DT_RELASZ
]->
d_un
.
d_vÆ
);

248 i‡(
m≠
.
l_öfo
[
DT_PLTREL
]->
d_un
.
d_vÆ
 =
DT_RELA
) {

249
	`ñf_dy«mic_do_ªœ
(&
m≠
,

250
m≠
.
l_öfo
[
DT_JMPREL
]->
d_un
.
d_±r
,

251
m≠
.
l_öfo
[
DT_PLTRELSZ
]->
d_un
.
d_vÆ
);

262
	}
}

	@screen_buffer.c

13 
	~"ã°.h
"

14 
	~"s¸ìn_buf„r.h
"

17 
	#SCREEN_X
 80

	)

18 
	#SCREEN_Y
 25

	)

19 
	#Y_SIZE

SCREEN_Y


	)

24 
	#X_SIZE

SCREEN_X
+1

	)

26 
	gs¸ìn_buf
[
Y_SIZE
][
X_SIZE
];

28 #ifde‡
SCRN_DEBUG


30 *
	g∑ddög
 = "12345678901234567890123456789012345678901234567890123456789012345678901234567890";

32 
	#CHECK_BOUNDS
(
y
,
x
Ëdÿ{i‡(y < 0 ||
Y_SIZE
 <y || x < 0 ||
X_SIZE
 <xË
	`¥öt_îr‹
("ouào‡ödex");}0)

	)

36 
	#CHECK_BOUNDS
(
y
,
x
)

	)

41
	$gë_s¸n_buf
(c⁄° 
y
,

42 c⁄° 
x
)

44
	`CHECK_BOUNDS
(
y
,
x
);

45 
s¸ìn_buf
[
y
][
x
];

46
	}
}

50
	$£t_s¸n_buf
(c⁄° 
y
,

51 c⁄° 
x
,

52 c⁄° 
vÆ
)

54
	`CHECK_BOUNDS
(
y
,
x
);

55
s¸ìn_buf
[
y
][
x
] =
vÆ
;

56
	}
}

58 
	$˛ór_s¸ìn_buf
()

60 
y
,
x
;

62 
y
=0; y <
SCREEN_Y
; ++y){

63 
x
=0; x <
SCREEN_X
; ++x){

64
	`CHECK_BOUNDS
(
y
,
x
);

65
s¸ìn_buf
[
y
][
x
] = ' ';

67
	`CHECK_BOUNDS
(
y
,
SCREEN_X
);

68
s¸ìn_buf
[
y
][
SCREEN_X
] = '\0';

70
	}
}

72 
	$ây_¥öt_ªgi⁄
(c⁄° 
pi_t›
,

73 c⁄° 
pi_À·
,

74 c⁄° 
pi_bŸtom
,

75 c⁄° 
pi_right
)

77 
y
;

78 
tmp
;

80 
y
=
pi_t›
; y <
pi_bŸtom
; ++y){

81
	`CHECK_BOUNDS
(
y
,
pi_right
);

83
tmp
 =
s¸ìn_buf
[
y
][
pi_right
];

84
s¸ìn_buf
[
y
][
pi_right
] = '\0';

86
	`CHECK_BOUNDS
(
y
,
pi_À·
);

87
	`ây¥öt
(
y
,
pi_À·
, &(
s¸ìn_buf
[y][pi_left]));

89
s¸ìn_buf
[
y
][
pi_right
] =
tmp
;

91
	}
}

93 
	$ây_¥öt_löe
(

94 
y
, 
x
, c⁄° *
ãxt
)

96 ; *
ãxt
 && (
x
 <
SCREEN_X
); x++,Åext++) {

97 i‡(*
ãxt
 !
s¸ìn_buf
[
y
][
x
]) {

102 i‡(*
ãxt
 == '\0') {

105
	`ây¥öt
(
y
,
x
,
ãxt
);

106 ; *
ãxt
 && (
x
 <
SCREEN_X
); x++,Åext++) {

107
s¸ìn_buf
[
y
][
x
] = *
ãxt
;

109
	}
}

112 
	$ây_¥öt_s¸ìn
()

114 #ifde‡
SCRN_DEBUG


115 
i
;

117 
i
=0; i <
SCREEN_Y
; ++i)

118
	`ây¥öt
(
i
,0,
∑ddög
);

121
	`ây_¥öt_ªgi⁄
(0, 0,
SCREEN_Y
,
SCREEN_X
);

122
	}
}

124 
	$¥öt_îr‹
(*
p°r
)

127 #ifde‡
SCRN_DEBUG


128
	`ây¥öt
(0,0,
∑ddög
);

131
	`ây¥öt
(0,35,
p°r
);

134
	}
}

	@screen_buffer.h

13 #i‚de‡
SCREEN_BUFFER_H_1D10F83B_INCLUDED


14 
	#SCREEN_BUFFER_H_1D10F83B_INCLUDED


	)

16 
	~"c⁄fig.h
"

18 
gë_s¸n_buf
(c⁄° 
y
, c⁄° 
x
);

19 
£t_s¸n_buf
(c⁄° 
y
, c⁄° 
x
, c⁄° 
vÆ
);

20 
˛ór_s¸ìn_buf
();

21 
ây_¥öt_ªgi⁄
(c⁄° 
pi_t›
,c⁄° 
pi_À·
, c⁄° 
pi_bŸtom
,c⁄° 
pi_right
);

22 
ây_¥öt_löe
(
y
, 
x
, c⁄° *
ãxt
);

23 
ây_¥öt_s¸ìn
();

24 
¥öt_îr‹
(*
p°r
);

	@serial.h

14 #i‚de‡
_LINUX_SERIAL_REG_H


15 
	#_LINUX_SERIAL_REG_H


	)

17 
	#UART_RX
 0

	)

18 
	#UART_TX
 0

	)

19 
	#UART_DLL
 0

	)

20 
	#UART_DLM
 1

	)

21 
	#UART_IER
 1

	)

22 
	#UART_IIR
 2

	)

23 
	#UART_FCR
 2

	)

24 
	#UART_EFR
 2

	)

26 
	#UART_LCR
 3

	)

27 
	#UART_MCR
 4

	)

28 
	#UART_LSR
 5

	)

29 
	#UART_MSR
 6

	)

30 
	#UART_SCR
 7

	)

38 
	#UART_FCR_ENABLE_FIFO
 0x01

	)

39 
	#UART_FCR_CLEAR_RCVR
 0x02

	)

40 
	#UART_FCR_CLEAR_XMIT
 0x04

	)

41 
	#UART_FCR_DMA_SELECT
 0x08

	)

42 
	#UART_FCR_TRIGGER_MASK
 0xC0

	)

43 
	#UART_FCR_TRIGGER_1
 0x00

	)

44 
	#UART_FCR_TRIGGER_4
 0x40

	)

45 
	#UART_FCR_TRIGGER_8
 0x80

	)

46 
	#UART_FCR_TRIGGER_14
 0xC0

	)

48 
	#UART_FCR6_R_TRIGGER_8
 0x00

	)

49 
	#UART_FCR6_R_TRIGGER_16
 0x40

	)

50 
	#UART_FCR6_R_TRIGGER_24
 0x80

	)

51 
	#UART_FCR6_R_TRIGGER_28
 0xC0

	)

52 
	#UART_FCR6_T_TRIGGER_16
 0x00

	)

53 
	#UART_FCR6_T_TRIGGER_8
 0x10

	)

54 
	#UART_FCR6_T_TRIGGER_24
 0x20

	)

55 
	#UART_FCR6_T_TRIGGER_30
 0x30

	)

63 
	#UART_LCR_DLAB
 0x80

	)

64 
	#UART_LCR_SBC
 0x40

	)

65 
	#UART_LCR_SPAR
 0x20

	)

66 
	#UART_LCR_EPAR
 0x10

	)

67 
	#UART_LCR_PARITY
 0x08

	)

68 
	#UART_LCR_STOP
 0x04

	)

69 
	#UART_LCR_WLEN5
 0x00

	)

70 
	#UART_LCR_WLEN6
 0x01

	)

71 
	#UART_LCR_WLEN7
 0x02

	)

72 
	#UART_LCR_WLEN8
 0x03

	)

77 
	#UART_LSR_TEMT
 0x40

	)

78 
	#UART_LSR_THRE
 0x20

	)

79 
	#UART_LSR_BI
 0x10

	)

80 
	#UART_LSR_FE
 0x08

	)

81 
	#UART_LSR_PE
 0x04

	)

82 
	#UART_LSR_OE
 0x02

	)

83 
	#UART_LSR_DR
 0x01

	)

88 
	#UART_IIR_NO_INT
 0x01

	)

89 
	#UART_IIR_ID
 0x06

	)

91 
	#UART_IIR_MSI
 0x00

	)

92 
	#UART_IIR_THRI
 0x02

	)

93 
	#UART_IIR_RDI
 0x04

	)

94 
	#UART_IIR_RLSI
 0x06

	)

99 
	#UART_IER_MSI
 0x08

	)

100 
	#UART_IER_RLSI
 0x04

	)

101 
	#UART_IER_THRI
 0x02

	)

102 
	#UART_IER_RDI
 0x01

	)

107 
	#UART_MCR_LOOP
 0x10

	)

108 
	#UART_MCR_OUT2
 0x08

	)

109 
	#UART_MCR_OUT1
 0x04

	)

110 
	#UART_MCR_RTS
 0x02

	)

111 
	#UART_MCR_DTR
 0x01

	)

116 
	#UART_MSR_DCD
 0x80

	)

117 
	#UART_MSR_RI
 0x40

	)

118 
	#UART_MSR_DSR
 0x20

	)

119 
	#UART_MSR_CTS
 0x10

	)

120 
	#UART_MSR_DDCD
 0x08

	)

121 
	#UART_MSR_TERI
 0x04

	)

122 
	#UART_MSR_DDSR
 0x02

	)

123 
	#UART_MSR_DCTS
 0x01

	)

124 
	#UART_MSR_ANY_DELTA
 0x0F

	)

130 
	#UART_EFR_CTS
 0x80

	)

131 
	#UART_EFR_RTS
 0x40

	)

132 
	#UART_EFR_SCD
 0x20

	)

133 
	#UART_EFR_ENI
 0x10

	)

138 
	~"io.h
"

139 
	#£rül_echo_outb
(
v
,
a
Ë
	`outb
((v),◊)+
£rül_ba£_p‹ts
[
£rül_ây
])

	)

140 
	#£rül_echo_öb
(
a
Ë
	`öb
(◊)+
£rül_ba£_p‹ts
[
£rül_ây
])

	)

141 
	#BOTH_EMPTY
 (
UART_LSR_TEMT
 |
UART_LSR_THRE
)

	)

143 
	#WAIT_FOR_XMITR
 \

145
l§
 =
	`£rül_echo_öb
(
UART_LSR
); \

146 } (
l§
 &
BOTH_EMPTY
Ë!BOTH_EMPTY)

	)

149 
ölöe
 
	$£rül_echo
(
ch
)

151 
l§
;

152
WAIT_FOR_XMITR
;

153
	`£rül_echo_outb
(
ch
,
UART_TX
);

154
	}
}

155 
ölöe
 
	$£rül_debug
(
ch
)

157
	`£rül_echo
(
ch
);

158
	`£rül_echo
('\r');

159
	`£rül_echo
('\n');

160
	}
}

	@smp.c

13 
	~"°ddef.h
"

14 
	~"smp.h
"

15 
	~"˝uid.h
"

16 
	~"ã°.h
"

17 
	#DELAY_FACTOR
 1

	)

18 
mem˝y
(*
d°
, *
§c
 , 
Àn
);

19 
ã°_°¨t
();

22
boﬁ

	m°¨ãd
;

23 }
	t≠_öfo_t
;

25 vﬁ©ûê
≠ic_ªgi°î_t
 *
	gAPIC
 =
NULL
;

26 
	gnumbî_of_˝us
 = 1;

28 
	g˝u_num_to_≠ic_id
[
MAX_CPUS
];

29 vﬁ©ûê
≠_öfo_t

	gAP
[
MAX_CPUS
];

31
uöt8_t


32
	$checksum
(
uöt8_t
 *
d©a
, 
Àn
)

34
uöt32_t

sum
 = 0;

35
uöt8_t
 *
íd
 =
d©a
 +
Àn
;

36 
d©a
 <
íd
) {

37
sum
 +*
d©a
;

38
d©a
++;

40  (
uöt8_t
)(
sum
 % 0x100);

41
	}
}

44
boﬁ


45
	$ªad_mp_c⁄fig_èbÀ
(
uöçå_t

addr
)

47
mp_c⁄fig_èbÀ_hódî_t
 *
mpc
 = (mp_c⁄fig_èbÀ_hódî_t*)
addr
;

48
uöt8_t
 *
èb_íåy_±r
;

49
uöt8_t
 *
mpc_èbÀ_íd
;

50 
num_hy≥r_thªads_≥r_c‹e
;

52 i‡(
mpc
->
sig«tuª
 !
MPCSig«tuª
) {

53 
FALSE
;

55 i‡(
	`checksum
((
uöt8_t
*)
mpc
, mpc->
Àngth
) != 0) {

56 
FALSE
;

64
APIC
 = (vﬁ©ûê
≠ic_ªgi°î_t
*)(
uöçå_t
)
mpc
->
œpic_addr
;

66
èb_íåy_±r
 = ((
uöt8_t
*)
mpc
Ë+ (
mp_c⁄fig_èbÀ_hódî_t
);

67
mpc_èbÀ_íd
 = ((
uöt8_t
*)
mpc
Ë+ mpc->
Àngth
;

68 
èb_íåy_±r
 <
mpc_èbÀ_íd
) {

69 *
èb_íåy_±r
) {

70 
MP_PROCESSOR
: {

71
mp_¥o˚ss‹_íåy_t
 *
≥
 = (mp_¥o˚ss‹_íåy_t*)
èb_íåy_±r
;

73 i‡(
≥
->
˝u_Êag
 &
CPU_BOOTPROCESSOR
) {

75
˝u_num_to_≠ic_id
[0] =
≥
->
≠ic_id
;

76 } i‡(
numbî_of_˝us
 <
MAX_CPUS
) {

77
˝u_num_to_≠ic_id
[
numbî_of_˝us
] =
≥
->
≠ic_id
;

78
numbî_of_˝us
++;

80 i‡(
num_hy≥r_thªads_≥r_c‹e
 > 1 ) {

81
˝u_num_to_≠ic_id
[
numbî_of_˝us
] =
≥
->
≠ic_id
 | 1;

82
numbî_of_˝us
++;

86 i‡((
≥
->
≠ic_vî
 & 0xf0) != 0x10) {

92
èb_íåy_±r
 +(
mp_¥o˚ss‹_íåy_t
);

95 
MP_BUS
: {

96
èb_íåy_±r
 +(
mp_bus_íåy_t
);

99 
MP_IOAPIC
: {

100
èb_íåy_±r
 +(
mp_io_≠ic_íåy_t
);

103 
MP_INTSRC
:

104
èb_íåy_±r
 +(
mp_öãºu±_íåy_t
);

105 
MP_LINTSRC
:

106
èb_íåy_±r
 +(
mp_loˇl_öãºu±_íåy_t
);

109 
FALSE
;

112 
TRUE
;

113
	}
}

116
Êﬂtög_poöãr_°ru˘_t
 *

117
	$sˇn_f‹_Êﬂtög_±r_°ru˘
(
uöçå_t

addr
,
uöt32_t

Àngth
)

119
Êﬂtög_poöãr_°ru˘_t
 *
Â
;

120
uöçå_t

íd
 =
addr
 +
Àngth
;

123
Â
 = (
Êﬂtög_poöãr_°ru˘_t
*)
addr
;

124 (
uöçå_t
)
Â
 <
íd
) {

125 i‡(
Â
->
sig«tuª
 =
FPSig«tuª
) {

126 i‡(
Â
->
Àngth
 =1 &&
	`checksum
((
uöt8_t
*)fp, 16) == 0) {

127 
Â
;

130
Â
++;

132 
NULL
;

133
	}
}

135 
	$PUT_MEM16
(
uöçå_t

addr
,
uöt16_t

vÆ
)

137 *((vﬁ©ûê
uöt16_t
 *)
addr
Ë
vÆ
;

138
	}
}

140 
	$PUT_MEM32
(
uöçå_t

addr
,
uöt32_t

vÆ
)

142 *((vﬁ©ûê
uöt32_t
 *)
addr
Ë
vÆ
;

143
	}
}

145 
ölöe


146
	$APIC_WRITE
(
ªg
,
uöt32_t

vÆ
)

148
APIC
[
ªg
][0] =
vÆ
;

149
	}
}

151 
ölöe

uöt32_t


152
	$APIC_READ
(
ªg
)

154 
APIC
[
ªg
][0];

155
	}
}

159
	$SEND_IPI
(
≠ic_id
, 
åiggî
, 
Àvñ
, 
mode
,

160
uöt8_t

ve˘‹
)

162
uöt32_t

v
;

164
v
 =
	`APIC_READ
(
APICR_ICRHI
) & 0x00ffffff;

165
	`APIC_WRITE
(
APICR_ICRHI
,
v
 | (
≠ic_id
 << 24));

167
v
 =
	`APIC_READ
(
APICR_ICRLO
) & ~0xcdfff;

168
v
 |(
APIC_DEST_DEST
 <<
APIC_ICRLO_DEST_OFFSET
)

169 | (
åiggî
 <<
APIC_ICRLO_TRIGGER_OFFSET
)

170 | (
Àvñ
 <<
APIC_ICRLO_LEVEL_OFFSET
)

171 | (
mode
 <<
APIC_ICRLO_DELMODE_OFFSET
)

172 | (
ve˘‹
);

173
	`APIC_WRITE
(
APICR_ICRLO
,
v
);

174
	}
}

178 
	$dñay
(
us
)

180 
‰eq
 = 1000;

181
uöt64_t

cy˛es
 =
us
 *
‰eq
;

182
uöt64_t

t0
 =
	`RDTSC
();

183
uöt64_t

t1
;

184 vﬁ©ûê
k
;

187 
k
 = 0; k < 1000; k++) ;

188
t1
 =
	`RDTSC
();

189 } 
t1
 -
t0
 <
cy˛es
);

190
	}
}

192 
ölöe
 

193
	$mem£t
 (*
d°
,

194 
vÆue
,

195 
Àn
)

197 
i
;

198 
i
 = 0 ; i <
Àn
 ; i++ ) {

199 *((*Ë
d°
 +
i
Ë
vÆue
;

201
	}
}

203 
	$kick_˝u
(
˝u_num
)

205 
num_sùi
,
≠ic_id
;

206
≠ic_id
 =
˝u_num_to_≠ic_id
[
˝u_num
];

209
	`APIC_WRITE
(
APICR_ESR
, 0);

210
	`APIC_READ
(
APICR_ESR
);

213
	`SEND_IPI
(
≠ic_id
,
APIC_TRIGGER_LEVEL
, 1,
APIC_DELMODE_INIT
, 0);

214
	`dñay
(100000 /
DELAY_FACTOR
);

217
	`SEND_IPI
(
≠ic_id
,
APIC_TRIGGER_LEVEL
, 0,
APIC_DELMODE_INIT
, 0);

219 
num_sùi
 = 0;Çum_sipi < 2;Çum_sipi++) {

220 
timeout
;

221
boﬁ

£nd_≥ndög
;

222 
îr
;

224
	`APIC_WRITE
(
APICR_ESR
, 0);

226
	`SEND_IPI
(
≠ic_id
, 0, 0,
APIC_DELMODE_STARTUP
, (
uöt32_t
)
°¨tup_32
 >> 12);

228
timeout
 = 0;

230
	`dñay
(10);

231
timeout
++;

232
£nd_≥ndög
 = (
	`APIC_READ
(
APICR_ICRLO
Ë&
APIC_ICRLO_STATUS_MASK
) != 0;

233 } 
£nd_≥ndög
 &&
timeout
 < 1000);

235 i‡(
£nd_≥ndög
) {

239
	`dñay
(100000 /
DELAY_FACTOR
);

241
îr
 =
	`APIC_READ
(
APICR_ESR
) & 0xef;

242 i‡(
îr
) {

247
	}
}

251 
	#BOOTCODESTART
 0x9000

	)

252 
	#GDTPOINTERADDR
 0x9100

	)

253 
	#GDTADDR
 0x9110

	)

255 
	$boŸ_≠
(
˝u_num
)

257 
num_sùi
,
≠ic_id
;

258 
uöt8_t

gdt
;

259 
uöt8_t

_≠_åampﬁöe_°¨t
;

260 
uöt8_t

_≠_åampﬁöe_¥Ÿmode
;

261 
Àn
 = &
_≠_åampﬁöe_¥Ÿmode
 - &
_≠_åampﬁöe_°¨t
;

262
≠ic_id
 =
˝u_num_to_≠ic_id
[
˝u_num
];

265
	`mem˝y
((
uöt8_t
*)
BOOTCODESTART
, &
_≠_åampﬁöe_°¨t
,
Àn
);

268
	`PUT_MEM16
(
BOOTCODESTART
 + 3,
GDTPOINTERADDR
);

272
	`PUT_MEM16
(
GDTPOINTERADDR
, 4 * 8);

273
	`PUT_MEM32
(
GDTPOINTERADDR
 + 2,
GDTADDR
);

277
	`mem˝y
((
uöt8_t
 *)
GDTADDR
, &
gdt
, 32);

280
	`APIC_WRITE
(
APICR_ESR
, 0);

281
	`APIC_READ
(
APICR_ESR
);

284
	`SEND_IPI
(
≠ic_id
,
APIC_TRIGGER_LEVEL
, 1,
APIC_DELMODE_INIT
, 0);

285
	`dñay
(100000 /
DELAY_FACTOR
);

288
	`SEND_IPI
(
≠ic_id
,
APIC_TRIGGER_LEVEL
, 0,
APIC_DELMODE_INIT
, 0);

290 
num_sùi
 = 0;Çum_sipi < 2;Çum_sipi++) {

291 
timeout
;

292
boﬁ

£nd_≥ndög
;

293 
îr
;

295
	`APIC_WRITE
(
APICR_ESR
, 0);

297
	`SEND_IPI
(
≠ic_id
, 0, 0,
APIC_DELMODE_STARTUP
,
BOOTCODESTART
 >> 12);

299
timeout
 = 0;

301
	`dñay
(10);

302
timeout
++;

303
£nd_≥ndög
 = (
	`APIC_READ
(
APICR_ICRLO
Ë&
APIC_ICRLO_STATUS_MASK
) != 0;

304 } 
£nd_≥ndög
 &&
timeout
 < 1000);

306 i‡(
£nd_≥ndög
) {

310
	`dñay
(100000 /
DELAY_FACTOR
);

312
îr
 =
	`APIC_READ
(
APICR_ESR
) & 0xef;

313 i‡(
îr
) {

318
	}
}

321
	$smp_öô_b•
()

323
Êﬂtög_poöãr_°ru˘_t
 *
Â
;

327
	`˝uid_öô
();

329
	`mem£t
(&
AP
, 0,  AP);

331
Â
 =
	`sˇn_f‹_Êﬂtög_±r_°ru˘
(0x0, 0x400);

332 i‡(
Â
 =
NULL
) {

333
Â
 =
	`sˇn_f‹_Êﬂtög_±r_°ru˘
(639*0x400, 0x400);

335 i‡(
Â
 =
NULL
) {

336
Â
 =
	`sˇn_f‹_Êﬂtög_±r_°ru˘
(0xf0000, 0x10000);

338 i‡(
Â
 =
NULL
) {

347 
addªss
 = *(*)0x40E;

348
addªss
 <<= 4;

349 i‡(
addªss
) {

350
Â
 =
	`sˇn_f‹_Êﬂtög_±r_°ru˘
(
addªss
, 0x400);

354 i‡(
Â
 !
NULL
 && fp->
phys_addr
 != 0) {

355 i‡(!
	`ªad_mp_c⁄fig_èbÀ
(
Â
->
phys_addr
)) {

364
	}
}

367
	$smp_öô_≠s
()

369 
˝uNum
;

370 
˝uNum
 = 0 ; cpuNum <
MAX_CPUS
 ; cpuNum++) {

371
AP
[
˝uNum
].
°¨ãd
 =
FALSE
;

373
	}
}

376
	$my_≠ic_id
()

378  (
APIC
[
APICR_ID
][0]) >> 24;

379
	}
}

382
	$smp_≠_boŸed
(
˝u_num
)

384
AP
[
˝u_num
].
°¨ãd
 =
TRUE
;

385
	}
}

388
	$smp_boŸ_≠
(
˝u_num
)

390 
timeout
;

391 
boﬁ

smp_mode
;

392
	`boŸ_≠
(
˝u_num
);

393
timeout
 = 0;

395
	`dñay
(1000 /
DELAY_FACTOR
);

396
timeout
++;

397 } !
AP
[
˝u_num
].
°¨ãd
 &&
timeout
 < 100000 /
DELAY_FACTOR
);

399 i‡(!
AP
[
˝u_num
].
°¨ãd
) {

403
smp_mode
 =
FALSE
;

405
	}
}

408
	$smp_num_˝us
()

410 
numbî_of_˝us
;

411
	}
}

414
	$smp_my_˝u_num
()

416 
≠icid
 =
	`my_≠ic_id
();

417 
i
;

419 
i
 = 0; i <
MAX_CPUS
; i++) {

420 i‡(
≠icid
 =
˝u_num_to_≠ic_id
[
i
]) {

424 i‡(
i
 =
MAX_CPUS
) {

425
i
 = 0;

427 
i
;

428
	}
}

430 vﬁ©ûê
•ölock_t

	gb¨r_lk
={1};

431 
	$b¨rõr
(vﬁ©ûê*
b¨r
, 
n
)

433
	`•ö_lock
(&
b¨r_lk
);

434
b¨r
++;

435
	`•ö_u∆ock
(&
b¨r_lk
);

436 (
uöt32_t
)
b¨r
<
n
);

437
b¨r
 = 0;

439
	}
}

	@smp.h

6 #i‚de‡
_SMP_H_


7 
	#_SMP_H_


	)

8 
	~"°döt.h
"

9 
	~"defs.h
"

10 
	#MAX_CPUS
 16

11

	)

13 
	#FPSig«tuª
 ('_' | 'M' << 8 | 'P' << 16 | '_' << 24)

	)

16
uöt32_t

	msig«tuª
;

17
uöt32_t

	mphys_addr
;

18
uöt8_t

	mÀngth
;

19
uöt8_t

	m•ec_ªv
;

20
uöt8_t

	mchecksum
;

21
uöt8_t

	m„©uª
[5];

22 }
	tÊﬂtög_poöãr_°ru˘_t
;

24 
	#MPCSig«tuª
 ('P' | 'C' << 8 | 'M' << 16 | 'P' << 24)

	)

26
uöt32_t

	msig«tuª
;

27
uöt16_t

	mÀngth
;

28
uöt8_t

	m•ec_ªv
;

29
uöt8_t

	mchecksum
;

30 
	m€m
[8];

31 
	m¥odu˘id
[12];

32
uöt32_t

	m€m_±r
;

33
uöt16_t

	m€m_size
;

34
uöt16_t

	m€m_cou¡
;

35
uöt32_t

	mœpic_addr
;

36
uöt32_t

	mª£rved
;

37 }
	tmp_c⁄fig_èbÀ_hódî_t
;

41 
	#MP_PROCESSOR
 0

	)

42 
	#MP_BUS
 1

	)

43 
	#MP_IOAPIC
 2

	)

44 
	#MP_INTSRC
 3

	)

45 
	#MP_LINTSRC
 4

	)

48
uöt8_t

	mty≥
;

49
uöt8_t

	m≠ic_id
;

50
uöt8_t

	m≠ic_vî
;

51
uöt8_t

	m˝u_Êag
;

52 
	#CPU_ENABLED
 1

	)

53 
	#CPU_BOOTPROCESSOR
 2

	)

54
uöt32_t

	m˝u_sig«tuª
;

55 
	#CPU_STEPPING_MASK
 0x0F

	)

56 
	#CPU_MODEL_MASK
 0xF0

	)

57 
	#CPU_FAMILY_MASK
 0xF00

	)

58
uöt32_t

	m„©uªÊag
;

59
uöt32_t

	mª£rved
[2];

60 }
	tmp_¥o˚ss‹_íåy_t
;

64
uöt8_t

	mty≥
;

65
uöt8_t

	mbusid
;

66 
	mbu°y≥
[6];

67 }
	tmp_bus_íåy_t
;

69 
	#BUSTYPE_EISA
 "EISA"

	)

70 
	#BUSTYPE_ISA
 "ISA"

	)

71 
	#BUSTYPE_INTERN
 "INTERN"

	)

72 
	#BUSTYPE_MCA
 "MCA"

	)

73 
	#BUSTYPE_VL
 "VL"

	)

74 
	#BUSTYPE_PCI
 "PCI"

	)

75 
	#BUSTYPE_PCMCIA
 "PCMCIA"

	)

80
uöt8_t

	mty≥
;

81
uöt8_t

	m≠icid
;

82
uöt8_t

	m≠icvî
;

83
uöt8_t

	mÊags
;

84 
	#MPC_APIC_USABLE
 0x01

	)

85
uöt32_t

	m≠iˇddr
;

86 }
	tmp_io_≠ic_íåy_t
;

90
uöt8_t

	mty≥
;

91
uöt8_t

	múqty≥
;

92
uöt16_t

	múqÊag
;

93
uöt8_t

	m§cbus
;

94
uöt8_t

	m§cbusúq
;

95
uöt8_t

	md°≠ic
;

96
uöt8_t

	md°úq
;

97 }
	tmp_öãºu±_íåy_t
;

99 
	#MP_INT_VECTORED
 0

	)

100 
	#MP_INT_NMI
 1

	)

101 
	#MP_INT_SMI
 2

	)

102 
	#MP_INT_EXTINT
 3

	)

104 
	#MP_IRQDIR_DEFAULT
 0

	)

105 
	#MP_IRQDIR_HIGH
 1

	)

106 
	#MP_IRQDIR_LOW
 3

	)

110
uöt8_t

	mty≥
;

111
uöt8_t

	múqty≥
;

112
uöt16_t

	múqÊag
;

113
uöt8_t

	m§cbusid
;

114
uöt8_t

	m§cbusúq
;

115
uöt8_t

	mde°≠ic
;

116 
	#MP_APIC_ALL
 0xFF

	)

117
uöt8_t

	mde°≠i˛öt
;

118 }
	tmp_loˇl_öãºu±_íåy_t
;

124 
	#APICR_ID
 0x02

	)

125 
	#APICR_ESR
 0x28

	)

126 
	#APICR_ICRLO
 0x30

	)

127 
	#APICR_ICRHI
 0x31

	)

130 
	#APIC_DEST_DEST
 0

	)

131 
	#APIC_DEST_LOCAL
 1

	)

132 
	#APIC_DEST_ALL_INC
 2

	)

133 
	#APIC_DEST_ALL_EXC
 3

	)

136 
	#APIC_ICRHI_RESERVED
 0x00ffffff

	)

137 
	#APIC_ICRHI_DEST_MASK
 0xff000000

	)

138 
	#APIC_ICRHI_DEST_OFFSET
 24

	)

140 
	#APIC_ICRLO_RESERVED
 0xfff32000

	)

141 
	#APIC_ICRLO_DEST_MASK
 0x000c0000

	)

142 
	#APIC_ICRLO_DEST_OFFSET
 18

	)

143 
	#APIC_ICRLO_TRIGGER_MASK
 0x00008000

	)

144 
	#APIC_ICRLO_TRIGGER_OFFSET
 15

	)

145 
	#APIC_ICRLO_LEVEL_MASK
 0x00004000

	)

146 
	#APIC_ICRLO_LEVEL_OFFSET
 14

	)

147 
	#APIC_ICRLO_STATUS_MASK
 0x00001000

	)

148 
	#APIC_ICRLO_STATUS_OFFSET
 12

	)

149 
	#APIC_ICRLO_DESTMODE_MASK
 0x00000800

	)

150 
	#APIC_ICRLO_DESTMODE_OFFSET
 11

	)

151 
	#APIC_ICRLO_DELMODE_MASK
 0x00000700

	)

152 
	#APIC_ICRLO_DELMODE_OFFSET
 8

	)

153 
	#APIC_ICRLO_VECTOR_MASK
 0x000000ff

	)

154 
	#APIC_ICRLO_VECTOR_OFFSET
 0

	)

157 
	#APIC_TRIGGER_EDGE
 0

	)

158 
	#APIC_TRIGGER_LEVEL
 1

	)

161 
	#APIC_DELMODE_FIXED
 0

	)

162 
	#APIC_DELMODE_LOWEST
 1

	)

163 
	#APIC_DELMODE_SMI
 2

	)

164 
	#APIC_DELMODE_NMI
 4

	)

165 
	#APIC_DELMODE_INIT
 5

	)

166 
	#APIC_DELMODE_STARTUP
 6

	)

167 
	#APIC_DELMODE_EXTINT
 7

	)

168 
uöt32_t

	t≠ic_ªgi°î_t
[4];

170 vﬁ©ûê
≠ic_ªgi°î_t
 *
APIC
;

172 
smp_num_˝us
();

173 
smp_my_˝u_num
();

175 
smp_öô_b•
();

176 
smp_öô_≠s
();

178 
smp_boŸ_≠
(
˝u_num
);

179 
smp_≠_boŸed
(
˝u_num
);

181 
ölöe
 

182
	$__GET_CPUID
(
ax
,
uöt32_t
 *
ªgs
)

184
__asm__

	`__vﬁ©ûe__
("\t"

187 : "˜" (
ªgs
[0]), "=D" (regs[1]), "=c" (regs[2]), "=d" (regs[3])

188 : "a" (
ax
)

191
	}
}

193 
	#GET_CPUID
(
_ax
,
_bx
,
_cx
,
_dx
) { \

194
uöt32_t

ªgs
[4]; \

195
	`__GET_CPUID
(
_ax
,
ªgs
); \

196
_ax
 =
ªgs
[0]; \

197
_bx
 =
ªgs
[1]; \

198
_cx
 =
ªgs
[2]; \

199
_dx
 =
ªgs
[3]; \

200 }

	)

207 
ölöe

uöt64_t


208
	$RDTSC
()

210
uöt64_t

tim
;

212
__asm__

	`__vﬁ©ûe__
(

214 : "=A" (
tim
)

217 
tim
;

218
	}
}

220 
ölöe

uöt64_t

	$__GET_MSR
(
cx
)

222
uöt64_t

m§
;

224
__asm__

	`__vﬁ©ûe__
(

226 : "=A" (
m§
)

227 : "c" (
cx
)

230 
m§
;

231
	}
}

233 
	#__GCC_OUT
(
s
,
s2
,
p‹t
,
vÆ
) do { \

234
	`__asm__
( \

237 : "Nd" (
p‹t
), "a" (
vÆ
) \

239 } 0)

	)

240 
	#OUTB
(
p‹t
,
vÆ
Ë
	`__GCC_OUT
(
b
, b,Ö‹t, vÆ)

	)

243 
	m¶ock
;

244 }
	t•ölock_t
;

246 
ölöe
 
	$•ö_lock
(vﬁ©ûê
•ölock_t
 *
lock
)

248
asm
 volatile("\n1:\t"

257 : "+m" (
lock
->
¶ock
) : : "memory");

258
	}
}

259 
ölöe
 
	$•ö_u∆ock
(vﬁ©ûê
•ölock_t
 *
lock
)

261
asm
 vﬁ©ûe("movb $1,%0" : "+m" (
lock
->
¶ock
) :: "memory");

262
	}
}

	@spd.c

12 
	~"ã°.h
"

13 
	~"io.h
"

14 
	~"pci.h
"

15 
	~"m§.h
"

16 
	~"•d.h
"

17 
	~"s¸ìn_buf„r.h
"

18 
	~"jedec_id.h
"

20 
	#NULL
 0

	)

22 
	#SMBHSTSTS

smbusba£


	)

23 
	#SMBHSTCNT

smbusba£
 + 2

	)

24 
	#SMBHSTCMD

smbusba£
 + 3

	)

25 
	#SMBHSTADD

smbusba£
 + 4

	)

26 
	#SMBHSTDAT

smbusba£
 + 5

	)

28 
waô_keyup
();

30 
	gsmbdev
,
	gsmbfun
;

31 
	gsmbusba£
;

32 
	g•d
[256];

33 
	gs
[] = {'/', 0, '-', 0, '\\', 0, '|', 0};

35 
	$ich5_gë_smb
()

37 
x
;

38 
ªsu…
;

39
ªsu…
 =
	`pci_c⁄f_ªad
(0,
smbdev
,
smbfun
, 0x20, 2, &
x
);

40 i‡(
ªsu…
 =0Ë
smbusba£
 = (Ë
x
 & 0xFFFE;

41
	}
}

43 
	$ich5_smb_ªad_byã
(
adr
, 
cmd
)

45 
l1
,
h1
,
l2
,
h2
;

46 
t
;

47
	`__outb
(0x1f,
SMBHSTSTS
);

48
	`__outb
(0xff,
SMBHSTDAT
);

49 
	`__öb
(
SMBHSTSTS
) & 0x01);

50
	`__outb
(
cmd
,
SMBHSTCMD
);

51
	`__outb
((
adr
 << 1Ë| 0x01,
SMBHSTADD
);

52
	`__outb
(0x48,
SMBHSTCNT
);

53
	`rdtsc
(
l1
,
h1
);

55 !(
	`__öb
(
SMBHSTSTS
) & 0x02)) {

56
	`rdtsc
(
l2
,
h2
);

57
t
 = ((
h2
 -
h1
Ë* 0xfffffff‡+ (
l2
 -
l1
)Ë/
v
->
˛ks_m£c
;

58 i‡(
t
 > 10) ;

60 
	`__öb
(
SMBHSTDAT
);

61
	}
}

63 
	$ich5_ªad_•d
(
dimmadr
)

65 
x
;

66
•d
[0] =
	`ich5_smb_ªad_byã
(0x50 +
dimmadr
, 0);

67 i‡(
•d
[0] == 0xff)  -1;

68 
x
 = 1; x < 256; x++) {

69
•d
[
x
] =
	`ich5_smb_ªad_byã
(0x50 +
dimmadr
, () x);

72
	}
}

74 
	$us15w_gë_smb
()

76 
x
;

77 
ªsu…
;

78
ªsu…
 =
	`pci_c⁄f_ªad
(0, 0x1f, 0, 0x40, 2, &
x
);

79 i‡(
ªsu…
 =0Ë
smbusba£
 = (Ë
x
 & 0xFFC0;

80
	}
}

82 
	$us15w_smb_ªad_byã
(
adr
, 
cmd
)

84 
l1
,
h1
,
l2
,
h2
;

85 
t
;

89
	`__outb
(0x02,
smbusba£
 + 0);

90
	`__outb
(
cmd
,
smbusba£
 + 5);

91
	`__outb
(0x07,
smbusba£
 + 1);

92
	`__outb
((
adr
 << 1Ë| 0x01,
smbusba£
 + 4);

93
	`__outb
(0x12,
smbusba£
 + 0);

95
	`rdtsc
(
l1
,
h1
);

96
	`˝röt
(
POP2_Y
,
POP2_X
 + 16,
s
 +
cmd
 % 8);

97 ((
	`__öb
(
smbusba£
 + 1) & 0x01) == 0) ||

98 ((
	`__öb
(
smbusba£
 + 1) & 0x08) != 0)) {

99
	`rdtsc
(
l2
,
h2
);

100
t
 = ((
h2
 -
h1
Ë* 0xfffffff‡+ (
l2
 -
l1
)Ë/
v
->
˛ks_m£c
;

101 i‡(
t
 > 10) ;

103 
	`__öb
(
smbusba£
 + 6);

104
	}
}

106 
	$us15w_ªad_•d
(
dimmadr
)

108 
x
;

109
•d
[0] =
	`us15w_smb_ªad_byã
(0x50 +
dimmadr
, 0);

110 i‡(
•d
[0] == 0xff)  -1;

111 
x
 = 1; x < 256; x++) {

112
•d
[
x
] =
	`us15w_smb_ªad_byã
(0x50 +
dimmadr
, () x);

115
	}
}

117 
	spci_smbus_c⁄åﬁÀr
 {

118 
	mvíd‹
;

119 
	mdevi˚
;

120 *
	m«me
;

121 (*
	mgë_adr
)();

122 (*
	mªad_•d
)(
	mdimmadr
);

125 
pci_smbus_c⁄åﬁÀr

	gsmbc⁄åﬁÀrs
[] = {

126 {0x8086, 0x1C22, "I¡ñ P67",
ich5_gë_smb
,
ich5_ªad_•d
},

127 {0x8086, 0x3B30, "I¡ñ P55",
ich5_gë_smb
,
ich5_ªad_•d
},

128 {0x8086, 0x3A60, "I¡ñ ICH10B",
ich5_gë_smb
,
ich5_ªad_•d
},

129 {0x8086, 0x3A30, "I¡ñ ICH10R",
ich5_gë_smb
,
ich5_ªad_•d
},

130 {0x8086, 0x2930, "I¡ñ ICH9",
ich5_gë_smb
,
ich5_ªad_•d
},

131 {0x8086, 0x283E, "I¡ñ ICH8",
ich5_gë_smb
,
ich5_ªad_•d
},

132 {0x8086, 0x27DA, "I¡ñ ICH7",
ich5_gë_smb
,
ich5_ªad_•d
},

133 {0x8086, 0x266A, "I¡ñ ICH6",
ich5_gë_smb
,
ich5_ªad_•d
},

134 {0x8086, 0x24D3, "I¡ñ ICH5",
ich5_gë_smb
,
ich5_ªad_•d
},

135 {0x8086, 0x24C3, "I¡ñ ICH4",
ich5_gë_smb
,
ich5_ªad_•d
},

136 {0x8086, 0x25A4, "I¡ñ 6300ESB",
ich5_gë_smb
,
ich5_ªad_•d
},

137 {0x8086, 0x269B, "I¡ñ ESB2",
ich5_gë_smb
,
ich5_ªad_•d
},

138 {0x8086, 0x8119, "I¡ñ US15W",
us15w_gë_smb
,
us15w_ªad_•d
},

139 {0x8086, 0x5032, "I¡ñ EP80579",
ich5_gë_smb
,
ich5_ªad_•d
},

140 {0, 0, "",
NULL
, NULL}

144 
	$föd_smb_c⁄åﬁÀr
()

146 
i
 = 0;

147 
vÆuev
,
vÆued
;

148 
smbdev
 = 0; smbdev < 32; smbdev++) {

149 
smbfun
 = 0; smbfun < 8; smbfun++) {

150
	`pci_c⁄f_ªad
(0,
smbdev
,
smbfun
, 0, 2, &
vÆuev
);

151 i‡(
vÆuev
 != 0xFFFF) {

152 
i
 = 0;
smbc⁄åﬁÀrs
[i].
víd‹
 > 0; i++) {

153 i‡(
vÆuev
 =
smbc⁄åﬁÀrs
[
i
].
víd‹
) {

154
	`pci_c⁄f_ªad
(0,
smbdev
,
smbfun
, 2, 2, &
vÆued
);

155 i‡(
vÆued
 =
smbc⁄åﬁÀrs
[
i
].
devi˚
) {

156 
i
;

164
	}
}

168 
	$gë_•d_•ec
()

170 
ödex
;

171 
h
,
i
,
j
,
z
;

172 
k
 = 0;

173 
moduÀ_size
;

174 
curcﬁ
;

175 
ãmp_nbd
;

177
ödex
 =
	`föd_smb_c⁄åﬁÀr
();

179 i‡(
ödex
 == -1)

185
smbc⁄åﬁÀrs
[
ödex
].
	`gë_adr
();

186
	`˝röt
(
LINE_SPD
-2, 0, "Memory SPD Informations");

187
	`˝röt
(
LINE_SPD
-1, 0, "-----------------------------------");

189 
j
 = 0; j < 8; j++) {

190 i‡(
smbc⁄åﬁÀrs
[
ödex
].
	`ªad_•d
(
j
) == 0) {

191
curcﬁ
 = 1;

192 if(
•d
[2] == 0x0b){

196
	`˝röt
(
LINE_SPD
+
k
,
curcﬁ
, " - Slot :");

197
	`d¥öt
(
LINE_SPD
+
k
,
curcﬁ
+8, k, 1, 0);

199
moduÀ_size
 =
	`gë_ddr3_moduÀ_size
(
•d
[4] & 0xF, spd[8] & 0x7, spd[7] & 0x7, spd[7] >> 3);

200
ãmp_nbd
 =
	`gënum
(
moduÀ_size
);
curcﬁ
 += 12;

201
	`d¥öt
(
LINE_SPD
+
k
,
curcﬁ
,
moduÀ_size
,
ãmp_nbd
, 0); curcol +=Åemp_nbd;

202
	`˝röt
(
LINE_SPD
+
k
,
curcﬁ
, " MB"); curcol += 4;

205 
•d
[12])

209
	`˝röt
(
LINE_SPD
+
k
,
curcﬁ
, "PC3-6400");

210
curcﬁ
 += 8;

213
	`˝röt
(
LINE_SPD
+
k
,
curcﬁ
, "PC3-8500");

214
curcﬁ
 += 8;

217
	`˝röt
(
LINE_SPD
+
k
,
curcﬁ
, "PC3-10600");

218
curcﬁ
 += 9;

221
	`˝röt
(
LINE_SPD
+
k
,
curcﬁ
, "PC3-12800");

222
curcﬁ
 += 9;

225
	`˝röt
(
LINE_SPD
+
k
,
curcﬁ
, "PC3-15000");

226
curcﬁ
 += 9;

229
	`˝röt
(
LINE_SPD
+
k
,
curcﬁ
, "PC3-16000");

230
curcﬁ
 += 9;

234
curcﬁ
++;

237
•d
[117] &= 0x0F;

238 
i
 = 0;
jï106
[i].
c⁄t_code
 < 9; i++) {

239 i‡(
•d
[117] =
jï106
[
i
].
c⁄t_code
 && spd[118] =jï106[i].
hex_byã
) {

241
	`˝röt
(
LINE_SPD
+
k
,
curcﬁ
, "-"); curcol += 2;

242
	`˝röt
(
LINE_SPD
+
k
,
curcﬁ
,
jï106
[
i
].
«me
);

243 
z
 = 0;
jï106
[
i
].
«me
[z] !'\0'; z++Ë{
curcﬁ
++; }

244
curcﬁ
++;

246 
h
 = 128; h < 146; h++) {

247
	`˝röt
(16+
k
,
curcﬁ
,
	`c⁄vît_hex_to_ch¨
(
•d
[
h
]));

248
curcﬁ
++;

252 if(
•d
[176] == 0x0C && spd[177] == 0x4A)

254
	`˝röt
(
LINE_SPD
+
k
,
curcﬁ
, "*XMP*");

260 if(
•d
[2] == 0x08){

262
	`˝röt
(
LINE_SPD
+
k
,
curcﬁ
, " - Slot :");

263
	`d¥öt
(
LINE_SPD
+
k
,
curcﬁ
+8, k, 1, 0);

265
moduÀ_size
 =
	`gë_ddr2_moduÀ_size
(
•d
[31], spd[5]);

266
ãmp_nbd
 =
	`gënum
(
moduÀ_size
);
curcﬁ
 += 12;

267
	`d¥öt
(
LINE_SPD
+
k
,
curcﬁ
,
moduÀ_size
,
ãmp_nbd
, 0); curcol +=Åemp_nbd;

268
	`˝röt
(
LINE_SPD
+
k
,
curcﬁ
, " MB"); curcol += 4;

271 
ddr2_•ìd
,
byã1
,
byã2
;

273
byã1
 = (
•d
[9] >> 4) * 10;

274
byã2
 =
•d
[9] & 0xF;

276
ddr2_•ìd
 = 1 / (
byã1
 +
byã2
) * 10000;

278
ãmp_nbd
 =
	`gënum
(
ddr2_•ìd
);

279
	`˝röt
(
LINE_SPD
+
k
,
curcﬁ
, "DDR2-"); curcol += 5;

280
	`d¥öt
(
LINE_SPD
+
k
,
curcﬁ
,
ddr2_•ìd
,
ãmp_nbd
, 0); curcol +=Åemp_nbd;

283 
ccode
 = 0;

285 
i
 = 64; i < 72; i++)

287 if(
•d
[
i
] =0x7FË{
ccode
++; }

290
curcﬁ
++;

292 
i
 = 0;
jï106
[i].
c⁄t_code
 < 9; i++) {

293 i‡(
ccode
 =
jï106
[
i
].
c⁄t_code
 &&
•d
[64+ccode] =jï106[i].
hex_byã
) {

295
	`˝röt
(
LINE_SPD
+
k
,
curcﬁ
, "-"); curcol += 2;

296
	`˝röt
(
LINE_SPD
+
k
,
curcﬁ
,
jï106
[
i
].
«me
);

297 
z
 = 0;
jï106
[
i
].
«me
[z] !'\0'; z++Ë{
curcﬁ
++; }

298
curcﬁ
++;

300 
h
 = 73; h < 91; h++) {

301
	`˝röt
(16+
k
,
curcﬁ
,
	`c⁄vît_hex_to_ch¨
(
•d
[
h
]));

302
curcﬁ
++;

309
k
++;

312
	}
}

315 
	$show_•d
()

317 
ödex
;

318 
i
,
j
;

319 
Êag
 = 0;

320
	`p›2up
();

321
	`waô_keyup
();

322
ödex
 =
	`föd_smb_c⁄åﬁÀr
();

323 i‡(
ödex
 == -1) {

324
	`˝röt
(
POP2_Y
,
POP2_X
+1, "SMBus ControllerÇot known");

325 !
	`gë_key
());

326
	`waô_keyup
();

327
	`p›2down
();

330 
	`˝röt
(
POP2_Y
,
POP2_X
+1, "SPD Data: Slot");

331
smbc⁄åﬁÀrs
[
ödex
].
	`gë_adr
();

332 
j
 = 0; j < 16; j++) {

333 i‡(
smbc⁄åﬁÀrs
[
ödex
].
	`ªad_•d
(
j
) == 0) {

334
	`d¥öt
(
POP2_Y
,
POP2_X
 + 15,
j
, 2, 0);

335 
i
 = 0; i < 256; i++) {

336
	`h¥öt2
(2 +
POP2_Y
 +
i
 / 16, 3 +
POP2_X
 + (ò% 16Ë* 3,
•d
[i], 2);

338
Êag
 = 0;

339 !
Êag
) {

340 i‡(
	`gë_key
()Ë
Êag
++;

342
	`waô_keyup
();

345
	`p›2down
();

346
	}
}

348 
	$gë_ddr3_moduÀ_size
(
sdøm_ˇ∑côy
, 
¥im_bus_width
, 
sdøm_width
, 
ønks
)

350 
moduÀ_size
;

352 
sdøm_ˇ∑côy
)

355
moduÀ_size
 = 256;

358
moduÀ_size
 = 512;

362
moduÀ_size
 = 1024;

365
moduÀ_size
 = 2048;

368
moduÀ_size
 = 4096;

371
moduÀ_size
 = 8192;

374
moduÀ_size
 = 16384;

378
moduÀ_size
 /= 8;

380 
¥im_bus_width
)

383
moduÀ_size
 *= 8;

386
moduÀ_size
 *= 16;

389
moduÀ_size
 *= 32;

392
moduÀ_size
 *= 64;

396 
sdøm_width
)

399
moduÀ_size
 /= 4;

402
moduÀ_size
 /= 8;

405
moduÀ_size
 /= 16;

408
moduÀ_size
 /= 32;

413
moduÀ_size
 *(
ønks
 + 1);

415 
moduÀ_size
;

416
	}
}

419 
	$gë_ddr2_moduÀ_size
(
ønk_dísôy_byã
, 
ønk_num_byã
)

421 
moduÀ_size
;

423 
ønk_dísôy_byã
)

426
moduÀ_size
 = 1024;

429
moduÀ_size
 = 2048;

432
moduÀ_size
 = 4096;

435
moduÀ_size
 = 8192;

438
moduÀ_size
 = 16384;

441
moduÀ_size
 = 128;

444
moduÀ_size
 = 256;

448
moduÀ_size
 = 512;

452
moduÀ_size
 *(
ønk_num_byã
 & 7) + 1;

454 
moduÀ_size
;

456
	}
}

459 
	sascii_m≠
 {

460 
	mhex_code
;

461 *
	m«me
;

465 *
	$c⁄vît_hex_to_ch¨
(
hex_‹g
) {

466 
buf
[2] = " ";

467 i‡(
hex_‹g
 >= 0x20 && hex_org < 0x80) {

468
buf
[0] =
hex_‹g
;

471
buf
[0] = ' ';

474 
buf
;

475
	}
}

	@spd.h

7 
gë_•d_•ec
();

8 
gë_ddr2_moduÀ_size
(
ønk_dísôy_byã
, 
ønk_num_byã
);

9 
gë_ddr3_moduÀ_size
(
sdøm_ˇ∑côy
, 
¥im_bus_width
, 
sdøm_width
, 
ønks
);

10 *
c⁄vît_hex_to_ch¨
(
hex_‹g
);

11 
	#LINE_SPD
 16

	)

	@stdint.h

1 #i‚de‡
I386_STDINT_H


2 
	#I386_STDINT_H


	)

5 
	tuöt8_t
;

6 sig√d 
	töt8_t
;

8 
	tuöt16_t
;

9 sig√d 
	töt16_t
;

11 
	tuöt32_t
;

12 sig√d 
	töt32_t
;

14 
	tuöt64_t
;

15 sig√d 
	töt64_t
;

18 
	tuöt_Àa°8_t
;

19 sig√d 
	töt_Àa°8_t
;

21 
	tuöt_Àa°16_t
;

22 sig√d 
	töt_Àa°16_t
;

24 
	tuöt_Àa°32_t
;

25 sig√d 
	töt_Àa°32_t
;

27 
	tuöt_Àa°64_t
;

28 sig√d 
	töt_Àa°64_t
;

31 
	tuöt_Á°8_t
;

32 sig√d 
	töt_Á°8_t
;

34 
	tuöt_Á°16_t
;

35 sig√d 
	töt_Á°16_t
;

37 
	tuöt_Á°32_t
;

38 sig√d 
	töt_Á°32_t
;

40 
	tuöt_Á°64_t
;

41 sig√d 
	töt_Á°64_t
;

44 
	töçå_t
;

45 
	tuöçå_t
;

48 
	tötmax_t
;

49 
	tuötmax_t
;

51 
	tboﬁ
;

52 #i‚de‡
FALSE


53 
	#FALSE
 0

	)

56 #i‚de‡
TRUE


57 
	#TRUE
 1

	)

	@test.c

12 
	~"ã°.h
"

13 
	~"c⁄fig.h
"

14 
	~<sys/io.h
>

15 
	~"dmi.h
"

16 
	~<öây≥s.h
>

18 
£gs
,
baû
;

19 vﬁ©ûê
ul⁄g
 *
p
;

20 
ul⁄g

p1
,
p2
;

21 
ã°_ticks
,
¡icks
;

22 
t£q
Åseq[];

23 
upd©e_îr_cou¡s
();

24 
¥öt_îr_cou¡s
();

25 
pﬁl_îr‹s
();

27 
	gecou¡
 = 0;

29 
ölöe

ul⁄g

	$roundup
(
ul⁄g

vÆue
, ul⁄g
mask
)

31  (
vÆue
 +
mask
) & ~mask;

32
	}
}

36 
	$addr_t°1
()

38 
i
,
j
,
k
;

39 vﬁ©ûê
ul⁄g
 *
±
;

40 vﬁ©ûê
ul⁄g
 *
íd
;

41
ul⁄g

bad
,
mask
,
b™k
;

44 
p1
=0,
j
=0; j<2; j++) {

45
	`h¥öt
(
LINE_PAT
,
COL_PAT
,
p1
);

48
p
 = (
ul⁄g
 *)
	`roundup
((ul⁄g)
v
->
m≠
[0].
°¨t
, 0x1ffff);

49 *
p
 =
p1
;

52
p1
 = ~p1;

53
íd
 =
v
->
m≠
[
£gs
-1].end;

54 
i
=0; i<100; i++) {

55
mask
 = 4;

57
±
 = (
ul⁄g
 *)((ul⁄g)
p
 |
mask
);

58 i‡((
uöçå_t
)
±
 =(uöçå_t)
p
) {

59
mask
 = mask << 1;

62 i‡((
uöçå_t
)
±
 >(uöçå_t)
íd
) {

65 *
±
 =
p1
;

66 i‡((
uöçå_t
)(
bad
 = *
p
Ë!(uöçå_t)~
p1
) {

67
	`ad_îr1
((
ul⁄g
 *)
p
, (ul⁄g *)
mask
,

68
bad
, ~
p1
);

69
i
 = 1000;

71
mask
 = mask << 1;

72 } 
mask
);

74
	`do_tick
();

75
BAILR


81 i‡(
v
->
pm≠
[v->
m£gs
 - 1].
íd
 > (0x800000 >> 12)) {

82
b™k
 = 0x100000;

84
b™k
 = 0x40000;

86 
p1
=0,
k
=0; k<2; k++) {

87
	`h¥öt
(
LINE_PAT
,
COL_PAT
,
p1
);

89 
j
=0; j<
£gs
; j++) {

90
p
 =
v
->
m≠
[
j
].
°¨t
;

92
p
 = (
ul⁄g
 *)
	`roundup
((ul⁄gÌ,
b™k
 - 1);

93
íd
 =
v
->
m≠
[
j
].end;

94 (
uöçå_t
)
p
 < (uöçå_t)
íd
) {

95 *
p
 =
p1
;

97
p1
 = ~p1;

98 
i
=0; i<200; i++) {

99
mask
 = 4;

101
±
 = (
ul⁄g
 *)

102 ((
ul⁄g
)
p
 |
mask
);

103 i‡((
uöçå_t
)
±
 =(uöçå_t)
p
) {

104
mask
 = mask << 1;

107 i‡((
uöçå_t
)
±
 >(uöçå_t)
íd
) {

110 *
±
 =
p1
;

111 i‡((
uöçå_t
)(
bad
 = *
p
Ë!(uöçå_t)~
p1
) {

112
	`ad_îr1
((
ul⁄g
 *)
p
,

113 (
ul⁄g
 *)
mask
,

114
bad
,~
p1
);

115
i
 = 200;

117
mask
 = mask << 1;

118 } 
mask
);

120 i‡((
uöçå_t
)(
p
 +
b™k
/4) > (uintptr_t)p) {

121
p
 +
b™k
/4;

123
p
 =
íd
;

125
p1
 = ~p1;

128
	`do_tick
();

129
BAILR


130
p1
 = ~p1;

132
	}
}

137 
	$addr_t°2
()

139 
j
,
d⁄e
;

140 vﬁ©ûê
ul⁄g
 *
≥
;

141 vﬁ©ûê
ul⁄g
 *
íd
, *
°¨t
;

143
	`˝röt
(
LINE_PAT
,
COL_PAT
, " ");

146 
j
=0; j<
£gs
; j++) {

147
°¨t
 =
v
->
m≠
[
j
].start;

148
íd
 =
v
->
m≠
[
j
].end;

149
≥
 = (
ul⁄g
 *)
°¨t
;

150
p
 =
°¨t
;

151
d⁄e
 = 0;

154 i‡((
uöçå_t
)(
≥
 +
SPINSZ
) > (uintptr_t)pe) {

155
≥
 +
SPINSZ
;

157
≥
 =
íd
;

159 i‡((
uöçå_t
)
≥
 >(uöçå_t)
íd
) {

160
≥
 =
íd
;

161
d⁄e
++;

163 i‡((
uöçå_t
)
p
 =(uöçå_t)
≥
) {

172
asm

	`__vﬁ©ûe__
 (

181 : "=D" (
p
)

182 : "D" (
p
), "d" (
≥
)

184
	`do_tick
();

185
BAILR


186 } !
d⁄e
);

190 
j
=0; j<
£gs
; j++) {

191
°¨t
 =
v
->
m≠
[
j
].start;

192
íd
 =
v
->
m≠
[
j
].end;

193
≥
 = (
ul⁄g
 *)
°¨t
;

194
p
 =
°¨t
;

195
d⁄e
 = 0;

198 i‡((
uöçå_t
)(
≥
 +
SPINSZ
) > (uintptr_t)pe) {

199
≥
 +
SPINSZ
;

201
≥
 =
íd
;

203 i‡((
uöçå_t
)
≥
 >(uöçå_t)
íd
) {

204
≥
 =
íd
;

205
d⁄e
++;

207 i‡((
uöçå_t
)
p
 =(uöçå_t)
≥
 ) {

217
asm

	`__vﬁ©ûe__
 (

242 : "=D" (
p
)

243 : "D" (
p
), "d" (
≥
)

246
	`do_tick
();

247
BAILR


248 } !
d⁄e
);

250
	}
}

258 
	$movövr
()

260 
i
,
j
,
d⁄e
,
£ed1
,
£ed2
;

261 vﬁ©ûê
ul⁄g
 *
≥
;

262 vﬁ©ûê
ul⁄g
 *
°¨t
,*
íd
;

263
ul⁄g

num
;

264
uöçå_t

£g_°¨t
;

267 i‡(
v
->
rdtsc
) {

268
asm

	`__vﬁ©ûe__
 ("rdtsc":"˜" (
£ed1
),"=d" (
£ed2
));

270
£ed1
 = 521288629 +
v
->
∑ss
;

271
£ed2
 = 362436069 -
v
->
∑ss
;

275
	`h¥öt
(
LINE_PAT
,
COL_PAT
,
£ed1
);

276
	`ønd_£ed
(
£ed1
,
£ed2
);

277 
j
=0; j<
£gs
; j++) {

278
°¨t
 =
v
->
m≠
[
j
].start;

279
íd
 =
v
->
m≠
[
j
].end;

280
≥
 =
°¨t
;

281
p
 =
°¨t
;

282
£g_°¨t
 = (
uöçå_t
)
p
;

283
d⁄e
 = 0;

286 i‡((
uöçå_t
)(
≥
 +
SPINSZ
) > (uintptr_t)pe) {

287
≥
 +
SPINSZ
;

289
≥
 =
íd
;

291 i‡((
uöçå_t
)
≥
 >(uöçå_t)
íd
) {

292
≥
 =
íd
;

293
d⁄e
++;

295 i‡(
£g_°¨t
 =(
uöçå_t
)
≥
) {

305
asm

	`__vﬁ©ûe__
 (

314 : "=D" (
p
)

315 : "D" (
p
), "b" (
≥
)

319
	`do_tick
();

320
BAILR


321 } !
d⁄e
);

327 
i
=0; i<2; i++) {

328
	`ønd_£ed
(
£ed1
,
£ed2
);

329 
j
=0; j<
£gs
; j++) {

330
°¨t
 =
v
->
m≠
[
j
].start;

331
íd
 =
v
->
m≠
[
j
].end;

332
≥
 =
°¨t
;

333
p
 =
°¨t
;

334
£g_°¨t
 = (
uöçå_t
)
p
;

335
d⁄e
 = 0;

338 i‡((
uöçå_t
)(
≥
 +
SPINSZ
) > (uintptr_t)pe) {

339
≥
 +
SPINSZ
;

341
≥
 =
íd
;

343 i‡((
uöçå_t
)
≥
 >(uöçå_t)
íd
) {

344
≥
 =
íd
;

345
d⁄e
++;

347 i‡(
£g_°¨t
 =(
uöçå_t
)
≥
) {

363 i‡(
i
) {

364
num
 = 0xffffffff;

366
num
 = 0;

368
asm

	`__vﬁ©ûe__
 (

400 : "=D" (
p
)

401 : "D" (
p
), "S" (
≥
), "b" (
num
)

404
	`do_tick
();

405
BAILR


406 } !
d⁄e
);

409
	}
}

415 
	$movöv1
(
ôî
,
ul⁄g

p1
, ul⁄g
p2
)

417 
i
,
j
,
d⁄e
;

418 vﬁ©ûê
ul⁄g
 *
≥
;

419 vﬁ©ûê
ul⁄g

Àn
;

420 vﬁ©ûê
ul⁄g
 *
°¨t
,*
íd
;

423
	`h¥öt
(
LINE_PAT
,
COL_PAT
,
p1
);

426 
j
=0; j<
£gs
; j++) {

427
°¨t
 =
v
->
m≠
[
j
].start;

428
íd
 =
v
->
m≠
[
j
].end;

429
≥
 =
°¨t
;

430
p
 =
°¨t
;

431
d⁄e
 = 0;

434 i‡((
uöçå_t
)(
≥
 +
SPINSZ
) > (uintptr_t)pe) {

435
≥
 +
SPINSZ
;

437
≥
 =
íd
;

439 i‡((
uöçå_t
)
≥
 >(uöçå_t)
íd
) {

440
≥
 =
íd
;

441
d⁄e
++;

443
Àn
 =
≥
 -
p
;

444 i‡((
uöçå_t
)
p
 =(uöçå_t)
≥
) {

452
asm

	`__vﬁ©ûe__
 (

455 : "=D" (
p
)

456 : "c" (
Àn
), "0" (
p
), "a" (
p1
)

458
	`do_tick
();

459
BAILR


460 } !
d⁄e
);

466 
i
=0; i<
ôî
; i++) {

467 
j
=0; j<
£gs
; j++) {

468
°¨t
 =
v
->
m≠
[
j
].start;

469
íd
 =
v
->
m≠
[
j
].end;

470
≥
 =
°¨t
;

471
p
 =
°¨t
;

472
d⁄e
 = 0;

475 i‡((
uöçå_t
)(
≥
 +
SPINSZ
) > (uintptr_t)pe) {

476
≥
 +
SPINSZ
;

478
≥
 =
íd
;

480 i‡((
uöçå_t
)
≥
 >(uöçå_t)
íd
) {

481
≥
 =
íd
;

482
d⁄e
++;

484 i‡((
uöçå_t
)
p
 =(uöçå_t)
≥
) {

495
asm

	`__vﬁ©ûe__
 (

525 : "=D" (
p
)

526 : "a" (
p1
), "0" (
p
), "d" (
≥
), "b" (
p2
)

529
	`do_tick
();

530
BAILR


531 } !
d⁄e
);

533 
j
=
£gs
-1; j>=0; j--) {

534
°¨t
 =
v
->
m≠
[
j
].start;

535
íd
 =
v
->
m≠
[
j
].end;

536
≥
 =
íd
 -1;

537
p
 =
íd
 -1;

538
d⁄e
 = 0;

541 i‡((
uöçå_t
)(
≥
 -
SPINSZ
) < (uintptr_t)pe) {

542
≥
 -
SPINSZ
;

544
≥
 =
°¨t
;

546 i‡((
uöçå_t
)
≥
 <(uöçå_t)
°¨t
) {

547
≥
 =
°¨t
;

548
d⁄e
++;

550 i‡((
uöçå_t
)
p
 =(uöçå_t)
≥
) {

561
asm

	`__vﬁ©ûe__
 (

593 : "=D" (
p
)

594 : "a" (
p1
), "0" (
p
), "d" (
≥
), "b" (
p2
)

597
	`do_tick
();

598
BAILR


599 } !
d⁄e
);

602
	}
}

604 
	$movöv32
(
ôî
,
ul⁄g

p1
, ul⁄g
lb
, ul⁄g
hb
, 
svÆ
, 
off
)

606 
i
,
j
,
k
=0,
d⁄e
;

607 vﬁ©ûê
ul⁄g
 *
≥
;

608 vﬁ©ûê
ul⁄g
 *
°¨t
, *
íd
;

609
ul⁄g

∑t
 = 0;

617
	`h¥öt
(
LINE_PAT
,
COL_PAT
,
p1
);

620 
j
=0; j<
£gs
; j++) {

621
°¨t
 =
v
->
m≠
[
j
].start;

622
íd
 =
v
->
m≠
[
j
].end;

623
≥
 =
°¨t
;

624
p
 =
°¨t
;

625
d⁄e
 = 0;

626
k
 =
off
;

627
∑t
 =
p1
;

630 i‡((
uöçå_t
)(
≥
 +
SPINSZ
) > (uintptr_t)pe) {

631
≥
 +
SPINSZ
;

633
≥
 =
íd
;

635 i‡((
uöçå_t
)
≥
 >(uöçå_t)
íd
) {

636
≥
 =
íd
;

637
d⁄e
++;

639 i‡((
uöçå_t
)
p
 =(uöçå_t)
≥
) {

656
asm

	`__vﬁ©ûe__
 (

669 : "=b" (
k
), "=D" (
p
), "=c" (
∑t
)

670 : "D" (
p
),"d" (
≥
),"b" (
k
),"c" (
∑t
)

673
	`do_tick
();

674
BAILR


675 } !
d⁄e
);

681 
i
=0; i<
ôî
; i++) {

682 
j
=0; j<
£gs
; j++) {

683
°¨t
 =
v
->
m≠
[
j
].start;

684
íd
 =
v
->
m≠
[
j
].end;

685
≥
 =
°¨t
;

686
p
 =
°¨t
;

687
d⁄e
 = 0;

688
k
 =
off
;

689
∑t
 =
p1
;

692 i‡((
uöçå_t
)(
≥
 +
SPINSZ
) > (uintptr_t)pe) {

693
≥
 +
SPINSZ
;

695
≥
 =
íd
;

697 i‡((
uöçå_t
)
≥
 >(uöçå_t)
íd
) {

698
≥
 =
íd
;

699
d⁄e
++;

701 i‡((
uöçå_t
)
p
 =(uöçå_t)
≥
) {

720
asm

	`__vﬁ©ûe__
 (

765 : "=b" (
k
), "=D" (
p
), "=c" (
∑t
)

766 : "D" (
p
),"d" (
≥
),"b" (
k
),"c" (
∑t
)

769
	`do_tick
();

770
BAILR


771 } !
d⁄e
);

787
asm

	`__vﬁ©ûe__
 (

792 : "=c" (
k
), "=b" (
∑t
)

793 : "c" (
k
), "b" (
lb
)

797 
j
=
£gs
-1; j>=0; j--) {

798
°¨t
 =
v
->
m≠
[
j
].start;

799
íd
 =
v
->
m≠
[
j
].end;

800
p
 =
íd
 -1;

801
≥
 =
íd
 -1;

802
d⁄e
 = 0;

805 i‡((
uöçå_t
)(
≥
 -
SPINSZ
) < (uintptr_t)pe) {

806
≥
 -
SPINSZ
;

808
≥
 =
°¨t
;

810 i‡((
uöçå_t
)
≥
 <(uöçå_t)
°¨t
) {

811
≥
 =
°¨t
;

812
d⁄e
++;

814 i‡((
uöçå_t
)
p
 =(uöçå_t)
≥
) {

832
asm

	`__vﬁ©ûe__
 (

879 : "=b" (
k
), "=D" (
p
), "=c" (
∑t
)

880 : "D" (
p
),"d" (
≥
),"b" (
k
),"c" (
∑t
)

883
	`do_tick
();

884
BAILR


885 } !
d⁄e
);

888
	}
}

893 
	$modt°
(
off£t
, 
ôî
,
ul⁄g

p1
, ul⁄g
p2
)

895 
j
,
k
,
l
,
d⁄e
;

896 vﬁ©ûê
ul⁄g
 *
≥
;

897 vﬁ©ûê
ul⁄g
 *
°¨t
, *
íd
;

900
	`h¥öt
(
LINE_PAT
,
COL_PAT
-2,
p1
);

901
	`˝röt
(
LINE_PAT
,
COL_PAT
+6, "-");

902
	`d¥öt
(
LINE_PAT
,
COL_PAT
+7,
off£t
, 2, 1);

905 
j
=0; j<
£gs
; j++) {

906
°¨t
 =
v
->
m≠
[
j
].start;

907
íd
 =
v
->
m≠
[
j
].end;

908
≥
 = (
ul⁄g
 *)
°¨t
;

909
p
 =
°¨t
+
off£t
;

910
d⁄e
 = 0;

913 i‡((
uöçå_t
)(
≥
 +
SPINSZ
) > (uintptr_t)pe) {

914
≥
 +
SPINSZ
;

916
≥
 =
íd
;

918 i‡((
uöçå_t
)
≥
 >(uöçå_t)
íd
) {

919
≥
 =
íd
;

920
d⁄e
++;

922 i‡((
uöçå_t
)
p
 =(uöçå_t)
≥
) {

930
asm

	`__vﬁ©ûe__
 (

939 : "=D" (
p
)

940 : "D" (
p
), "d" (
≥
), "a" (
p1
)

942
	`do_tick
();

943
BAILR


944 } !
d⁄e
);

948 
l
=0;Ü<
ôî
;Ü++) {

949 
j
=0; j<
£gs
; j++) {

950
°¨t
 =
v
->
m≠
[
j
].start;

951
íd
 =
v
->
m≠
[
j
].end;

952
≥
 = (
ul⁄g
 *)
°¨t
;

953
p
 =
°¨t
;

954
d⁄e
 = 0;

955
k
 = 0;

958 i‡((
uöçå_t
)(
≥
 +
SPINSZ
) > (uintptr_t)pe) {

959
≥
 +
SPINSZ
;

961
≥
 =
íd
;

963 i‡((
uöçå_t
)
≥
 >(uöçå_t)
íd
) {

964
≥
 =
íd
;

965
d⁄e
++;

967 i‡((
uöçå_t
)
p
 =(uöçå_t)
≥
) {

980
asm

	`__vﬁ©ûe__
 (

997 : "=D" (
p
), "=b" (
k
)

998 : "D" (
p
), "d" (
≥
), "a" (
p2
),

999 "b" (
k
), "c" (
off£t
)

1001
	`do_tick
();

1002
BAILR


1003 } !
d⁄e
);

1008 
j
=0; j<
£gs
; j++) {

1009
°¨t
 =
v
->
m≠
[
j
].start;

1010
íd
 =
v
->
m≠
[
j
].end;

1011
≥
 = (
ul⁄g
 *)
°¨t
;

1012
p
 =
°¨t
+
off£t
;

1013
d⁄e
 = 0;

1016 i‡((
uöçå_t
)(
≥
 +
SPINSZ
) > (uintptr_t)pe) {

1017
≥
 +
SPINSZ
;

1019
≥
 =
íd
;

1021 i‡((
uöçå_t
)
≥
 >(uöçå_t)
íd
) {

1023
≥
 =
íd
;

1024
d⁄e
++;

1026 i‡((
uöçå_t
)
p
 =(uöçå_t)
≥
) {

1036
asm

	`__vﬁ©ûe__
 (

1063 : "=D" (
p
)

1064 : "D" (
p
), "d" (
≥
), "a" (
p1
)

1067
	`do_tick
();

1068
BAILR


1069 } !
d⁄e
);

1071
	`˝röt
(
LINE_PAT
,
COL_PAT
, " ");

1072
	}
}

1080 
	$block_move
(
ôî
)

1082 
i
,
j
,
d⁄e
;

1083
ul⁄g

Àn
;

1084 vﬁ©ûê
ul⁄g

p
,
≥
,
µ
;

1085 vﬁ©ûê
ul⁄g

°¨t
,
íd
;

1087
	`˝röt
(
LINE_PAT
,
COL_PAT
-2, " ");

1090 
j
=0; j<
£gs
; j++) {

1091
°¨t
 = (
ul⁄g
)
v
->
m≠
[
j
].start;

1092 #ifde‡
USB_WAR


1096 i‡(
°¨t
 < 0x4f0) {

1097
°¨t
 = 0x4f0;

1100
íd
 = (
ul⁄g
)
v
->
m≠
[
j
].end;

1101
≥
 =
°¨t
;

1102
p
 =
°¨t
;

1103
d⁄e
 = 0;

1106 i‡((
uöçå_t
)(
≥
 +
SPINSZ
*4) > (uintptr_t)pe) {

1107
≥
 +
SPINSZ
*4;

1109
≥
 =
íd
;

1111 i‡((
uöçå_t
)
≥
 >(uöçå_t)
íd
) {

1113
≥
 =
íd
;

1114
d⁄e
++;

1116 i‡((
uöçå_t
)
p
 =(uöçå_t)
≥
) {

1120
Àn
 = ((
ul⁄g
)
≥
 - (ul⁄g)
p
) / 64;

1121
asm

	`__vﬁ©ûe__
 (

1148 : "=D" (
p
)

1149 : "D" (
p
), "c" (
Àn
), "a" (1)

1152
	`do_tick
();

1153
BAILR


1154 } !
d⁄e
);

1161 
j
=0; j<
£gs
; j++) {

1162
°¨t
 = (
ul⁄g
)
v
->
m≠
[
j
].start;

1163 #ifde‡
USB_WAR


1167 i‡(
°¨t
 < 0x4f0) {

1168
°¨t
 = 0x4f0;

1171
íd
 = (
ul⁄g
)
v
->
m≠
[
j
].end;

1172
≥
 =
°¨t
;

1173
p
 =
°¨t
;

1174
d⁄e
 = 0;

1177 i‡((
uöçå_t
)(
≥
 +
SPINSZ
*4) > (uintptr_t)pe) {

1178
≥
 +
SPINSZ
*4;

1180
≥
 =
íd
;

1182 i‡((
uöçå_t
)
≥
 >(uöçå_t)
íd
) {

1183
≥
 =
íd
;

1184
d⁄e
++;

1186 i‡((
uöçå_t
)
p
 =(uöçå_t)
≥
) {

1189
µ
 =
p
 + ((
≥
 -Ö) / 2);

1190
Àn
 = ((
ul⁄g
)
≥
 - (ul⁄g)
p
) / 8;

1191 
i
=0; i<
ôî
; i++) {

1192
asm

	`__vﬁ©ûe__
 (

1214 :: "g" (
p
), "g" (
µ
), "g" (
Àn
)

1217
	`do_tick
();

1218
BAILR


1220
p
 =
≥
;

1221 } !
d⁄e
);

1228 
j
=0; j<
£gs
; j++) {

1229
°¨t
 = (
ul⁄g
)
v
->
m≠
[
j
].start;

1230 #ifde‡
USB_WAR


1234 i‡(
°¨t
 < 0x4f0) {

1235
°¨t
 = 0x4f0;

1238
íd
 = (
ul⁄g
)
v
->
m≠
[
j
].end;

1239
≥
 =
°¨t
;

1240
p
 =
°¨t
;

1241
d⁄e
 = 0;

1244 i‡((
uöçå_t
)(
≥
 +
SPINSZ
*4) > (uintptr_t)pe) {

1245
≥
 +
SPINSZ
*4;

1247
≥
 =
íd
;

1249 i‡((
uöçå_t
)
≥
 >(uöçå_t)
íd
) {

1250
≥
 =
íd
;

1251
d⁄e
++;

1253 i‡((
uöçå_t
)
p
 =(uöçå_t)
≥
) {

1256
asm

	`__vﬁ©ûe__
 (

1282 : "=D" (
p
)

1283 : "D" (
p
), "d" (
≥
)

1286
	`do_tick
();

1287
BAILR


1288 } !
d⁄e
);

1290
	}
}

1295 
	#STIME
 5400

	)

1296 
	$bô_Áde
()

1298 
j
;

1299 vﬁ©ûê
ul⁄g
 *
≥
;

1300 vﬁ©ûê
ul⁄g

bad
;

1301 vﬁ©ûê
ul⁄g
 *
°¨t
,*
íd
;

1303
ã°_ticks
 +(
STIME
 * 2);

1304
v
->
∑ss_ticks
 +(
STIME
 * 2);

1307
p1
 = 0;

1311
	`h¥öt
(
LINE_PAT
,
COL_PAT
,
p1
);

1314 
j
=0; j<
£gs
; j++) {

1315
°¨t
 =
v
->
m≠
[
j
].start;

1316
íd
 =
v
->
m≠
[
j
].end;

1317
≥
 =
°¨t
;

1318
p
 =
°¨t
;

1319 
p
=
°¨t
;Ö<
íd
;Ö++) {

1320 *
p
 =
p1
;

1322
	`do_tick
();

1323
BAILR


1326
	`¶ìp
 (
STIME
, 0);

1329 
j
=0; j<
£gs
; j++) {

1330
°¨t
 =
v
->
m≠
[
j
].start;

1331
íd
 =
v
->
m≠
[
j
].end;

1332
≥
 =
°¨t
;

1333
p
 =
°¨t
;

1334 
p
=
°¨t
;Ö<
íd
;Ö++) {

1335 i‡((
bad
=*
p
Ë!
p1
) {

1336
	`îr‹
((
ul⁄g
*)
p
,
p1
,
bad
);

1339
	`do_tick
();

1340
BAILR


1342 i‡(
p1
 == 0) {

1343
p1
=-1;

1348
	}
}

1353 
	$¶ìp
(
n
, 
sms
)

1355 
i
,
ù
;

1356
ul⁄g

sh
,
¶
,
l
,
h
,
t
;

1358
ù
 = 0;

1360
asm

	`__vﬁ©ûe__
(

1361 "rdtsc":"˜" (
¶
),"=d" (
sh
));

1365
asm

	`__vﬁ©ûe__
(

1366 "rdtsc":"˜" (
l
),"=d" (
h
));

1367
asm

	`__vﬁ©ûe__
 (

1370 :"˜" (
l
), "=d" (
h
)

1371 :"g" (
¶
), "g" (
sh
),

1372 "0" (
l
), "1" (
h
));

1374 i‡(
sms
 != 0) {

1375
t
 =
h
 * (()0xfffffff‡/
v
->
˛ks_m£c
);

1376
t
 +(
l
 /
v
->
˛ks_m£c
);

1378
t
 =
h
 * (()0xfffffff‡/
v
->
˛ks_m£c
) / 1000;

1379
t
 +(
l
 /
v
->
˛ks_m£c
) / 1000;

1383 i‡(
t
 >
n
) {

1388 i‡(
sms
 == 0) {

1390
i
 =
t
 % 60;

1391
	`d¥öt
(
LINE_TIME
,
COL_TIME
+9,
i
%10, 1, 0);

1392
	`d¥öt
(
LINE_TIME
,
COL_TIME
+8,
i
/10, 1, 0);

1394 i‡(
i
 !
ù
) {

1395
	`check_öput
();

1396
ù
 =
i
;

1399
t
 /= 60;

1400
i
 =
t
 % 60;

1401
	`d¥öt
(
LINE_TIME
,
COL_TIME
+6,
i
 % 10, 1, 0);

1402
	`d¥öt
(
LINE_TIME
,
COL_TIME
+5,
i
 / 10, 1, 0);

1403
t
 /= 60;

1404
	`d¥öt
(
LINE_TIME
,
COL_TIME
,
t
, 4, 0);

1405
BAILR


1408
	}
}

1412 
	$bìp
(
‰equícy
)

1414 
cou¡
 = 1193180 /
‰equícy
;

1417
	`outb_p
(
	`öb_p
(0x61)|3, 0x61);

1420
	`outb_p
(0xB6, 0x43);

1423
	`outb_p
(
cou¡
 & 0xff, 0x42);

1424
	`outb
((
cou¡
 >> 8) & 0xff, 0x42);

1427
	`¶ìp
(100, 1);

1430
	`outb
(
	`öb_p
(0x61)&0xFC, 0x61);

1431
	}
}

	@test.h

11 #i‚de‡
_TEST_H_


12 
	#_TEST_H_


	)

13 
	#E88
 0x00

	)

14 
	#E801
 0x04

	)

15 
	#E820NR
 0x08

	)

16 
	#E820MAP
 0x0¯

	)

17 
	#E820MAX
 64

	)

18 
	#E820ENTRY_SIZE
 20

	)

19 
	#MEMINFO_SIZE
 (
E820MAP
 +
E820MAX
 *
E820ENTRY_SIZE
)

	)

20 
	#MAX_DMI_MEMDEVS
 16

	)

22 #i‚de‡
__ASSEMBLY__


24 
	#E820_RAM
 1

	)

25 
	#E820_RESERVED
 2

	)

26 
	#E820_ACPI
 3

	)

27 
	#E820_NVS
 4

	)

29 
	se820íåy
 {

30 
	maddr
;

31 
	msize
;

32 
	mty≥
;

35 
	smem_öfo_t
 {

36 
	me88_mem_k
;

37 
	me801_mem_k
;

38 
	me820_ƒ
;

39 
e820íåy

	me820
[
E820MAX
];

43 
	tul⁄g
;

44 
	#SPINSZ
 0x2000000

	)

45 
	#MOD_SZ
 20

	)

46 
	#BAILOUT
 i‡(
baû
Ë
skù_ã°
;

	)

47 
	#BAILR
 i‡(
baû
Ë;

	)

48 
	#NULL
 0

	)

50 
	#DMI_SEARCH_START
 0x0000F000

	)

51 
	#DMI_SEARCH_LENGTH
 0x000F0FFF

	)

52 
	#MAX_DMI_MEMDEVS
 16

	)

54 
	#RES_START
 0xa0000

	)

55 
	#RES_END
 0x100000

	)

56 
	#SCREEN_ADR
 0xb8000

	)

57 
	#SCREEN_END_ADR
 (
SCREEN_ADR
 + 80*25*2)

	)

59 
	#TITLE_WIDTH
 28

	)

60 
	#LINE_TIME
 11

	)

61 
	#COL_TIME
 0

	)

62 
	#LINE_TST
 2

	)

63 
	#LINE_RANGE
 3

	)

64 
	#LINE_CPU
 1

	)

65 
	#COL_MID
 30

	)

66 
	#LINE_PAT
 4

	)

67 
	#COL_PAT
 41

	)

68 
	#LINE_INFO
 11

	)

69 
	#COL_CACHE_TOP
 13

	)

70 
	#COL_RESERVED
 22

	)

71 
	#COL_MMAP
 29

	)

72 
	#COL_CACHE
 40

	)

73 
	#COL_ECC
 46

	)

74 
	#COL_TST
 51

	)

75 
	#COL_PASS
 56

	)

76 
	#COL_ERR
 63

	)

77 
	#COL_ECC_ERR
 72

	)

78 
	#LINE_HEADER
 13

	)

79 
	#LINE_SCROLL
 15

	)

80 
	#BAR_SIZE
 (78-
COL_MID
-9)

	)

81 
	#LINE_MSG
 18

	)

82 
	#COL_MSG
 18

	)

84 
	#POP_W
 30

	)

85 
	#POP_H
 15

	)

86 
	#POP_X
 16

	)

87 
	#POP_Y
 8

	)

88 
	#POP2_W
 74

	)

89 
	#POP2_H
 21

	)

90 
	#POP2_X
 3

	)

91 
	#POP2_Y
 2

	)

95 
	#MS_COPY
 1

	)

96 
	#MS_WRITE
 2

	)

97 
	#MS_READ
 3

	)

99 
	#SZ_MODE_BIOS
 1

	)

100 
	#SZ_MODE_BIOS_RES
 2

	)

101 
	#SZ_MODE_PROBE
 3

	)

103 
	#gëCx86
(
ªg
Ë({
	`outb
(‘eg), 0x22);
	`öb
(0x23); })

	)

104 
memcmp
(c⁄° *
s1
, c⁄° *
s2
,
ul⁄g

cou¡
);

105 
°∫cmp
(c⁄° *
s1
, c⁄° *
s2
,
ul⁄g

n
);

106 *
memmove
(*
de°
, c⁄° *
§c
,
ul⁄g

n
);

107 
quîy_löuxbios
();

108 
quîy_pcbios
();

109 
ö£πaddªss
(
ul⁄g
);

110 
¥öç©n
();

111 
¥öç©n
();

112 
ôﬂ
(
s
[], 
n
);

113 
ªvî£
(*
p
);

114 
£rül_c⁄sﬁe_£tup
(*
∑øm
);

115 
£rül_echo_öô
();

116 
£rül_echo_¥öt
(c⁄° *
s
);

117 
ây¥öt
(
y
, 
x
, c⁄° *
s
);

118 
ây¥ötc
(
y
, 
x
, 
c
);

119 
˝röt
(
y
,
x
, c⁄° *
s
);

120 
h¥öt
(
y
,
x
,
ul⁄g

vÆ
);

121 
h¥öt2
(
y
,
x
,
ul⁄g

vÆ
, 
Àn
);

122 
h¥öt3
(
y
,
x
,
ul⁄g

vÆ
, 
Àn
);

123 
x¥öt
(
y
,
x
,
ul⁄g

vÆ
);

124 
≠röt
(
y
,
x
,
ul⁄g

∑ge
);

125 
d¥öt
(
y
,
x
,
ul⁄g

vÆ
,
Àn
, 
right
);

126 
movöv1
(
ôî
,
ul⁄g

p1
, ul⁄g
p2
);

127 
movövr
();

128 
movöv32
(
ôî
,
ul⁄g

p1
, ul⁄g
lb
, ul⁄g
mb
, 
svÆ
, 
off
);

129 
modt°
(
off
, 
ôî
,
ul⁄g

p1
, ul⁄g
p2
);

130 
îr‹
(
ul⁄g
*
adr
, ul⁄g
good
, ul⁄g
bad
);

131 
ad_îr1
(
ul⁄g
 *
adr1
, ul⁄g *
adr2
, ul⁄g
good
, ul⁄g
bad
);

132 
ad_îr2
(
ul⁄g
 *
adr
, ul⁄g
bad
);

133 
do_tick
();

134 
ønd_£ed
(
£ed1
, 
£ed2
);

135
ul⁄g

ønd
();

136 
öô
();

137 
	gîegs
;

138 
öãr
(
îegs
 *
å≠_ªgs
);

139 
£t_ˇche
(
vÆ
);

140 
check_öput
();

141 
foŸî
();

142 
s¸ﬁl
();

143 
˛ór_s¸ﬁl
();

144 
p›up
();

145 
p›down
();

146 
p›˛ór
();

147 
p›2up
();

148 
p›2down
();

149 
p›2˛ór
();

150 
gë_c⁄fig
();

151 
gë_míu
();

152 
gë_¥ötmode
();

153 
addr_t°1
();

154 
addr_t°2
();

155 
bô_Áde
();

156 
¶ìp
(
£c
, 
sms
);

157 
bìp
(
‰equícy
);

158 
gënum
(
ul⁄g

vÆ
);

159 
block_move
(
ôî
);

160 
föd_ticks
();

161 
¥öt_îr
(
ul⁄g
 *
adr
, ul⁄g
good
, ul⁄g
bad
, ul⁄g
x‹
);

162 
¥öt_ecc_îr
(
ul⁄g

∑ge
, ul⁄g
off£t
, 
c‹ª˘ed
,

163 
syndrome
, 
ch™√l
);

164 
mem_size
();

165 
adj_mem
();

166
ul⁄g

gëvÆ
(
x
, 
y
, 
ªsu…_shi·
);

167 
gë_key
();

168 
ascii_to_keycode
(
ö
);

169 
waô_keyup
();

170 
¥öt_hdr
();

171 
ª°¨t
();

172 
∑rôy_îr
(
ul⁄g

edi
, ul⁄g
esi
);

173 
°¨t_c⁄fig
();

174 
˛ór_s¸ìn
();

175 
∑gög_off
();

176 
show_•d
();

177 
m≠_∑ge
(
∑ge
);

178 *
m≠pög
(
∑ge_addªss
);

179 *
em≠pög
(
∑ge_addªss
);

180 
∑ge_of
(*
±r
);

181
ul⁄g

mem•ìd
(ul⁄g
§c
, ul⁄g
Àn
, 
ôî
, 
ty≥
);

182
ul⁄g

c‹ª˘_tsc
(ul⁄g
ñ_‹g
);

184 
	#PRINTMODE_SUMMARY
 1

	)

185 
	#PRINTMODE_ADDRESSES
 0

	)

186 
	#PRINTMODE_PATTERNS
 2

	)

187 
	#PRINTMODE_NONE
 3

	)

188 
	#PRINTMODE_DMI
 4

	)

190 
	#BADRAM_MAXPATNS
 10

	)

192 
	s∑ú
 {

193
ul⁄g

	madr
;

194
ul⁄g

	mmask
;

198 
ölöe
 
	$ˇche_off
()

200
	`asm
(

207
	}
}

208 
ölöe
 
	$ˇche_⁄
()

210
	`asm
(

216
	}
}

218 
ölöe
 
	$ªboŸ
()

220
	`asm
(

239
	}
}

241 
	smm≠
 {

242
ul⁄g

	mpba£_addr
;

243
ul⁄g
 *
	m°¨t
;

244
ul⁄g
 *
	míd
;

247 
	spm≠
 {

248
ul⁄g

	m°¨t
;

249
ul⁄g

	míd
;

252 
	st£q
 {

253 
	mˇche
;

254 
	m∑t
;

255 
	môî
;

256 
	mîr‹s
;

257 *
	mmsg
;

260 
	s˝u_idít
 {

261 
	mty≥
;

262 
	mmodñ
;

263 
	m°ï
;

264 
	mfûl
;

265 
	m˝uid
;

266 
	mˇ∑bûôy
;

267 
	mvíd_id
[12];

268 
	mˇche_öfo
[16];

269 
	mpwrˇp
;

270 
	mext
;

271 
	m„©uª_Êag
;

272 
	mdˇche0_óx
;

273 
	mdˇche0_ebx
;

274 
	mdˇche0_ecx
;

275 
	mdˇche0_edx
;

276 
	mdˇche1_óx
;

277 
	mdˇche1_ebx
;

278 
	mdˇche1_ecx
;

279 
	mdˇche1_edx
;

280 
	mdˇche2_óx
;

281 
	mdˇche2_ebx
;

282 
	mdˇche2_ecx
;

283 
	mdˇche2_edx
;

284 
	mdˇche3_óx
;

285 
	mdˇche3_ebx
;

286 
	mdˇche3_ecx
;

287 
	mdˇche3_edx
;

290 
	sxadr
 {

291
ul⁄g

	m∑ge
;

292
ul⁄g

	moff£t
;

295 
	sîr_öfo
 {

296 
xadr

	mlow_addr
;

297 
xadr

	mhigh_addr
;

298 
	mebôs
;

299 
	mtbôs
;

300 
	mmö_bôs
;

301 
	mmax_bôs
;

302 
	mmaxl
;

303 
	módr
;

304 
	mex‹
;

305 
	mc‹_îr
;

306 
	mhdr_Êag
;

309 
	#X86_FEATURE_PAE
 (0*32+ 6Ë

	)

310 
	#MAX_MEM_SEGMENTS

E820MAX


	)

313 
	sv¨s
 {

314 vﬁ©ûê
	mã°
;

315 
	m∑ss
;

316 *
	módr
;

317 
	mex‹
;

318 
	mmsg_löe
;

319 
	mecou¡
;

320 
	mecc_ecou¡
;

321 
	mm£gs
;

322 
	mã°£l
;

323 
	ms¸ﬁl_°¨t
;

324 
	mrdtsc
;

325 
	m∑e
;

326 
	m∑ss_ticks
;

327 
	mtŸÆ_ticks
;

328 
	mµå
;

329 
	mçå
;

330 
	mbìpmode
;

331 
îr_öfo

	mîri
;

332 
pm≠

	mpm≠
[
MAX_MEM_SEGMENTS
];

333 
mm≠

	mm≠
[
MAX_MEM_SEGMENTS
];

334
ul⁄g

	m∂im_lowî
;

335
ul⁄g

	m∂im_uµî
;

336
ul⁄g

	m˛ks_m£c
;

337
ul⁄g

	m°¨th
;

338
ul⁄g

	m°¨é
;

339
ul⁄g

	m¢≠h
;

340
ul⁄g

	m¢≠l
;

341
ul⁄g

	mext˛ock
;

342 
	mimc_ty≥
;

343 
	m¥ötmode
;

344 
	mnum∑ä
;

345 
∑ú

	m∑ä
 [
BADRAM_MAXPATNS
];

346
ul⁄g

	mã°_∑ges
;

347
ul⁄g

	m£À˘ed_∑ges
;

348
ul⁄g

	mª£rved_∑ges
;

351 
	#FIRMWARE_UNKNOWN
 0

	)

352 
	#FIRMWARE_PCBIOS
 1

	)

353 
	#FIRMWARE_LINUXBIOS
 2

	)

355 
v¨s
 * c⁄°
v
;

356 
_°¨t
[],
_íd
[],
°¨tup_32
[];

357 
_size
,
_∑ges
;

359 
mem_öfo_t

mem_öfo
;

362 
	#CPM_SINGLE
 1

	)

363 
	#CPM_RROBIN
 2

	)

364 
	#CPM_SEQ
 3

	)

	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t

wch¨_t


	)

34 #ñi‡
deföed

__WCHAR_TYPE__


35 
__WCHAR_TYPE__

	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t

	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed

__˝lu•lus
 || deföed
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64

__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64

__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16

__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32

__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64

__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64

__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64

__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16

__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32

__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64

__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64

__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64

__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16

__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32

__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64

__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64

__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64

__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16

__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32

__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64

__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64

__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64

__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16

__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32

__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64

__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64

__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64

__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16

__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32

__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64

__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX

__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX

__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX

__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX

__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX

__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX

__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR

__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR

__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR

__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR

__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR

__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR

__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64

__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64

__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16

__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32

__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64

__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64

__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64

__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16

__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32

__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64

__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64

__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64

__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16

__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32

__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64

__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64

__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64

__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16

__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32

__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64

__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64

__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64

__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16

__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32

__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64

__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX

__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX

__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX

__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX

__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX

__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR

__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR

__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR

__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR

__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR

__PRIPTR_PREFIX
 "x"

	)

274
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 }
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 }
	timaxdiv_t
;

298 
ötmax_t

	$imaxabs
 (
ötmax_t

__n
Ë
__THROW

	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t

	$imaxdiv
 (
ötmax_t

__numî
, i¡max_à
__díom
)

302
__THROW

	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t

	$°πoimax
 (
__c⁄°
 *
__ª°ri˘

__≈å
,

306 **
__ª°ri˘

__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t

	$°πoumax
 (
__c⁄°
 *
__ª°ri˘

__≈å
,

310 **
__ª°ri˘

__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t

	$wc°oimax
 (
__c⁄°

__gwch¨_t
 *
__ª°ri˘

__≈å
,

314
__gwch¨_t
 **
__ª°ri˘

__íd±r
, 
__ba£
)

315
__THROW
;

318 
uötmax_t

	$wc°oumax
 (
__c⁄°

__gwch¨_t
 *
__ª°ri˘

__≈å
,

319
__gwch¨_t
 **
__ª°ri˘

__íd±r
, 
__ba£
)

320
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘

__≈å
,

327 **
__ª°ri˘

__íd±r
,

328 
__ba£
, 
__group
)

329
__THROW

	`__n⁄nuŒ
 ((1)Ë
__wur
;

331
__exã∫_ölöe

ötmax_t


332
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘

≈å
, **__ª°ri˘
íd±r
,

333 
ba£
))

335 
	`__°πﬁ_öã∫Æ
 (
≈å
,
íd±r
,
ba£
, 0);

336
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339
__ª°ri˘

__≈å
,

340 **
__ª°ri˘

__íd±r
,

341 
__ba£
, 
__group
)

342
__THROW

	`__n⁄nuŒ
 ((1)Ë
__wur
;

344
__exã∫_ölöe

uötmax_t


345
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘

≈å
, **__ª°ri˘
íd±r
,

346 
ba£
))

348 
	`__°πoul_öã∫Æ
 (
≈å
,
íd±r
,
ba£
, 0);

349
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°

__gwch¨_t
 *
__ª°ri˘

__≈å
,

352
__gwch¨_t
 **
__ª°ri˘

__íd±r
,

353 
__ba£
, 
__group
)

354
__THROW

	`__n⁄nuŒ
 ((1)Ë
__wur
;

356
__exã∫_ölöe

ötmax_t


357
	`__NTH
 (
	$wc°oimax
 (
__c⁄°

__gwch¨_t
 *
__ª°ri˘

≈å
,

358
__gwch¨_t
 **
__ª°ri˘

íd±r
, 
ba£
))

360 
	`__wc°ﬁ_öã∫Æ
 (
≈å
,
íd±r
,
ba£
, 0);

361
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°

__gwch¨_t
 *

364
__ª°ri˘

__≈å
,

365
__gwch¨_t
 **

366
__ª°ri˘

__íd±r
,

367 
__ba£
, 
__group
)

368
__THROW

	`__n⁄nuŒ
 ((1)Ë
__wur
;

370
__exã∫_ölöe

uötmax_t


371
	`__NTH
 (
	$wc°oumax
 (
__c⁄°

__gwch¨_t
 *
__ª°ri˘

≈å
,

372
__gwch¨_t
 **
__ª°ri˘

íd±r
, 
ba£
))

374 
	`__wc°oul_öã∫Æ
 (
≈å
,
íd±r
,
ba£
, 0);

375
	}
}

379
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘

__≈å
,

381 **
__ª°ri˘

__íd±r
,

382 
__ba£
, 
__group
)

383
__THROW

	`__n⁄nuŒ
 ((1)Ë
__wur
;

385
__exã∫_ölöe

ötmax_t


386
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘

≈å
, **__ª°ri˘
íd±r
,

387 
ba£
))

389 
	`__°πﬁl_öã∫Æ
 (
≈å
,
íd±r
,
ba£
, 0);

390
	}
}

392
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394
__ª°ri˘

__≈å
,

396
__ª°ri˘

__íd±r
,

397 
__ba£
,

398 
__group
)

399
__THROW

	`__n⁄nuŒ
 ((1)Ë
__wur
;

401
__exã∫_ölöe

uötmax_t


402
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘

≈å
, **__ª°ri˘
íd±r
,

403 
ba£
))

405 
	`__°πouŒ_öã∫Æ
 (
≈å
,
íd±r
,
ba£
, 0);

406
	}
}

408
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°

__gwch¨_t
 *

410
__ª°ri˘

__≈å
,

411
__gwch¨_t
 **
__ª°ri˘

__íd±r
,

412 
__ba£
, 
__group
)

413
__THROW

	`__n⁄nuŒ
 ((1)Ë
__wur
;

415
__exã∫_ölöe

ötmax_t


416
	`__NTH
 (
	$wc°oimax
 (
__c⁄°

__gwch¨_t
 *
__ª°ri˘

≈å
,

417
__gwch¨_t
 **
__ª°ri˘

íd±r
, 
ba£
))

419 
	`__wc°ﬁl_öã∫Æ
 (
≈å
,
íd±r
,
ba£
, 0);

420
	}
}

423
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°

__gwch¨_t
 *

425
__ª°ri˘

__≈å
,

426
__gwch¨_t
 **

427
__ª°ri˘

__íd±r
,

428 
__ba£
,

429 
__group
)

430
__THROW

	`__n⁄nuŒ
 ((1)Ë
__wur
;

432
__exã∫_ölöe

uötmax_t


433
	`__NTH
 (
	$wc°oumax
 (
__c⁄°

__gwch¨_t
 *
__ª°ri˘

≈å
,

434
__gwch¨_t
 **
__ª°ri˘

íd±r
, 
ba£
))

436 
	`__wc°ouŒ_öã∫Æ
 (
≈å
,
íd±r
,
ba£
, 0);

437
	}
}

442
	g__END_DECLS


	@/usr/include/string.h

23 #i‚def
_STRING_H


24 
	#_STRING_H
 1

	)

26 
	~<„©uªs.h
>

28
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed

__˝lu•lus
 &&
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

41
__BEGIN_NAMESPACE_STD


43 *
	$mem˝y
 (*
__ª°ri˘

__de°
,

44
__c⁄°
 *
__ª°ri˘

__§c
,
size_t

__n
)

45
__THROW

	`__n⁄nuŒ
 ((1, 2));

48 *
	$memmove
 (*
__de°
,
__c⁄°
 *
__§c
,
size_t

__n
)

49
__THROW

	`__n⁄nuŒ
 ((1, 2));

50
__END_NAMESPACE_STD


55 #i‡
deföed

__USE_SVID
 || deföed
__USE_BSD
 || deföed
__USE_XOPEN


56 *
	$memc˝y
 (*
__ª°ri˘

__de°
,
__c⁄°
 *__ª°ri˘
__§c
,

57 
__c
,
size_t

__n
)

58
__THROW

	`__n⁄nuŒ
 ((1, 2));

62
__BEGIN_NAMESPACE_STD


64 *
	$mem£t
 (*
__s
, 
__c
,
size_t

__n
Ë
__THROW

	`__n⁄nuŒ
 ((1));

67 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,
size_t

__n
)

68
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1, 2));

71 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


74 *
	`memchr
 (*
__s
, 
__c
,
size_t

__n
)

75
__THROW

	`__asm
 ("memchr"Ë
__©åibuã_puª__

	`__n⁄nuŒ
 ((1));

76 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
,
size_t

__n
)

77
__THROW

	`__asm
 ("memchr"Ë
__©åibuã_puª__

	`__n⁄nuŒ
 ((1));

79 #ifde‡
__OPTIMIZE__


80
__exã∫_Æways_ölöe
 *

81
	`memchr
 (*
__s
, 
__c
,
size_t

__n
Ë
__THROW


83 
	`__buûtö_memchr
 (
__s
,
__c
,
__n
);

86
__exã∫_Æways_ölöe

__c⁄°
 *

87
	`memchr
 (
__c⁄°
 *
__s
, 
__c
,
size_t

__n
Ë
__THROW


89 
	`__buûtö_memchr
 (
__s
,
__c
,
__n
);

92
	}
}

94 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
,
size_t

__n
)

95
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1));

97
__END_NAMESPACE_STD


99 #ifde‡
__USE_GNU


102 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


103 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

104
__THROW

	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__

	`__n⁄nuŒ
 ((1));

105 "C++"
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

106
__THROW

	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__

	`__n⁄nuŒ
 ((1));

108 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

109
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1));

113 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


114 "C++" *
	$memrchr
 (*
__s
, 
__c
,
size_t

__n
)

115
__THROW

	`__asm
 ("memrchr"Ë
__©åibuã_puª__

	`__n⁄nuŒ
 ((1));

116 "C++"
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
,
size_t

__n
)

117
__THROW

	`__asm
 ("memrchr"Ë
__©åibuã_puª__

	`__n⁄nuŒ
 ((1));

119 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
,
size_t

__n
)

120
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1));

125
__BEGIN_NAMESPACE_STD


127 *
	$°r˝y
 (*
__ª°ri˘

__de°
,
__c⁄°
 *__ª°ri˘
__§c
)

128
__THROW

	`__n⁄nuŒ
 ((1, 2));

130 *
	$°∫˝y
 (*
__ª°ri˘

__de°
,

131
__c⁄°
 *
__ª°ri˘

__§c
,
size_t

__n
)

132
__THROW

	`__n⁄nuŒ
 ((1, 2));

135 *
	$°rˇt
 (*
__ª°ri˘

__de°
,
__c⁄°
 *__ª°ri˘
__§c
)

136
__THROW

	`__n⁄nuŒ
 ((1, 2));

138 *
	$°∫ˇt
 (*
__ª°ri˘

__de°
,
__c⁄°
 *__ª°ri˘
__§c
,

139
size_t

__n
Ë
__THROW

	`__n⁄nuŒ
 ((1, 2));

142 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

143
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1, 2));

145 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,
size_t

__n
)

146
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1, 2));

149 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

150
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1, 2));

152 
size_t

	$°rx‰m
 (*
__ª°ri˘

__de°
,

153
__c⁄°
 *
__ª°ri˘

__§c
,
size_t

__n
)

154
__THROW

	`__n⁄nuŒ
 ((2));

155
__END_NAMESPACE_STD


157 #ifde‡
__USE_XOPEN2K8


161 
	~<xloˇÀ.h
>

164 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,
__loˇÀ_t

__l
)

165
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1, 2, 3));

167 
size_t

	$°rx‰m_l
 (*
__de°
,
__c⁄°
 *
__§c
,
size_t

__n
,

168
__loˇÀ_t

__l
Ë
__THROW

	`__n⁄nuŒ
 ((2, 4));

171 #i‡
deföed

__USE_SVID
 || deföed
__USE_BSD
 || deföed
__USE_XOPEN_EXTENDED


173 *
	$°rdup
 (
__c⁄°
 *
__s
)

174
__THROW

__©åibuã_mÆloc__

	`__n⁄nuŒ
 ((1));

180 #i‡
deföed

__USE_XOPEN2K8


181 *
	$°∫dup
 (
__c⁄°
 *
__°rög
,
size_t

__n
)

182
__THROW

__©åibuã_mÆloc__

	`__n⁄nuŒ
 ((1));

185 #i‡
deföed

__USE_GNU
 && deföed
__GNUC__


187 
	#°rdu∑
(
s
) \

188 (
__exãnsi⁄__
 \

190
__c⁄°
 *
__ﬁd
 = (
s
); \

191
size_t

__Àn
 =
	`°æí
 (
__ﬁd
) + 1; \

192 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

193 (*Ë
	`mem˝y
 (
__√w
,
__ﬁd
,
__Àn
); \

194
	}
}))

	)

197 
	#°∫du∑
(
s
,
n
) \

198 (
__exãnsi⁄__
 \

200
__c⁄°
 *
__ﬁd
 = (
s
); \

201
size_t

__Àn
 =
	`°∫Àn
 (
__ﬁd
, (
n
)); \

202 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

203
__√w
[
__Àn
] = '\0'; \

204 (*Ë
	`mem˝y
 (
__√w
,
__ﬁd
,
__Àn
); \

205 }))

	)

208
	g__BEGIN_NAMESPACE_STD


210 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


213 *
°rchr
 (*
__s
, 
__c
)

214
__THROW

__asm
 ("°rchr"Ë
__©åibuã_puª__

__n⁄nuŒ
 ((1));

215 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

216
__THROW

__asm
 ("°rchr"Ë
__©åibuã_puª__

__n⁄nuŒ
 ((1));

218 #ifde‡
__OPTIMIZE__


219
__exã∫_Æways_ölöe
 *

220
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


222 
__buûtö_°rchr
 (
__s
,
__c
);

225
__exã∫_Æways_ölöe

__c⁄°
 *

226
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


228 
__buûtö_°rchr
 (
__s
,
__c
);

233 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

234
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1));

237 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


240 *
	`°ºchr
 (*
__s
, 
__c
)

241
__THROW

	`__asm
 ("°ºchr"Ë
__©åibuã_puª__

	`__n⁄nuŒ
 ((1));

242 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

243
__THROW

	`__asm
 ("°ºchr"Ë
__©åibuã_puª__

	`__n⁄nuŒ
 ((1));

245 #ifde‡
__OPTIMIZE__


246
__exã∫_Æways_ölöe
 *

247
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


249 
	`__buûtö_°ºchr
 (
__s
,
__c
);

252
__exã∫_Æways_ölöe

__c⁄°
 *

253
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


255 
	`__buûtö_°ºchr
 (
__s
,
__c
);

258
	}
}

260 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

261
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1));

263
__END_NAMESPACE_STD


265 #ifde‡
__USE_GNU


268 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


269 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

270
__THROW

	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__

	`__n⁄nuŒ
 ((1));

271 "C++"
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

272
__THROW

	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__

	`__n⁄nuŒ
 ((1));

274 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

275
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1));

279
__BEGIN_NAMESPACE_STD


282 
size_t

	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

283
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1, 2));

286 
size_t

	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

287
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1, 2));

289 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


292 *
	`°Ωbrk
 (*
__s
,
__c⁄°
 *
__ac˚±
)

293
__THROW

	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__

	`__n⁄nuŒ
 ((1, 2));

294 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

295
__THROW

	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__

	`__n⁄nuŒ
 ((1, 2));

297 #ifde‡
__OPTIMIZE__


298
__exã∫_Æways_ölöe
 *

299
	`°Ωbrk
 (*
__s
,
__c⁄°
 *
__ac˚±
Ë
__THROW


301 
	`__buûtö_°Ωbrk
 (
__s
,
__ac˚±
);

304
__exã∫_Æways_ölöe

__c⁄°
 *

305
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


307 
	`__buûtö_°Ωbrk
 (
__s
,
__ac˚±
);

310
	}
}

312 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

313
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1, 2));

316 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


319 *
	`°r°r
 (*
__hay°ack
,
__c⁄°
 *
__√edÀ
)

320
__THROW

	`__asm
 ("°r°r"Ë
__©åibuã_puª__

	`__n⁄nuŒ
 ((1, 2));

321 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

322
__c⁄°
 *
__√edÀ
)

323
__THROW

	`__asm
 ("°r°r"Ë
__©åibuã_puª__

	`__n⁄nuŒ
 ((1, 2));

325 #ifde‡
__OPTIMIZE__


326
__exã∫_Æways_ölöe
 *

327
	`°r°r
 (*
__hay°ack
,
__c⁄°
 *
__√edÀ
Ë
__THROW


329 
	`__buûtö_°r°r
 (
__hay°ack
,
__√edÀ
);

332
__exã∫_Æways_ölöe

__c⁄°
 *

333
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


335 
	`__buûtö_°r°r
 (
__hay°ack
,
__√edÀ
);

338
	}
}

340 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

341
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1, 2));

346 *
	$°πok
 (*
__ª°ri˘

__s
,
__c⁄°
 *__ª°ri˘
__dñim
)

347
__THROW

	`__n⁄nuŒ
 ((2));

348
__END_NAMESPACE_STD


352 *
	$__°πok_r
 (*
__ª°ri˘

__s
,

353
__c⁄°
 *
__ª°ri˘

__dñim
,

354 **
__ª°ri˘

__ßve_±r
)

355
__THROW

	`__n⁄nuŒ
 ((2, 3));

356 #i‡
deföed

__USE_POSIX
 || deföed
__USE_MISC


357 *
	$°πok_r
 (*
__ª°ri˘

__s
,
__c⁄°
 *__ª°ri˘
__dñim
,

358 **
__ª°ri˘

__ßve_±r
)

359
__THROW

	`__n⁄nuŒ
 ((2, 3));

362 #ifde‡
__USE_GNU


364 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


365 "C++" *
	$°rˇ£°r
 (*
__hay°ack
,
__c⁄°
 *
__√edÀ
)

366
__THROW

	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__

	`__n⁄nuŒ
 ((1, 2));

367 "C++"
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

368
__c⁄°
 *
__√edÀ
)

369
__THROW

	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__

	`__n⁄nuŒ
 ((1, 2));

371 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

372
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1, 2));

376 #ifde‡
__USE_GNU


380 *
	$memmem
 (
__c⁄°
 *
__hay°ack
,
size_t

__hay°ackÀn
,

381
__c⁄°
 *
__√edÀ
,
size_t

__√edÀÀn
)

382
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1, 3));

386 *
	$__memp˝y
 (*
__ª°ri˘

__de°
,

387
__c⁄°
 *
__ª°ri˘

__§c
,
size_t

__n
)

388
__THROW

	`__n⁄nuŒ
 ((1, 2));

389 *
	$memp˝y
 (*
__ª°ri˘

__de°
,

390
__c⁄°
 *
__ª°ri˘

__§c
,
size_t

__n
)

391
__THROW

	`__n⁄nuŒ
 ((1, 2));

395
__BEGIN_NAMESPACE_STD


397 
size_t

	$°æí
 (
__c⁄°
 *
__s
)

398
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1));

399
__END_NAMESPACE_STD


401 #ifdef
__USE_XOPEN2K8


404 
size_t

	$°∫Àn
 (
__c⁄°
 *
__°rög
,
size_t

__maxÀn
)

405
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1));

409
__BEGIN_NAMESPACE_STD


411 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

412
__END_NAMESPACE_STD


413 #i‡
deföed

__USE_XOPEN2K
 || deföed
__USE_MISC


421 #i‡
deföed

__USE_XOPEN2K
 && !deföed
__USE_GNU


424 #ifde‡
__REDIRECT_NTH


425 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

426 (
__î∫um
, *
__buf
,
size_t

__buÊí
),

427
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

429 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
,
size_t

__buÊí
)

430
__THROW

	`__n⁄nuŒ
 ((2));

431 
	#°ªº‹_r

__xpg_°ªº‹_r


	)

436 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
,
size_t

__buÊí
)

437
__THROW

	`__n⁄nuŒ
 ((2));

441 #ifde‡
__USE_XOPEN2K8


443 *
	$°ªº‹_l
 (
__î∫um
,
__loˇÀ_t

__l
Ë
__THROW
;

449 
	$__bzîo
 (*
__s
,
size_t

__n
Ë
__THROW

	`__n⁄nuŒ
 ((1));

451 #ifde‡
__USE_BSD


453 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
,
size_t

__n
)

454
__THROW

	`__n⁄nuŒ
 ((1, 2));

457 
	$bzîo
 (*
__s
,
size_t

__n
Ë
__THROW

	`__n⁄nuŒ
 ((1));

460 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,
size_t

__n
)

461
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1, 2));

464 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


467 *
	`ödex
 (*
__s
, 
__c
)

468
__THROW

	`__asm
 ("ödex"Ë
__©åibuã_puª__

	`__n⁄nuŒ
 ((1));

469 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

470
__THROW

	`__asm
 ("ödex"Ë
__©åibuã_puª__

	`__n⁄nuŒ
 ((1));

472 #i‡
deföed

__OPTIMIZE__
 && !deföed
__CORRECT_ISO_CPP_STRINGS_H_PROTO


473
__exã∫_Æways_ölöe
 *

474
	`ödex
 (*
__s
, 
__c
Ë
__THROW


476 
	`__buûtö_ödex
 (
__s
,
__c
);

479
__exã∫_Æways_ölöe

__c⁄°
 *

480
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


482 
	`__buûtö_ödex
 (
__s
,
__c
);

485
	}
}

487 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

488
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1));

492 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


495 *
	`rödex
 (*
__s
, 
__c
)

496
__THROW

	`__asm
 ("rödex"Ë
__©åibuã_puª__

	`__n⁄nuŒ
 ((1));

497 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

498
__THROW

	`__asm
 ("rödex"Ë
__©åibuã_puª__

	`__n⁄nuŒ
 ((1));

500 #i‡
deföed

__OPTIMIZE__
 && !deföed
__CORRECT_ISO_CPP_STRINGS_H_PROTO


501
__exã∫_Æways_ölöe
 *

502
	`rödex
 (*
__s
, 
__c
Ë
__THROW


504 
	`__buûtö_rödex
 (
__s
,
__c
);

507
__exã∫_Æways_ölöe

__c⁄°
 *

508
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


510 
	`__buûtö_rödex
 (
__s
,
__c
);

513
	}
}

515 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

516
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1));

521 
	$ffs
 (
__i
Ë
__THROW

	`__©åibuã__
 ((
__c⁄°__
));

525 #ifdef
__USE_GNU


526 
	$ff¶
 (
__l
Ë
__THROW

	`__©åibuã__
 ((
__c⁄°__
));

527 #ifde‡
__GNUC__


528
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

529
__THROW

	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

535
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,
size_t

__n
)

539
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1, 2));

542 #ifdef
__USE_GNU


545 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

546
__loˇÀ_t

__loc
)

547
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

550
size_t

__n
,
__loˇÀ_t

__loc
)

551
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘

__°rögp
,

558
__c⁄°
 *
__ª°ri˘

__dñim
)

559
__THROW

	`__n⁄nuŒ
 ((1, 2));

562 #ifdef
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘

__de°
,
__c⁄°
 *__ª°ri˘
__§c
)

568
__THROW

	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘

__de°
,
__c⁄°
 *__ª°ri˘
__§c
)

570
__THROW

	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘

__de°
,

575
__c⁄°
 *
__ª°ri˘

__§c
,
size_t

__n
)

576
__THROW

	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘

__de°
,

578
__c⁄°
 *
__ª°ri˘

__§c
,
size_t

__n
)

579
__THROW

	`__n⁄nuŒ
 ((1, 2));

582 #ifdef
__USE_GNU


584 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

585
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW

	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
,
size_t

__n
Ë
__THROW

	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600
__THROW

	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++"
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

602
__THROW

	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW

	`__n⁄nuŒ
 ((1));

610 #i‡
deföed

__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed

__OPTIMIZE__
 && !deföed
__OPTIMIZE_SIZE__
 \

612 && !
deföed

__NO_INLINE__
 && !deföed
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 &&
deföed

__exã∫_Æways_ölöe


640 
	~<bôs/°rög3.h
>

644
__END_DECLS


	@/usr/include/sys/io.h

19 #i‚def
_SYS_IO_H


20 
	#_SYS_IO_H
 1

	)

22 
	~<„©uªs.h
>

24
__BEGIN_DECLS


33 
	$i›îm
 (
__‰om
, 
__num
,

34 
__tu∫_⁄
Ë
__THROW
;

39 
	$i›l
 (
__Àvñ
Ë
__THROW
;

41 #i‡
deföed

__GNUC__
 && __GNUC__ >= 2

43 
__ölöe
 

44
	$öb
 (
__p‹t
)

46 
_v
;

48
__asm__

	`__vﬁ©ûe__
 ("öb %w1,%0":"˜" (
_v
):"Nd" (
__p‹t
));

49 
_v
;

50
	}
}

52 
__ölöe
 

53
	$öb_p
 (
__p‹t
)

55 
_v
;

57
__asm__

	`__vﬁ©ûe__
 ("öb %w1,%0\noutb %%Æ,$0x80":"˜" (
_v
):"Nd" (
__p‹t
));

58 
_v
;

59
	}
}

61 
__ölöe
 

62
	$öw
 (
__p‹t
)

64 
_v
;

66
__asm__

	`__vﬁ©ûe__
 ("öw %w1,%0":"˜" (
_v
):"Nd" (
__p‹t
));

67 
_v
;

68
	}
}

70 
__ölöe
 

71
	$öw_p
 (
__p‹t
)

73 
_v
;

75
__asm__

	`__vﬁ©ûe__
 ("öw %w1,%0\noutb %%Æ,$0x80":"˜" (
_v
):"Nd" (
__p‹t
));

76 
_v
;

77
	}
}

79 
__ölöe
 

80
	$öl
 (
__p‹t
)

82 
_v
;

84
__asm__

	`__vﬁ©ûe__
 ("ö»%w1,%0":"˜" (
_v
):"Nd" (
__p‹t
));

85 
_v
;

86
	}
}

88 
__ölöe
 

89
	$öl_p
 (
__p‹t
)

91 
_v
;

92
__asm__

	`__vﬁ©ûe__
 ("ö»%w1,%0\noutb %%Æ,$0x80":"˜" (
_v
):"Nd" (
__p‹t
));

93 
_v
;

94
	}
}

96 
__ölöe
 

97
	$outb
 (
__vÆue
, 
__p‹t
)

99
__asm__

	`__vﬁ©ûe__
 ("outb %b0,%w1": :"a" (
__vÆue
), "Nd" (
__p‹t
));

100
	}
}

102 
__ölöe
 

103
	$outb_p
 (
__vÆue
, 
__p‹t
)

105
__asm__

	`__vﬁ©ûe__
 ("outb %b0,%w1\noutb %%Æ,$0x80": :"a" (
__vÆue
),

106 "Nd" (
__p‹t
));

107
	}
}

109 
__ölöe
 

110
	$outw
 (
__vÆue
, 
__p‹t
)

112
__asm__

	`__vﬁ©ûe__
 ("outw %w0,%w1": :"a" (
__vÆue
), "Nd" (
__p‹t
));

114
	}
}

116 
__ölöe
 

117
	$outw_p
 (
__vÆue
, 
__p‹t
)

119
__asm__

	`__vﬁ©ûe__
 ("outw %w0,%w1\noutb %%Æ,$0x80": :"a" (
__vÆue
),

120 "Nd" (
__p‹t
));

121
	}
}

123 
__ölöe
 

124
	$oué
 (
__vÆue
, 
__p‹t
)

126
__asm__

	`__vﬁ©ûe__
 ("oué %0,%w1": :"a" (
__vÆue
), "Nd" (
__p‹t
));

127
	}
}

129 
__ölöe
 

130
	$oué_p
 (
__vÆue
, 
__p‹t
)

132
__asm__

	`__vﬁ©ûe__
 ("oué %0,%w1\noutb %%Æ,$0x80": :"a" (
__vÆue
),

133 "Nd" (
__p‹t
));

134
	}
}

136 
__ölöe
 

137
	$ösb
 (
__p‹t
, *
addr
, 
__cou¡
)

139
__asm__

	`__vﬁ©ûe__
 ("˛d ;Ñï ; insb":"=D" (
addr
), "=c" (
__cou¡
)

140 :"d" (
__p‹t
), "0" (
addr
), "1" (
__cou¡
));

141
	}
}

143 
__ölöe
 

144
	$ösw
 (
__p‹t
, *
addr
, 
__cou¡
)

146
__asm__

	`__vﬁ©ûe__
 ("˛d ;Ñï ; insw":"=D" (
addr
), "=c" (
__cou¡
)

147 :"d" (
__p‹t
), "0" (
addr
), "1" (
__cou¡
));

148
	}
}

150 
__ölöe
 

151
	$ö¶
 (
__p‹t
, *
addr
, 
__cou¡
)

153
__asm__

	`__vﬁ©ûe__
 ("˛d ;Ñï ; in¶":"=D" (
addr
), "=c" (
__cou¡
)

154 :"d" (
__p‹t
), "0" (
addr
), "1" (
__cou¡
));

155
	}
}

157 
__ölöe
 

158
	$outsb
 (
__p‹t
, c⁄° *
addr
, 
__cou¡
)

160
__asm__

	`__vﬁ©ûe__
 ("˛d ;Ñï ; outsb":"=S" (
addr
), "=c" (
__cou¡
)

161 :"d" (
__p‹t
), "0" (
addr
), "1" (
__cou¡
));

162
	}
}

164 
__ölöe
 

165
	$outsw
 (
__p‹t
, c⁄° *
addr
, 
__cou¡
)

167
__asm__

	`__vﬁ©ûe__
 ("˛d ;Ñï ; outsw":"=S" (
addr
), "=c" (
__cou¡
)

168 :"d" (
__p‹t
), "0" (
addr
), "1" (
__cou¡
));

169
	}
}

171 
__ölöe
 

172
	$out¶
 (
__p‹t
, c⁄° *
addr
, 
__cou¡
)

174
__asm__

	`__vﬁ©ûe__
 ("˛d ;Ñï ; out¶":"=S" (
addr
), "=c" (
__cou¡
)

175 :"d" (
__p‹t
), "0" (
addr
), "1" (
__cou¡
));

176
	}
}

180
	g__END_DECLS


	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed

__NO_STRING_INLINES
 && !deföed
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE

ölöe


	)

46 
	#__STRING_INLINE

__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
,
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
,
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
,
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
,
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80
	t__STRING2_COPY_TYPE
 (2);

81
__STRING2_COPY_TYPE
 (3);

82
__STRING2_COPY_TYPE
 (4);

83
__STRING2_COPY_TYPE
 (5);

84
__STRING2_COPY_TYPE
 (6);

85
__STRING2_COPY_TYPE
 (7);

86
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed

_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
,
c
,
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ?
	`__mem£t_1
 (
s
,
c
) \

104 :
	`__mem£t_gc
 (
s
,
c
,
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
);
	`__bzîo
 (__s,
n
); __s; }) \

107 :
	`mem£t
 (
s
,
c
,
n
))))

	)

109 
	#__mem£t_1
(
s
,
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
,
c
,
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 =
__s
; \

119
__uöt8_t

__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125
__u
->
__ui
 =
__c
 * 0x01010101; \

126
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4); \

128
__u
->
__ui
 =
__c
 * 0x01010101; \

129
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4); \

131
__u
->
__ui
 =
__c
 * 0x01010101; \

132
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4); \

134
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135
__u
 =
	`__exãnsi⁄__
 ((*) __u + 2); \

136
__u
->
__uc
 = (Ë
__c
; \

140
__u
->
__ui
 =
__c
 * 0x01010101; \

141
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4); \

143
__u
->
__ui
 =
__c
 * 0x01010101; \

144
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4); \

146
__u
->
__ui
 =
__c
 * 0x01010101; \

147
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4); \

149
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153
__u
->
__ui
 =
__c
 * 0x01010101; \

154
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4); \

156
__u
->
__ui
 =
__c
 * 0x01010101; \

157
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4); \

159
__u
->
__ui
 =
__c
 * 0x01010101; \

160
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4); \

162
__u
->
__uc
 = (Ë
__c
; \

166
__u
->
__ui
 =
__c
 * 0x01010101; \

167
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4); \

169
__u
->
__ui
 =
__c
 * 0x01010101; \

170
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4); \

172
__u
->
__ui
 =
__c
 * 0x01010101; \

173
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4); \

175
__u
->
__ui
 =
__c
 * 0x01010101; \

180
__s
; })

	)

182 
	#mem£t
(
s
,
c
,
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
);
	`__bzîo
 (__s,
n
); __s; }) \

185 :
	`mem£t
 (
s
,
c
,
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
,
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed

_HAVE_STRING_ARCH_memp˝y
 || deföed
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
,
§c
,
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
,
§c
,
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 &&
	`__°rög2_1b±r_p
 (
§c
Ë&&
n
 <= 8 \

212 ?
	`__buûtö_mem˝y
 (
de°
,
§c
,
n
) + (n) \

213 :
	`__memp˝y
 (
de°
,
§c
,
n
)))

	)

215 
	#__memp˝y
(
de°
,
§c
,
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 &&
	`__°rög2_1b±r_p
 (
§c
Ë&&
n
 <= 8 \

218 ?
	`__memp˝y_smÆl
 (
de°
,
	`__memp˝y_¨gs
 (
§c
),
n
) \

219 :
	`__memp˝y
 (
de°
,
§c
,
n
)))

	)

223 
	#memp˝y
(
de°
,
§c
,
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë||
deföed

_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232
__exãnsi⁄__

	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233
__exãnsi⁄__

	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234
__exãnsi⁄__

	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235
__exãnsi⁄__

	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238
__uöt16_t
, __uöt16_t,
__uöt32_t
,

239
__uöt32_t
,
size_t
);

240
__STRING_INLINE
 *

241
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243
__uöt16_t

__§c0_2
, __uöt16_à
__§c4_2
,

244
__uöt32_t

__§c0_4
, __uöt32_à
__§c4_4
,

245
size_t

__§˛í
)

248
__uöt32_t

__ui
;

249
__uöt16_t

__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 =
__de°1
;

253 (Ë
__§˛í
)

256
__u
->
__c
 =
__§c0_1
;

257
__u
 =
	`__exãnsi⁄__
 ((*) __u + 1);

260
__u
->
__usi
 =
__§c0_2
;

261
__u
 =
	`__exãnsi⁄__
 ((*) __u + 2);

264
__u
->
__usi
 =
__§c0_2
;

265
__u
 =
	`__exãnsi⁄__
 ((*) __u + 2);

266
__u
->
__c
 =
__§c2_1
;

267
__u
 =
	`__exãnsi⁄__
 ((*) __u + 1);

270
__u
->
__ui
 =
__§c0_4
;

271
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4);

274
__u
->
__ui
 =
__§c0_4
;

275
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4);

276
__u
->
__c
 =
__§c4_1
;

277
__u
 =
	`__exãnsi⁄__
 ((*) __u + 1);

280
__u
->
__ui
 =
__§c0_4
;

281
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4);

282
__u
->
__usi
 =
__§c4_2
;

283
__u
 =
	`__exãnsi⁄__
 ((*) __u + 2);

286
__u
->
__ui
 =
__§c0_4
;

287
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4);

288
__u
->
__usi
 =
__§c4_2
;

289
__u
 =
	`__exãnsi⁄__
 ((*) __u + 2);

290
__u
->
__c
 =
__§c6_1
;

291
__u
 =
	`__exãnsi⁄__
 ((*) __u + 1);

294
__u
->
__ui
 =
__§c0_4
;

295
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4);

296
__u
->
__ui
 =
__§c4_4
;

297
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, ,
__STRING2_COPY_ARR2
,

334
__STRING2_COPY_ARR3
,

335
__STRING2_COPY_ARR4
,

336
__STRING2_COPY_ARR5
,

337
__STRING2_COPY_ARR6
,

338
__STRING2_COPY_ARR7
,

339
__STRING2_COPY_ARR8
,
size_t
);

340
__STRING_INLINE
 *

341
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342
__STRING2_COPY_ARR2

__§c2
,
__STRING2_COPY_ARR3

__§c3
,

343
__STRING2_COPY_ARR4

__§c4
,
__STRING2_COPY_ARR5

__§c5
,

344
__STRING2_COPY_ARR6

__§c6
,
__STRING2_COPY_ARR7

__§c7
,

345
__STRING2_COPY_ARR8

__§c8
,
size_t

__§˛í
)

348 
__c
;

349
__STRING2_COPY_ARR2

__sˇ2
;

350
__STRING2_COPY_ARR3

__sˇ3
;

351
__STRING2_COPY_ARR4

__sˇ4
;

352
__STRING2_COPY_ARR5

__sˇ5
;

353
__STRING2_COPY_ARR6

__sˇ6
;

354
__STRING2_COPY_ARR7

__sˇ7
;

355
__STRING2_COPY_ARR8

__sˇ8
;

356 } *
__u
 =
__de°
;

357 (Ë
__§˛í
)

360
__u
->
__c
 =
__§c1
;

363
__exãnsi⁄__

__u
->
__sˇ2
 =
__§c2
;

366
__exãnsi⁄__

__u
->
__sˇ3
 =
__§c3
;

369
__exãnsi⁄__

__u
->
__sˇ4
 =
__§c4
;

372
__exãnsi⁄__

__u
->
__sˇ5
 =
__§c5
;

375
__exãnsi⁄__

__u
->
__sˇ6
 =
__§c6
;

378
__exãnsi⁄__

__u
->
__sˇ7
 =
__§c7
;

381
__exãnsi⁄__

__u
->
__sˇ8
 =
__§c8
;

384 
	`__exãnsi⁄__
 ((*Ë
__u
 +
__§˛í
);

385
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
,
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
,
c
) \

400 :
	`__buûtö_°rchr
 (
s
,
c
)))

	)

402 
	#°rchr
(
s
,
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
,
c
) \

405 :
	`°rchr
 (
s
,
c
)))

	)

411 #i‡(!
deföed

_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 ||
deföed

	g_FORCE_INLINES


413 #i‡!
deföed

_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
,
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&&
	`°æí
 (src) + 1 <= 8 \

417 ?
	`__°r˝y_smÆl
 (
de°
,
	`__°r˝y_¨gs
 (
§c
), \

418
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
,
§c
,
	`°æí
 (src) + 1)) \

420 :
	`°r˝y
 (
de°
,
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426
__exãnsi⁄__

	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427
__exãnsi⁄__

	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428
__exãnsi⁄__

	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429
__exãnsi⁄__

	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431
__STRING_INLINE
 *
__°r˝y_smÆl
 (*,
__uöt16_t
, __uint16_t,

432
__uöt32_t
, __uöt32_t,
size_t
);

433
__STRING_INLINE
 *

434
	$__°r˝y_smÆl
 (*
__de°
,

435
__uöt16_t

__§c0_2
, __uöt16_à
__§c4_2
,

436
__uöt32_t

__§c0_4
, __uöt32_à
__§c4_4
,

437
size_t

__§˛í
)

440
__uöt32_t

__ui
;

441
__uöt16_t

__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447
__u
->
__uc
 = '\0';

450
__u
->
__usi
 =
__§c0_2
;

453
__u
->
__usi
 =
__§c0_2
;

454
__u
 =
	`__exãnsi⁄__
 ((*) __u + 2);

455
__u
->
__uc
 = '\0';

458
__u
->
__ui
 =
__§c0_4
;

461
__u
->
__ui
 =
__§c0_4
;

462
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4);

463
__u
->
__uc
 = '\0';

466
__u
->
__ui
 =
__§c0_4
;

467
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4);

468
__u
->
__usi
 =
__§c4_2
;

471
__u
->
__ui
 =
__§c0_4
;

472
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4);

473
__u
->
__usi
 =
__§c4_2
;

474
__u
 =
	`__exãnsi⁄__
 ((*) __u + 2);

475
__u
->
__uc
 = '\0';

478
__u
->
__ui
 =
__§c0_4
;

479
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4);

480
__u
->
__ui
 =
__§c4_4
;

483 
__de°
;

484
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515
__STRING_INLINE
 *
__°r˝y_smÆl
 (*,
__STRING2_COPY_ARR2
,

516
__STRING2_COPY_ARR3
,

517
__STRING2_COPY_ARR4
,

518
__STRING2_COPY_ARR5
,

519
__STRING2_COPY_ARR6
,

520
__STRING2_COPY_ARR7
,

521
__STRING2_COPY_ARR8
,
size_t
);

522
__STRING_INLINE
 *

523
	$__°r˝y_smÆl
 (*
__de°
,

524
__STRING2_COPY_ARR2

__§c2
,
__STRING2_COPY_ARR3

__§c3
,

525
__STRING2_COPY_ARR4

__§c4
,
__STRING2_COPY_ARR5

__§c5
,

526
__STRING2_COPY_ARR6

__§c6
,
__STRING2_COPY_ARR7

__§c7
,

527
__STRING2_COPY_ARR8

__§c8
,
size_t

__§˛í
)

530 
__c
;

531
__STRING2_COPY_ARR2

__sˇ2
;

532
__STRING2_COPY_ARR3

__sˇ3
;

533
__STRING2_COPY_ARR4

__sˇ4
;

534
__STRING2_COPY_ARR5

__sˇ5
;

535
__STRING2_COPY_ARR6

__sˇ6
;

536
__STRING2_COPY_ARR7

__sˇ7
;

537
__STRING2_COPY_ARR8

__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542
__u
->
__c
 = '\0';

545
__exãnsi⁄__

__u
->
__sˇ2
 =
__§c2
;

548
__exãnsi⁄__

__u
->
__sˇ3
 =
__§c3
;

551
__exãnsi⁄__

__u
->
__sˇ4
 =
__§c4
;

554
__exãnsi⁄__

__u
->
__sˇ5
 =
__§c5
;

557
__exãnsi⁄__

__u
->
__sˇ6
 =
__§c6
;

560
__exãnsi⁄__

__u
->
__sˇ7
 =
__§c7
;

563
__exãnsi⁄__

__u
->
__sˇ8
 =
__§c8
;

566 
__de°
;

567
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed

_HAVE_STRING_ARCH_°p˝y
 || deföed
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
,
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
,
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&&
	`°æí
 (src) + 1 <= 8 \

582 ?
	`__buûtö_°r˝y
 (
de°
,
§c
Ë+
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
,
§c
,
	`°æí
 (src) + 1) \

585 :
	`__°p˝y
 (
de°
,
§c
)))

	)

587 
	#__°p˝y
(
de°
,
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&&
	`°æí
 (src) + 1 <= 8 \

590 ?
	`__°p˝y_smÆl
 (
de°
,
	`__°p˝y_¨gs
 (
§c
), \

591
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
,
§c
,
	`°æí
 (src) + 1) \

594 :
	`__°p˝y
 (
de°
,
§c
)))

	)

598 
	#°p˝y
(
de°
,
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë||
deföed

_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605
__exãnsi⁄__

	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606
__exãnsi⁄__

	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607
__exãnsi⁄__

	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608
__exãnsi⁄__

	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610
__STRING_INLINE
 *
__°p˝y_smÆl
 (*,
__uöt16_t
, __uint16_t,

611
__uöt32_t
, __uöt32_t,
size_t
);

612
__STRING_INLINE
 *

613
	$__°p˝y_smÆl
 (*
__de°
,

614
__uöt16_t

__§c0_2
, __uöt16_à
__§c4_2
,

615
__uöt32_t

__§c0_4
, __uöt32_à
__§c4_4
,

616
size_t

__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627
__u
->
__uc
 = '\0';

630
__u
->
__usi
 =
__§c0_2
;

631
__u
 =
	`__exãnsi⁄__
 ((*) __u + 1);

634
__u
->
__usi
 =
__§c0_2
;

635
__u
 =
	`__exãnsi⁄__
 ((*) __u + 2);

636
__u
->
__uc
 = '\0';

639
__u
->
__ui
 =
__§c0_4
;

640
__u
 =
	`__exãnsi⁄__
 ((*) __u + 3);

643
__u
->
__ui
 =
__§c0_4
;

644
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4);

645
__u
->
__uc
 = '\0';

648
__u
->
__ui
 =
__§c0_4
;

649
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4);

650
__u
->
__usi
 =
__§c4_2
;

651
__u
 =
	`__exãnsi⁄__
 ((*) __u + 1);

654
__u
->
__ui
 =
__§c0_4
;

655
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4);

656
__u
->
__usi
 =
__§c4_2
;

657
__u
 =
	`__exãnsi⁄__
 ((*) __u + 2);

658
__u
->
__uc
 = '\0';

661
__u
->
__ui
 =
__§c0_4
;

662
__u
 =
	`__exãnsi⁄__
 ((*) __u + 4);

663
__u
->
__ui
 =
__§c4_4
;

664
__u
 =
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699
__STRING_INLINE
 *
__°p˝y_smÆl
 (*,
__STRING2_COPY_ARR2
,

700
__STRING2_COPY_ARR3
,

701
__STRING2_COPY_ARR4
,

702
__STRING2_COPY_ARR5
,

703
__STRING2_COPY_ARR6
,

704
__STRING2_COPY_ARR7
,

705
__STRING2_COPY_ARR8
,
size_t
);

706
__STRING_INLINE
 *

707
	$__°p˝y_smÆl
 (*
__de°
,

708
__STRING2_COPY_ARR2

__§c2
,
__STRING2_COPY_ARR3

__§c3
,

709
__STRING2_COPY_ARR4

__§c4
,
__STRING2_COPY_ARR5

__§c5
,

710
__STRING2_COPY_ARR6

__§c6
,
__STRING2_COPY_ARR7

__§c7
,

711
__STRING2_COPY_ARR8

__§c8
,
size_t

__§˛í
)

714 
__c
;

715
__STRING2_COPY_ARR2

__sˇ2
;

716
__STRING2_COPY_ARR3

__sˇ3
;

717
__STRING2_COPY_ARR4

__sˇ4
;

718
__STRING2_COPY_ARR5

__sˇ5
;

719
__STRING2_COPY_ARR6

__sˇ6
;

720
__STRING2_COPY_ARR7

__sˇ7
;

721
__STRING2_COPY_ARR8

__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726
__u
->
__c
 = '\0';

729
__exãnsi⁄__

__u
->
__sˇ2
 =
__§c2
;

732
__exãnsi⁄__

__u
->
__sˇ3
 =
__§c3
;

735
__exãnsi⁄__

__u
->
__sˇ4
 =
__§c4
;

738
__exãnsi⁄__

__u
->
__sˇ5
 =
__§c5
;

741
__exãnsi⁄__

__u
->
__sˇ6
 =
__§c6
;

744
__exãnsi⁄__

__u
->
__sˇ7
 =
__§c7
;

747
__exãnsi⁄__

__u
->
__sˇ8
 =
__§c8
;

750 
__de°
 +
__§˛í
 - 1;

751
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
,
§c
,
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
,
§c
,
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
,
§c
,
n
) \

767 :
	`°∫˝y
 (
de°
,
§c
,
n
)) \

768 :
	`°∫˝y
 (
de°
,
§c
,
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
,
§c
,
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ?
	`°rˇt
 (
__de°
,
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782
§c
,
n
)Ë'\0',
__de°
)) \

783 :
	`°∫ˇt
 (
de°
,
§c
,
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
,
§c
,
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
,
§c
,
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ?
	`°rˇt
 (
de°
,
§c
) \

791 :
	`°∫ˇt
 (
de°
,
§c
,
n
)) \

792 :
	`°∫ˇt
 (
de°
,
§c
,
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
,
s2
) \

801
__exãnsi⁄__
 \

802 ({
size_t

__s1_Àn
,
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 =
	`__buûtö_°æí
 (
s1
),
__s2_Àn
 = __buûtö_°æí (
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë||
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë||
__s2_Àn
 >= 4)) \

807 ?
	`__buûtö_°rcmp
 (
s1
,
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&&
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 =
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&
	`__°rög2_1b±r_p
 (s2) \

811 ?
	`__buûtö_°rcmp
 (
s1
,
s2
) \

812 :
	`__°rcmp_cg
 (
s1
,
s2
,
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 =
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&&
	`__°rög2_1b±r_p
 (s1) \

816 ?
	`__buûtö_°rcmp
 (
s1
,
s2
) \

817 :
	`__°rcmp_gc
 (
s1
,
s2
,
__s2_Àn
)) \

818 :
	`__buûtö_°rcmp
 (
s1
,
s2
)))); })

	)

820 
	#°rcmp
(
s1
,
s2
) \

821
__exãnsi⁄__
 \

822 ({
size_t

__s1_Àn
,
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 =
	`°æí
 (
s1
),
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë||
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë||
__s2_Àn
 >= 4)) \

827 ?
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 <
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&&
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 =
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&
	`__°rög2_1b±r_p
 (s2) \

832 ?
	`__°rcmp_cc
 (
s1
,
s2
,
__s1_Àn
) \

833 :
	`__°rcmp_cg
 (
s1
,
s2
,
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 =
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&&
	`__°rög2_1b±r_p
 (s1) \

837 ?
	`__°rcmp_cc
 (
s1
,
s2
,
__s2_Àn
) \

838 :
	`__°rcmp_gc
 (
s1
,
s2
,
__s2_Àn
)) \

839 :
	`°rcmp
 (
s1
,
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
,
s2
,
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 &&
__ªsu…
 == 0) \

848
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 &&
__ªsu…
 == 0) \

854
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 &&
__ªsu…
 == 0) \

860
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
,
s2
,
l1
) \

870 (
	`__exãnsi⁄__
 ({
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 -
__s2
[0]); \

875 i‡(
l1
 > 0 &&
__ªsu…
 == 0) \

877
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] -
__s2
[1]); \

879 i‡(
l1
 > 1 &&
__ªsu…
 == 0) \

881
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] -
__s2
[2]);\

883 i‡(
l1
 > 2 &&
__ªsu…
 == 0) \

884
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 -
__s2
[3]); \

889
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
,
s2
,
l2
) \

892 (
	`__exãnsi⁄__
 ({
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 &&
__ªsu…
 == 0) \

899
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 &&
__ªsu…
 == 0) \

904
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 &&
__ªsu…
 == 0) \

908
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
,
s2
,
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 &&
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 &&
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ?
	`°rcmp
 (
s1
,
s2
Ë:
	`°∫cmp
 (s1, s2,
n
)))

	)

932 #i‡!
deföed

_HAVE_STRING_ARCH_°rc•n
 || deföed
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
,
ªje˘
) \

936
__exãnsi⁄__
 \

937 ({ 
__r0
,
__r1
,
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&&
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&&
	`__°rög2_1b±r_p
 (s)) \

940 ?
	`__buûtö_°rc•n
 (
s
,
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ?
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ?
	`__°rc•n_c1
 (
s
,
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ?
	`__°rc•n_c2
 (
s
,
__r0
,
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ?
	`__°rc•n_c3
 (
s
,
__r0
,
__r1
,
__r2
) \

949 :
	`__buûtö_°rc•n
 (
s
,
ªje˘
)))))) \

950 :
	`__buûtö_°rc•n
 (
s
,
ªje˘
)); })

	)

952 
	#°rc•n
(
s
,
ªje˘
) \

953
__exãnsi⁄__
 \

954 ({ 
__r0
,
__r1
,
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&&
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ?
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ?
	`__°rc•n_c1
 (
s
,
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ?
	`__°rc•n_c2
 (
s
,
__r0
,
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ?
	`__°rc•n_c3
 (
s
,
__r0
,
__r1
,
__r2
) \

964 :
	`°rc•n
 (
s
,
ªje˘
))))) \

965 :
	`°rc•n
 (
s
,
ªje˘
)); })

	)

969
__STRING_INLINE

size_t

__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970
__STRING_INLINE

size_t


971
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t

__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976 
__ªsu…
;

977
	}
}

979
__STRING_INLINE

size_t

__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981
__STRING_INLINE

size_t


982
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t

__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 &&
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988 
__ªsu…
;

989
	}
}

991
__STRING_INLINE

size_t

__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993
__STRING_INLINE

size_t


994
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t

__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 &&
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001 
__ªsu…
;

1002
	}
}

1008 #i‡!
deföed

_HAVE_STRING_ARCH_°r•n
 || deföed
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
,
ac˚±
) \

1012
__exãnsi⁄__
 \

1013 ({ 
__a0
,
__a1
,
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&&
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&&
	`__°rög2_1b±r_p
 (s)) \

1016 ?
	`__buûtö_°r•n
 (
s
,
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ?
	`__°r•n_c1
 (
s
,
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ?
	`__°r•n_c2
 (
s
,
__a0
,
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ?
	`__°r•n_c3
 (
s
,
__a0
,
__a1
,
__a2
) \

1025 :
	`__buûtö_°r•n
 (
s
,
ac˚±
)))))) \

1026 :
	`__buûtö_°r•n
 (
s
,
ac˚±
)); })

	)

1028 
	#°r•n
(
s
,
ac˚±
) \

1029
__exãnsi⁄__
 \

1030 ({ 
__a0
,
__a1
,
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&&
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ?
	`__°r•n_c1
 (
s
,
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ?
	`__°r•n_c2
 (
s
,
__a0
,
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ?
	`__°r•n_c3
 (
s
,
__a0
,
__a1
,
__a2
) \

1040 :
	`°r•n
 (
s
,
ac˚±
))))) \

1041 :
	`°r•n
 (
s
,
ac˚±
)); })

	)

1045
__STRING_INLINE

size_t

__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046
__STRING_INLINE

size_t


1047
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t

__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053 
__ªsu…
;

1054
	}
}

1056
__STRING_INLINE

size_t

__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058
__STRING_INLINE

size_t


1059
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t

__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065 
__ªsu…
;

1066
	}
}

1068
__STRING_INLINE

size_t

__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070
__STRING_INLINE

size_t


1071
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t

__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 ||
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078 
__ªsu…
;

1079
	}
}

1084 #i‡!
deföed

_HAVE_STRING_ARCH_°Ωbrk
 || deföed
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
,
ac˚±
) \

1088
__exãnsi⁄__
 \

1089 ({ 
__a0
,
__a1
,
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&&
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&&
	`__°rög2_1b±r_p
 (s)) \

1092 ?
	`__buûtö_°Ωbrk
 (
s
,
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ?
	`__buûtö_°rchr
 (
s
,
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ?
	`__°Ωbrk_c2
 (
s
,
__a0
,
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ?
	`__°Ωbrk_c3
 (
s
,
__a0
,
__a1
,
__a2
) \

1101 :
	`__buûtö_°Ωbrk
 (
s
,
ac˚±
)))))) \

1102 :
	`__buûtö_°Ωbrk
 (
s
,
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
,
ac˚±
) \

1105
__exãnsi⁄__
 \

1106 ({ 
__a0
,
__a1
,
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&&
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ?
	`°rchr
 (
s
,
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ?
	`__°Ωbrk_c2
 (
s
,
__a0
,
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ?
	`__°Ωbrk_c3
 (
s
,
__a0
,
__a1
,
__a2
) \

1116 :
	`°Ωbrk
 (
s
,
ac˚±
))))) \

1117 :
	`°Ωbrk
 (
s
,
ac˚±
)); })

	)

1121
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123
__STRING_INLINE
 *

1124
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ?
NULL
 : (*Ë(
size_t
) __s;

1130
	}
}

1132
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134
__STRING_INLINE
 *

1135
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ?
NULL
 : (*Ë(
size_t
) __s;

1143
	}
}

1149 #i‡!
deföed

_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
,
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&&
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ?
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 :
	`°r°r
 (
hay°ack
,
√edÀ
))) \

1158 :
	`°r°r
 (
hay°ack
,
√edÀ
)))

	)

1162 #i‡!
deföed

_HAVE_STRING_ARCH_°πok_r
 || deföed
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
,
£p
,
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&&
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ?
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0],
√xç
) \

1169 :
	`__°πok_r
 (
s
,
£p
,
√xç
)))

	)

1172
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173
__STRING_INLINE
 *

1174
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181
__ªsu…
 =
NULL
;

1182 i‡(*
__s
 != '\0')

1184
__ªsu…
 =
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188
__s
[-1] = '\0';

1192 *
__√xç
 =
__s
;

1193 
__ªsu…
;

1194
	}
}

1195 #i‡
deföed

__USE_POSIX
 || deföed
__USE_MISC


1196 
	#°πok_r
(
s
,
£p
,
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed

_HAVE_STRING_ARCH_°r£p
 || deföed
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
,
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
,
ªje˘
) \

1206
__exãnsi⁄__
 \

1207 ({ 
__r0
,
__r1
,
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&&
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ?
	`__°r£p_1c
 (
s
,
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ?
	`__°r£p_2c
 (
s
,
__r0
,
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ?
	`__°r£p_3c
 (
s
,
__r0
,
__r1
,
__r2
) \

1218 :
	`__°r£p_g
 (
s
,
ªje˘
)))) \

1219 :
	`__°r£p_g
 (
s
,
ªje˘
)); })

	)

1222
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223
__STRING_INLINE
 *

1224
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 =
	`°rchr
 (__ªtvÆ,
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229 
__ªtvÆ
;

1230
	}
}

1232
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233
__STRING_INLINE
 *

1234
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 =
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244
__˝
 =
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 =
__˝
;

1256 
__ªtvÆ
;

1257
	}
}

1259
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261
__STRING_INLINE
 *

1262
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 =
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272
__˝
 =
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 =
__˝
;

1284 
__ªtvÆ
;

1285
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
,
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed

_HAVE_STRING_ARCH_°rdup
 || !deföed
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW

__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&&
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({
size_t

__Àn
 =
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ,
s
,
__Àn
); \

1312
__ªtvÆ
;
	}
})) \

1313 :
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed

__USE_SVID
 || deföed
__USE_BSD
 || deföed
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
,
size_t

__n
)

1323
__THROW

__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
,
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&&
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({
size_t

__Àn
 =
	`°æí
 (
s
) + 1; \

1329
size_t

__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 <
__Àn
) \

1332
__Àn
 =
__n
 + 1; \

1333
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ,
s
, \

1338
__Àn
 - 1); \

1340
__ªtvÆ
;
	}
})) \

1341 :
	`__°∫dup
 (
s
,
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
,
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48
__exã∫_Æways_ölöe
 *

49
__NTH
 (
	$mem˝y
 (*
__ª°ri˘

__de°
,
__c⁄°
 *__ª°ri˘
__§c
,

50
size_t

__Àn
))

52 
	`__buûtö___mem˝y_chk
 (
__de°
,
__§c
,
__Àn
,
	`__bos0
 (__dest));

53
	}
}

55
__exã∫_Æways_ölöe
 *

56
__NTH
 (
	$memmove
 (*
__de°
,
__c⁄°
 *
__§c
,
size_t

__Àn
))

58 
	`__buûtö___memmove_chk
 (
__de°
,
__§c
,
__Àn
,
	`__bos0
 (__dest));

59
	}
}

61 #ifde‡
__USE_GNU


62
__exã∫_Æways_ölöe
 *

63
__NTH
 (
	$memp˝y
 (*
__ª°ri˘

__de°
,
__c⁄°
 *__ª°ri˘
__§c
,

64
size_t

__Àn
))

66 
	`__buûtö___memp˝y_chk
 (
__de°
,
__§c
,
__Àn
,
	`__bos0
 (__dest));

67
	}
}

76
__exã∫_Æways_ölöe
 *

77
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
,
size_t

__Àn
))

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

80 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

82
	`__w¨n_mem£t_zîo_Àn
 ();

83 
__de°
;

85 
	`__buûtö___mem£t_chk
 (
__de°
,
__ch
,
__Àn
,
	`__bos0
 (__dest));

86
	}
}

88 #ifde‡
__USE_BSD


89
__exã∫_Æways_ölöe
 

90
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
,
size_t

__Àn
))

92 (Ë
	`__buûtö___memmove_chk
 (
__de°
,
__§c
,
__Àn
,
	`__bos0
 (__dest));

93
	}
}

95
__exã∫_Æways_ölöe
 

96
__NTH
 (
	$bzîo
 (*
__de°
,
size_t

__Àn
))

98 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0',
__Àn
,
	`__bos0
 (__dest));

99
	}
}

102
__exã∫_Æways_ölöe
 *

103
__NTH
 (
	$°r˝y
 (*
__ª°ri˘

__de°
,
__c⁄°
 *__ª°ri˘
__§c
))

105 
	`__buûtö___°r˝y_chk
 (
__de°
,
__§c
,
	`__bos
 (__dest));

106
	}
}

108 #ifde‡
__USE_GNU


109
__exã∫_Æways_ölöe
 *

110
__NTH
 (
	$°p˝y
 (*
__ª°ri˘

__de°
,
__c⁄°
 *__ª°ri˘
__§c
))

112 
	`__buûtö___°p˝y_chk
 (
__de°
,
__§c
,
	`__bos
 (__dest));

113
	}
}

117
__exã∫_Æways_ölöe
 *

118
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘

__de°
,
__c⁄°
 *__ª°ri˘
__§c
,

119
size_t

__Àn
))

121 
	`__buûtö___°∫˝y_chk
 (
__de°
,
__§c
,
__Àn
,
	`__bos
 (__dest));

122
	}
}

125 *
	$__°≤˝y_chk
 (*
__de°
,
__c⁄°
 *
__§c
,
size_t

__n
,

126
size_t

__de°Àn
Ë
__THROW
;

127 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

128
__c⁄°
 *
__§c
,

129
size_t

__n
),
°≤˝y
);

131
__exã∫_Æways_ölöe
 *

132
	`__NTH
 (
	$°≤˝y
 (*
__de°
,
__c⁄°
 *
__§c
,
size_t

__n
))

134 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

135 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

136 
	`__°≤˝y_chk
 (
__de°
,
__§c
,
__n
,
	`__bos
 (__dest));

137 
	`__°≤˝y_Æüs
 (
__de°
,
__§c
,
__n
);

138
	}
}

141
__exã∫_Æways_ölöe
 *

142
__NTH
 (
	$°rˇt
 (*
__ª°ri˘

__de°
,
__c⁄°
 *__ª°ri˘
__§c
))

144 
	`__buûtö___°rˇt_chk
 (
__de°
,
__§c
,
	`__bos
 (__dest));

145
	}
}

148
__exã∫_Æways_ölöe
 *

149
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘

__de°
,
__c⁄°
 *__ª°ri˘
__§c
,

150
size_t

__Àn
))

152 
	`__buûtö___°∫ˇt_chk
 (
__de°
,
__§c
,
__Àn
,
	`__bos
 (__dest));

153
	}
}

	@/usr/include/features.h

19 #i‚def
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

95 #unde‡
__USE_ISOC99


96 #unde‡
__USE_ISOC95


97 #unde‡
__USE_POSIX


98 #unde‡
__USE_POSIX2


99 #unde‡
__USE_POSIX199309


100 #unde‡
__USE_POSIX199506


101 #unde‡
__USE_XOPEN


102 #unde‡
__USE_XOPEN_EXTENDED


103 #unde‡
__USE_UNIX98


104 #unde‡
__USE_XOPEN2K


105 #unde‡
__USE_XOPEN2K8


106 #unde‡
__USE_LARGEFILE


107 #unde‡
__USE_LARGEFILE64


108 #unde‡
__USE_FILE_OFFSET64


109 #unde‡
__USE_BSD


110 #unde‡
__USE_SVID


111 #unde‡
__USE_MISC


112 #unde‡
__USE_ATFILE


113 #unde‡
__USE_GNU


114 #unde‡
__USE_REENTRANT


115 #unde‡
__USE_FORTIFY_LEVEL


116 #unde‡
__FAVOR_BSD


117 #unde‡
__KERNEL_STRICT_NAMES


121 #i‚de‡
_LOOSE_KERNEL_NAMES


122 
	#__KERNEL_STRICT_NAMES


	)

126 
	#__USE_ANSI
 1

	)

135 #i‡
deföed

__GNUC__
 && deföed
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
,
mö
) \

137 ((
__GNUC__
 << 16Ë+
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
,
mö
Ë0

	)

144 #i‡
deföed

_BSD_SOURCE
 && \

145 !(
deföed

	g_POSIX_SOURCE
 || deföed
	g_POSIX_C_SOURCE
 || \

146
deföed

	g_XOPEN_SOURCE
 || deföed
	g_XOPEN_SOURCE_EXTENDED
 || \

147
deföed

	g_GNU_SOURCE
 || deföed
	g_SVID_SOURCE
)

148 
	#__FAVOR_BSD
 1

	)

152 #ifde‡
_GNU_SOURCE


153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_POSIX_SOURCE


156 
	#_POSIX_SOURCE
 1

	)

157 #unde‡
_POSIX_C_SOURCE


158 
	#_POSIX_C_SOURCE
 200809L

	)

159 #unde‡
_XOPEN_SOURCE


160 
	#_XOPEN_SOURCE
 700

	)

161 #unde‡
_XOPEN_SOURCE_EXTENDED


162 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

163 #unde‡
_LARGEFILE64_SOURCE


164 
	#_LARGEFILE64_SOURCE
 1

	)

165 #unde‡
_BSD_SOURCE


166 
	#_BSD_SOURCE
 1

	)

167 #unde‡
_SVID_SOURCE


168 
	#_SVID_SOURCE
 1

	)

169 #unde‡
_ATFILE_SOURCE


170 
	#_ATFILE_SOURCE
 1

	)

175 #i‡(!
deföed

__STRICT_ANSI__
 && !deföed
_ISOC99_SOURCE
 && \

176 !
deföed

	g_POSIX_SOURCE
 && !deföed
	g_POSIX_C_SOURCE
 && \

177 !
deföed

	g_XOPEN_SOURCE
 && !deföed
	g_XOPEN_SOURCE_EXTENDED
 && \

178 !
deföed

	g_BSD_SOURCE
 && !deföed
	g_SVID_SOURCE
)

179 
	#_BSD_SOURCE
 1

	)

180 
	#_SVID_SOURCE
 1

	)

187 #i‡(
deföed

_ISOC99_SOURCE
 || deföed
_ISOC9X_SOURCE
 \

188 || (
deföed

	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

189 
	#__USE_ISOC99
 1

	)

193 #i‡(
deföed

_ISOC99_SOURCE
 || deföed
_ISOC9X_SOURCE
 \

194 || (
deföed

__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

195 
	#__USE_ISOC95
 1

	)

200 #i‡((!
deföed

__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

201 !
deföed

_POSIX_SOURCE
 && !deföed
_POSIX_C_SOURCE
)

202 
	#_POSIX_SOURCE
 1

	)

203 #i‡
deföed

_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

204 
	#_POSIX_C_SOURCE
 2

	)

205 #ñi‡
deföed

_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

206 
	#_POSIX_C_SOURCE
 199506L

	)

207 #ñi‡
deföed

_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

208 
	#_POSIX_C_SOURCE
 200112L

	)

210 
	#_POSIX_C_SOURCE
 200809L

	)

212 
	#__USE_POSIX_IMPLICITLY
 1

	)

215 #i‡
deföed

_POSIX_SOURCE
 ||
_POSIX_C_SOURCE
 >1 || deföed
_XOPEN_SOURCE


216 
	#__USE_POSIX
 1

	)

219 #i‡
deföed

_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed
_XOPEN_SOURCE


220 
	#__USE_POSIX2
 1

	)

223 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

224 
	#__USE_POSIX199309
 1

	)

227 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

228 
	#__USE_POSIX199506
 1

	)

231 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

232 
	#__USE_XOPEN2K
 1

	)

233 #unde‡
__USE_ISOC99


234 
	#__USE_ISOC99
 1

	)

237 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

238 
	#__USE_XOPEN2K8
 1

	)

239 #unde‡
_ATFILE_SOURCE


240 
	#_ATFILE_SOURCE
 1

	)

243 #ifdef
_XOPEN_SOURCE


244 
	#__USE_XOPEN
 1

	)

245 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

246 
	#__USE_XOPEN_EXTENDED
 1

	)

247 
	#__USE_UNIX98
 1

	)

248 #unde‡
_LARGEFILE_SOURCE


249 
	#_LARGEFILE_SOURCE
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

251 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

252 
	#__USE_XOPEN2K8
 1

	)

254 
	#__USE_XOPEN2K
 1

	)

255 #unde‡
__USE_ISOC99


256 
	#__USE_ISOC99
 1

	)

259 #ifde‡
_XOPEN_SOURCE_EXTENDED


260 
	#__USE_XOPEN_EXTENDED
 1

	)

265 #ifde‡
_LARGEFILE_SOURCE


266 
	#__USE_LARGEFILE
 1

	)

269 #ifde‡
_LARGEFILE64_SOURCE


270 
	#__USE_LARGEFILE64
 1

	)

273 #i‡
deföed

_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

274 
	#__USE_FILE_OFFSET64
 1

	)

277 #i‡
deföed

_BSD_SOURCE
 || deföed
_SVID_SOURCE


278 
	#__USE_MISC
 1

	)

281 #ifdef
_BSD_SOURCE


282 
	#__USE_BSD
 1

	)

285 #ifdef
_SVID_SOURCE


286 
	#__USE_SVID
 1

	)

289 #ifdef
_ATFILE_SOURCE


290 
	#__USE_ATFILE
 1

	)

293 #ifdef
_GNU_SOURCE


294 
	#__USE_GNU
 1

	)

297 #i‡
deföed

_REENTRANT
 || deföed
_THREAD_SAFE


298 
	#__USE_REENTRANT
 1

	)

301 #i‡
deföed

_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

302 &&
__GNUC_PREREQ
 (4, 1Ë&&
deföed

	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

303 #i‡
_FORTIFY_SOURCE
 > 1

304 
	#__USE_FORTIFY_LEVEL
 2

	)

306 
	#__USE_FORTIFY_LEVEL
 1

	)

309 
	#__USE_FORTIFY_LEVEL
 0

	)

313 
	~<bôs/¥edefs.h
>

316 
	#__STDC_ISO_10646__
 200009L

	)

324 #unde‡
__GNU_LIBRARY__


325 
	#__GNU_LIBRARY__
 6

	)

329 
	#__GLIBC__
 2

	)

330 
	#__GLIBC_MINOR__
 11

	)

332 
	#__GLIBC_PREREQ
(
maj
,
mö
) \

333 ((
__GLIBC__
 << 16Ë+
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

336 #i‡
deföed

__GNUC__
 \

337 || (
deföed

	g__PGI
 && deföed
	g__i386__
 ) \

338 || (
deföed

	g__INTEL_COMPILER
 && (deföed
	g__i386__
 || deföed
	g__ü64__
)) \

339 || (
deföed

	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

340 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

344 #i‚de‡
__ASSEMBLER__


345 #i‚de‡
_SYS_CDEFS_H


346 
	~<sys/cdefs.h
>

351 #i‡
deföed

__USE_FILE_OFFSET64
 && !deföed
__REDIRECT


352 
	#__USE_LARGEFILE
 1

	)

353 
	#__USE_LARGEFILE64
 1

	)

359 #i‡
__GNUC_PREREQ
 (2, 7Ë&&
deföed

__OPTIMIZE__
 \

360 && !
deföed

	g__OPTIMIZE_SIZE__
 && !deföed
	g__NO_INLINE__
 \

361 &&
deföed

	g__exã∫_ölöe


362 
	#__USE_EXTERN_INLINES
 1

	)

367 #i‡
__GNUC_PREREQ
 (2, 7Ë&&
deföed

__OPTIMIZE__
 \

368 && (
deföed

	g_LIBC
 || !deföed
	g__OPTIMIZE_SIZE__
Ë&& !deföed
	g__NO_INLINE__
 \

369 &&
deföed

	g__exã∫_ölöe


370 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

378 
	~<gnu/°ubs.h
>

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t

	tloˇÀ_t
;

	@/usr/include/bits/predefs.h

19 #i‚de‡
_FEATURES_H


23 #i‚de‡
_PREDEFS_H


24 
	#_PREDEFS_H


	)

27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/types.h

24 #i‚def
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed

__GLIBC_HAVE_LONG_LONG


47
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed

__GLIBC_HAVE_LONG_LONG


56
__exãnsi⁄__
 
	t__quad_t
;

57
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 }
	t__quad_t
;

65
__u_l⁄g

	m__vÆ
[2];

66 }
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE

__quad_t


	)

107 
	#__UQUAD_TYPE

__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE

__quad_t


	)

113 
	#__U64_TYPE

__u_quad_t


	)

116 
	#__STD_TYPE

__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134
__STD_TYPE

	t__DEV_T_TYPE

	t__dev_t
;

135
__STD_TYPE

__UID_T_TYPE

	g__uid_t
;

136
__STD_TYPE

__GID_T_TYPE

	g__gid_t
;

137
__STD_TYPE

__INO_T_TYPE

	g__öo_t
;

138
__STD_TYPE

__INO64_T_TYPE

	g__öo64_t
;

139
__STD_TYPE

__MODE_T_TYPE

	g__mode_t
;

140
__STD_TYPE

__NLINK_T_TYPE

	g__∆ök_t
;

141
__STD_TYPE

__OFF_T_TYPE

	g__off_t
;

142
__STD_TYPE

__OFF64_T_TYPE

	g__off64_t
;

143
__STD_TYPE

__PID_T_TYPE

	g__pid_t
;

144
__STD_TYPE

__FSID_T_TYPE

	g__fsid_t
;

145
__STD_TYPE

__CLOCK_T_TYPE

	g__˛ock_t
;

146
__STD_TYPE

__RLIM_T_TYPE

	g__æim_t
;

147
__STD_TYPE

__RLIM64_T_TYPE

	g__æim64_t
;

148
__STD_TYPE

__ID_T_TYPE

	g__id_t
;

149
__STD_TYPE

__TIME_T_TYPE

	g__time_t
;

150
__STD_TYPE

__USECONDS_T_TYPE

	g__u£c⁄ds_t
;

151
__STD_TYPE

__SUSECONDS_T_TYPE

	g__su£c⁄ds_t
;

153
__STD_TYPE

__DADDR_T_TYPE

	g__daddr_t
;

154
__STD_TYPE

__SWBLK_T_TYPE

	g__swblk_t
;

155
__STD_TYPE

__KEY_T_TYPE

	g__key_t
;

158
__STD_TYPE

__CLOCKID_T_TYPE

	g__˛ockid_t
;

161
__STD_TYPE

__TIMER_T_TYPE

	g__timî_t
;

164
__STD_TYPE

__BLKSIZE_T_TYPE

	g__blksize_t
;

169
__STD_TYPE

__BLKCNT_T_TYPE

	g__blk˙t_t
;

170
__STD_TYPE

__BLKCNT64_T_TYPE

	g__blk˙t64_t
;

173
__STD_TYPE

__FSBLKCNT_T_TYPE

	g__fsblk˙t_t
;

174
__STD_TYPE

__FSBLKCNT64_T_TYPE

	g__fsblk˙t64_t
;

177
__STD_TYPE

__FSFILCNT_T_TYPE

	g__fsfû˙t_t
;

178
__STD_TYPE

__FSFILCNT64_T_TYPE

	g__fsfû˙t64_t
;

180
__STD_TYPE

__SSIZE_T_TYPE

	g__ssize_t
;

184 
__off64_t

	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189
__STD_TYPE

__SWORD_TYPE

	g__öçå_t
;

192
__STD_TYPE

__U32_TYPE

	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/endian.h

19 #i‚def
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER

__BYTE_ORDER


	)

45 #ifdef
__USE_BSD


46 
	#LITTLE_ENDIAN

__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN

__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN

__PDP_ENDIAN


	)

49 
	#BYTE_ORDER

__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
,
LO
ËLO,
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
,
LO
ËHI,
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/stdlib.h

23 #i‚def
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡
deföed

__USE_XOPEN
 && !deföed
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed

__GNUC__
 && !deföed
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ {
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed

__GNUC__
 || __GNUC__ < 2 || deföed
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 }
	t__WAIT_STATUS

	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 }
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 }
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113
	g__END_NAMESPACE_STD


115 #i‡
deföed

__USE_ISOC99
 && !deföed
__Œdiv_t_deföed


116
__BEGIN_NAMESPACE_C99


118
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 }
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t

	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW

__wur
;

143
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1)Ë
__wur
;

153
__END_NAMESPACE_STD


155 #i‡
deföed

__USE_ISOC99
 || (deföed
__GLIBC_HAVE_LONG_LONG
 && deföed
__USE_MISC
)

156
__BEGIN_NAMESPACE_C99


158
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1)Ë
__wur
;

160
__END_NAMESPACE_C99


163
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘

__≈å
,

166 **
__ª°ri˘

__íd±r
)

167
__THROW

	`__n⁄nuŒ
 ((1)Ë
__wur
;

168
__END_NAMESPACE_STD


170 #ifdef
__USE_ISOC99


171
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘

__≈å
,

174 **
__ª°ri˘

__íd±r
Ë
__THROW

	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘

__≈å
,

177 **
__ª°ri˘

__íd±r
)

178
__THROW

	`__n⁄nuŒ
 ((1)Ë
__wur
;

179
__END_NAMESPACE_C99


182
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘

__≈å
,

185 **
__ª°ri˘

__íd±r
, 
__ba£
)

186
__THROW

	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘

__≈å
,

189 **
__ª°ri˘

__íd±r
, 
__ba£
)

190
__THROW

	`__n⁄nuŒ
 ((1)Ë
__wur
;

191
__END_NAMESPACE_STD


193 #i‡
deföed

__GLIBC_HAVE_LONG_LONG
 && deföed
__USE_BSD


195
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘

__≈å
,

197 **
__ª°ri˘

__íd±r
, 
__ba£
)

198
__THROW

	`__n⁄nuŒ
 ((1)Ë
__wur
;

200
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘

__≈å
,

202 **
__ª°ri˘

__íd±r
, 
__ba£
)

203
__THROW

	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed

__USE_ISOC99
 || (deföed
__GLIBC_HAVE_LONG_LONG
 && deföed
__USE_MISC
)

207
__BEGIN_NAMESPACE_C99


209
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘

__≈å
,

211 **
__ª°ri˘

__íd±r
, 
__ba£
)

212
__THROW

	`__n⁄nuŒ
 ((1)Ë
__wur
;

214
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘

__≈å
,

216 **
__ª°ri˘

__íd±r
, 
__ba£
)

217
__THROW

	`__n⁄nuŒ
 ((1)Ë
__wur
;

218
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘

__≈å
,

241 **
__ª°ri˘

__íd±r
, 
__ba£
,

242
__loˇÀ_t

__loc
Ë
__THROW

	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘

__≈å
,

245 **
__ª°ri˘

__íd±r
,

246 
__ba£
,
__loˇÀ_t

__loc
)

247
__THROW

	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘

__≈å
,

251 **
__ª°ri˘

__íd±r
, 
__ba£
,

252
__loˇÀ_t

__loc
)

253
__THROW

	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘

__≈å
,

257 **
__ª°ri˘

__íd±r
,

258 
__ba£
,
__loˇÀ_t

__loc
)

259
__THROW

	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘

__≈å
,

262 **
__ª°ri˘

__íd±r
,
__loˇÀ_t

__loc
)

263
__THROW

	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘

__≈å
,

266 **
__ª°ri˘

__íd±r
,
__loˇÀ_t

__loc
)

267
__THROW

	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘

__≈å
,

270 **
__ª°ri˘

__íd±r
,

271
__loˇÀ_t

__loc
)

272
__THROW

	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277
__BEGIN_NAMESPACE_STD


278
__exã∫_ölöe
 

279
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281 
	`°πod
 (
__≈å
, (**Ë
NULL
);

282
	}
}

283
__exã∫_ölöe
 

284
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287
	}
}

288
__exã∫_ölöe
 

289
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291 
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292
	}
}

293
	g__END_NAMESPACE_STD


295 #i‡
deföed

__USE_MISC
 || deföed
__USE_ISOC99


296
__BEGIN_NAMESPACE_C99


297
__exãnsi⁄__

__exã∫_ölöe
 

298
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300 
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301
	}
}

302
	g__END_NAMESPACE_C99


307 #i‡
deföed

__USE_SVID
 || deföed
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW

__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315
__THROW

__©åibuã_puª__

	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed

__USE_SVID
 || deföed
__USE_XOPEN_EXTENDED
 || deföed
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337
size_t

__°©ñí
Ë
__THROW

	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW

	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351
öt32_t
 *
Âå
;

352
öt32_t
 *
Ωå
;

353
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘

__buf
,

361
öt32_t
 *
__ª°ri˘

__ªsu…
Ë
__THROW

	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364
__THROW

	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘

__°©ebuf
,

367
size_t

__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘

__buf
)

369
__THROW

	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘

__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘

__buf
)

373
__THROW

	`__n⁄nuŒ
 ((1, 2));

378
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed

__USE_SVID
 || deföed
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW

	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401
__THROW

	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406
__THROW

	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411
__THROW

	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW

	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘

__buf„r
,

429 *
__ª°ri˘

__ªsu…
Ë
__THROW

	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘

__buf„r
,

432 *
__ª°ri˘

__ªsu…
Ë
__THROW

	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘

__buf„r
,

436 *
__ª°ri˘

__ªsu…
)

437
__THROW

	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘

__buf„r
,

440 *
__ª°ri˘

__ªsu…
)

441
__THROW

	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘

__buf„r
,

445 *
__ª°ri˘

__ªsu…
)

446
__THROW

	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘

__buf„r
,

449 *
__ª°ri˘

__ªsu…
)

450
__THROW

	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454
__THROW

	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW

	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461
__THROW

	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t

__size
Ë
__THROW

__©åibuã_mÆloc__

__wur
;

473 *
	$ˇŒoc
 (
size_t

__nmemb
, size_à
__size
)

474
__THROW

__©åibuã_mÆloc__

__wur
;

475
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
,
size_t

__size
)

486
__THROW

__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489
__END_NAMESPACE_STD


491 #ifdef
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed

__USE_GNU
 || deföed
__USE_BSD
 || deföed
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡
deföed

__USE_BSD
 || deföed
__USE_XOPEN_EXTENDED


502 *
	$vÆloc
 (
size_t

__size
Ë
__THROW

__©åibuã_mÆloc__

__wur
;

505 #ifde‡
__USE_XOPEN2K


507 
	$posix_memÆign
 (**
__mem±r
,
size_t

__Æignmít
, size_à
__size
)

508
__THROW

	`__n⁄nuŒ
 ((1)Ë
__wur
;

511
__BEGIN_NAMESPACE_STD


513 
	$ab‹t
 (Ë
__THROW

	`__©åibuã__
 ((
__n‹ëu∫__
));

517 
	`©exô
 ((*
__func
Ë()Ë
__THROW

	`__n⁄nuŒ
 ((1));

519 #ifde‡
__USE_GNU


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525
__THROW

	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW

	`__n⁄nuŒ
 ((1));

530
__END_NAMESPACE_STD


532 #ifdef
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536
__THROW

	`__n⁄nuŒ
 ((1));

539
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW

	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #ifde‡
__USE_GNU


551 
	$quick_exô
 (
__°©us
Ë
__THROW

	`__©åibuã__
 ((
__n‹ëu∫__
));

553
__END_NAMESPACE_STD


555 #ifde‡
__USE_ISOC99


556
__BEGIN_NAMESPACE_C99


559 
	$_Exô
 (
__°©us
Ë
__THROW

	`__©åibuã__
 ((
__n‹ëu∫__
));

560
__END_NAMESPACE_C99


564
__BEGIN_NAMESPACE_STD


566 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW

	`__n⁄nuŒ
 ((1)Ë
__wur
;

567
__END_NAMESPACE_STD


571 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

572
__THROW

	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed

__USE_SVID
 || deföed
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW

	`__n⁄nuŒ
 ((1));

581 #i‡
deföed

__USE_BSD
 || deföed
__USE_XOPEN2K


584 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

585
__THROW

	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
;

591 #ifdef
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed

__USE_MISC
 || deföed
__USE_XOPEN_EXTENDED


604 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW

	`__n⁄nuŒ
 ((1)Ë
__wur
;

614 #i‚de‡
__USE_FILE_OFFSET64


615 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

617 #ifde‡
__REDIRECT


618 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
),
mk°emp64
)

619
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 
	#mk°emp

mk°emp64


	)

624 #ifde‡
__USE_LARGEFILE64


625 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

629 #ifde‡
__USE_MISC


636 #i‚de‡
__USE_FILE_OFFSET64


637 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

639 #ifde‡
__REDIRECT


640 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

641
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 
	#mk°emps

mk°emps64


	)

646 #ifde‡
__USE_LARGEFILE64


647 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

648
	`__n⁄nuŒ
 ((1)Ë
__wur
;

652 #i‡
deföed

__USE_BSD
 || deföed
__USE_XOPEN2K8


658 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW

	`__n⁄nuŒ
 ((1)Ë
__wur
;

661 #ifde‡
__USE_GNU


668 #i‚de‡
__USE_FILE_OFFSET64


669 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

671 #ifde‡
__REDIRECT


672 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
),
mko°emp64
)

673
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 
	#mko°emp

mko°emp64


	)

678 #ifde‡
__USE_LARGEFILE64


679 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

688 #i‚de‡
__USE_FILE_OFFSET64


689 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

690
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #ifde‡
__REDIRECT


693 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

694 
__Êags
),
mko°emps64
)

695
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 
	#mko°emps

mko°emps64


	)

700 #ifde‡
__USE_LARGEFILE64


701 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

702
	`__n⁄nuŒ
 ((1)Ë
__wur
;

707
__BEGIN_NAMESPACE_STD


712 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

713
__END_NAMESPACE_STD


716 #ifdef
__USE_GNU


719 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

720
__THROW

	`__n⁄nuŒ
 ((1)Ë
__wur
;

723 #i‡
deföed

__USE_BSD
 || deföed
__USE_XOPEN_EXTENDED


729 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘

__«me
,

730 *
__ª°ri˘

__ªsﬁved
Ë
__THROW

__wur
;

735 #i‚de‡
__COMPAR_FN_T


736 
	#__COMPAR_FN_T


	)

737 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

739 #ifdef
__USE_GNU


740 
__com∑r_‚_t

	tcom∑ris⁄_‚_t
;

743 #ifde‡
__USE_GNU


744 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

747
__BEGIN_NAMESPACE_STD


750 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

751
size_t

__nmemb
, size_à
__size
,
__com∑r_‚_t

__com∑r
)

752
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

756 
	$qs‹t
 (*
__ba£
,
size_t

__nmemb
, size_à
__size
,

757
__com∑r_‚_t

__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

758 #ifde‡
__USE_GNU


759 
	$qs‹t_r
 (*
__ba£
,
size_t

__nmemb
, size_à
__size
,

760
__com∑r_d_‚_t

__com∑r
, *
__¨g
)

761
	`__n⁄nuŒ
 ((1, 4));

766 
	$abs
 (
__x
Ë
__THROW

	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

767 
	$œbs
 (
__x
Ë
__THROW

	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

768
__END_NAMESPACE_STD


770 #ifde‡
__USE_ISOC99


771
__exãnsi⁄__
 
	$Œabs
 (
__x
)

772
__THROW

	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776
__BEGIN_NAMESPACE_STD


780 
div_t

	$div
 (
__numî
, 
__díom
)

781
__THROW

	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

782 
ldiv_t

	$ldiv
 (
__numî
, 
__díom
)

783
__THROW

	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784
__END_NAMESPACE_STD


786 #ifde‡
__USE_ISOC99


787
__BEGIN_NAMESPACE_C99


788
__exãnsi⁄__
 
Œdiv_t

	$Œdiv
 (
__numî
,

789 
__díom
)

790
__THROW

	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791
__END_NAMESPACE_C99


795 #i‡
deföed

__USE_SVID
 || deföed
__USE_XOPEN_EXTENDED


802 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘

__de˝t
,

803 *
__ª°ri˘

__sign
Ë
__THROW

	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

808 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘

__de˝t
,

809 *
__ª°ri˘

__sign
Ë
__THROW

	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

815
__THROW

	`__n⁄nuŒ
 ((3)Ë
__wur
;

818 #ifde‡
__USE_MISC


820 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

821 *
__ª°ri˘

__de˝t
, *__ª°ri˘
__sign
)

822
__THROW

	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

824 *
__ª°ri˘

__de˝t
, *__ª°ri˘
__sign
)

825
__THROW

	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

826 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

827
__THROW

	`__n⁄nuŒ
 ((3)Ë
__wur
;

832 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘

__de˝t
,

833 *
__ª°ri˘

__sign
, *__ª°ri˘
__buf
,

834
size_t

__Àn
Ë
__THROW

	`__n⁄nuŒ
 ((3, 4, 5));

835 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘

__de˝t
,

836 *
__ª°ri˘

__sign
, *__ª°ri˘
__buf
,

837
size_t

__Àn
Ë
__THROW

	`__n⁄nuŒ
 ((3, 4, 5));

839 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

840 *
__ª°ri˘

__de˝t
, *__ª°ri˘
__sign
,

841 *
__ª°ri˘

__buf
,
size_t

__Àn
)

842
__THROW

	`__n⁄nuŒ
 ((3, 4, 5));

843 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

844 *
__ª°ri˘

__de˝t
, *__ª°ri˘
__sign
,

845 *
__ª°ri˘

__buf
,
size_t

__Àn
)

846
__THROW

	`__n⁄nuŒ
 ((3, 4, 5));

851
__BEGIN_NAMESPACE_STD


854 
	$mbÀn
 (
__c⁄°
 *
__s
,
size_t

__n
Ë
__THROW

__wur
;

857 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘

__pwc
,

858
__c⁄°
 *
__ª°ri˘

__s
,
size_t

__n
Ë
__THROW

__wur
;

861 
	$w˘omb
 (*
__s
,
wch¨_t

__wch¨
Ë
__THROW

__wur
;

865 
size_t

	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘

__pwcs
,

866
__c⁄°
 *
__ª°ri˘

__s
,
size_t

__n
Ë
__THROW
;

868 
size_t

	$wc°ombs
 (*
__ª°ri˘

__s
,

869
__c⁄°

wch¨_t
 *
__ª°ri˘

__pwcs
,
size_t

__n
)

870
__THROW
;

871
__END_NAMESPACE_STD


874 #ifde‡
__USE_SVID


879 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW

	`__n⁄nuŒ
 ((1)Ë
__wur
;

883 #ifde‡
__USE_XOPEN_EXTENDED


890 
	$gësub›t
 (**
__ª°ri˘

__›ti⁄p
,

891 *
__c⁄°
 *
__ª°ri˘

__tokís
,

892 **
__ª°ri˘

__vÆuï
)

893
__THROW

	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

897 #ifde‡
__USE_XOPEN


899 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW

	`__n⁄nuŒ
 ((1));

905 #ifde‡
__USE_XOPEN2K


907 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

910 #ifde‡
__USE_XOPEN


915 
	$gø¡±
 (
__fd
Ë
__THROW
;

919 
	$u∆ock±
 (
__fd
Ë
__THROW
;

924 *
	$±¢ame
 (
__fd
Ë
__THROW

__wur
;

927 #ifde‡
__USE_GNU


931 
	$±¢ame_r
 (
__fd
, *
__buf
,
size_t

__buÊí
)

932
__THROW

	`__n⁄nuŒ
 ((2));

935 
	`gë±
 ();

938 #ifde‡
__USE_BSD


942 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

943
__THROW

	`__n⁄nuŒ
 ((1));

948 #i‡
__USE_FORTIFY_LEVEL
 > 0 &&
deföed

__exã∫_Æways_ölöe


949 
	~<bôs/°dlib.h
>

951 #ifde‡
__LDBL_COMPAT


952 
	~<bôs/°dlib-ldbl.h
>

956 #unde‡
__√ed_mÆloc_™d_ˇŒoc


958
__END_DECLS


	@/usr/include/sys/cdefs.h

20 #i‚def
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed

__GNUC__
 && !deföed
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed

__˝lu•lus
 &&
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW

	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed

__˝lu•lus
 &&
__GNUC_PREREQ
 (2,8)

51 
	#__THROW

	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ##
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed

__˝lu•lus
 && deföed
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD

«me•a˚

°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög

°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99

«me•a˚

__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög

__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r,
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
,
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
,
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
,
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
,
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed

__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed

__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
,
¥Ÿo
,
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
,
¥Ÿo
,
Æüs
) \

180
«me

¥Ÿo

__THROW

	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTH
(
«me
,
¥Ÿo
,
Æüs
) \

183
«me

¥Ÿo

	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

185 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

186 
	#__ASMNAME2
(
¥efix
,
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

199 #i‡!
deföed

__GNUC__
 || __GNUC__ < 2

200 
	#__©åibuã__
(
xyz
Ë

	)

206 #i‡
__GNUC_PREREQ
 (2,96)

207 
	#__©åibuã_mÆloc__

	`__©åibuã__
 ((
__mÆloc__
))

	)

209 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (2,96)

216 
	#__©åibuã_puª__

	`__©åibuã__
 ((
__puª__
))

	)

218 
	#__©åibuã_puª__


	)

224 #i‡
__GNUC_PREREQ
 (3,1)

225 
	#__©åibuã_u£d__

	`__©åibuã__
 ((
__u£d__
))

	)

226 
	#__©åibuã_noölöe__

	`__©åibuã__
 ((
__noölöe__
))

	)

228 
	#__©åibuã_u£d__

	`__©åibuã__
 ((
__unu£d__
))

	)

229 
	#__©åibuã_noölöe__


	)

233 #i‡
__GNUC_PREREQ
 (3,2)

234 
	#__©åibuã_dïªˇãd__

	`__©åibuã__
 ((
__dïªˇãd__
))

	)

236 
	#__©åibuã_dïªˇãd__


	)

245 #i‡
__GNUC_PREREQ
 (2,8)

246 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

248 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

255 #i‡
__GNUC_PREREQ
 (2,97)

256 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

257
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
,
a
,
b
)))

	)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

264 #i‡
__GNUC_PREREQ
 (3,3)

265 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

267 
	#__n⁄nuŒ
(
∑øms
)

	)

272 #i‡
__GNUC_PREREQ
 (3,4)

273 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

274
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

275 #i‡
__USE_FORTIFY_LEVEL
 > 0

276 
	#__wur

__©åibuã_w¨n_unu£d_ªsu…__


	)

279 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

281 #i‚de‡
__wur


282 
	#__wur


	)

286 #i‡
__GNUC_PREREQ
 (3,2)

287 
	#__Æways_ölöe

__ölöe

	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

289 
	#__Æways_ölöe

__ölöe


	)

294 #i‡!
deföed

__˝lu•lus
 ||
__GNUC_PREREQ
 (4,3)

295 #i‡
deföed

__GNUC_STDC_INLINE__
 || deföed
__˝lu•lus


296 
	#__exã∫_ölöe
 
__ölöe

	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

297 #i‡
__GNUC_PREREQ
 (4,3)

298 
	#__exã∫_Æways_ölöe
 \

299 
__Æways_ölöe

	`__©åibuã__
 ((
__gnu_ölöe__
,
__¨tificül__
))

	)

301 
	#__exã∫_Æways_ölöe
 \

302 
__Æways_ölöe

	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

305 
	#__exã∫_ölöe
 
__ölöe


	)

306 #i‡
__GNUC_PREREQ
 (4,3)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe

	`__©åibuã__
 ((
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

317 #i‡
__GNUC_PREREQ
 (4,3)

318 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

319 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

326 #i‡!
__GNUC_PREREQ
 (2,8)

327 
	#__exãnsi⁄__


	)

331 #i‡!
__GNUC_PREREQ
 (2,92)

332 
	#__ª°ri˘


	)

338 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed

__GNUG__


339 
	#__ª°ri˘_¨r

__ª°ri˘


	)

341 #ifde‡
__GNUC__


342 
	#__ª°ri˘_¨r


	)

344 #i‡
deföed

__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

345 
	#__ª°ri˘_¨r

ª°ri˘


	)

348 
	#__ª°ri˘_¨r


	)

353 
	~<bôs/w‹dsize.h
>

355 #i‡
deföed

__LONG_DOUBLE_MATH_OPTIONAL
 && deföed
__NO_LONG_DOUBLE_MATH


356 
	#__LDBL_COMPAT
 1

	)

357 #ifde‡
__REDIRECT


358 
	#__LDBL_REDIR1
(
«me
,
¥Ÿo
,
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

359 
	#__LDBL_REDIR
(
«me
,
¥Ÿo
) \

360
	`__LDBL_REDIR1
 (
«me
,
¥Ÿo
,
__∆dbl_
##«me)

	)

361 
	#__LDBL_REDIR1_NTH
(
«me
,
¥Ÿo
,
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

362 
	#__LDBL_REDIR_NTH
(
«me
,
¥Ÿo
) \

363
	`__LDBL_REDIR1_NTH
 (
«me
,
¥Ÿo
,
__∆dbl_
##«me)

	)

364 
	#__LDBL_REDIR1_DECL
(
«me
,
Æüs
) \

365 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

366 
	#__LDBL_REDIR_DECL
(
«me
) \

367 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

368 
	#__REDIRECT_LDBL
(
«me
,
¥Ÿo
,
Æüs
) \

369
	`__LDBL_REDIR1
 (
«me
,
¥Ÿo
,
__∆dbl_
##
Æüs
)

	)

370 
	#__REDIRECT_NTH_LDBL
(
«me
,
¥Ÿo
,
Æüs
) \

371
	`__LDBL_REDIR1_NTH
 (
«me
,
¥Ÿo
,
__∆dbl_
##
Æüs
)

	)

374 #i‡!
deföed

__LDBL_COMPAT
 || !deföed
__REDIRECT


375 
	#__LDBL_REDIR1
(
«me
,
¥Ÿo
,
Æüs
Ë«mê
	)
proto

376 
	#__LDBL_REDIR
(
«me
,
¥Ÿo
Ë«mê
	)
proto

377 
	#__LDBL_REDIR1_NTH
(
«me
,
¥Ÿo
,
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

378 
	#__LDBL_REDIR_NTH
(
«me
,
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

379 
	#__LDBL_REDIR_DECL
(
«me
)

	)

380 #ifde‡
__REDIRECT


381 
	#__REDIRECT_LDBL
(
«me
,
¥Ÿo
,
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
,
¥Ÿo
,
Æüs
) \

383
	`__REDIRECT_NTH
 (
«me
,
¥Ÿo
,
Æüs
)

	)

	@/usr/include/alloca.h

19 #i‚def
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t

__size
Ë
__THROW
;

35 #ifdef
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39
__END_DECLS


	@/usr/include/bits/byteswap.h

21 #i‡!
deföed

_BYTESWAP_H
 && !deföed
_NETINET_IN_H
 && !deföed
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 #i‡
deföed

__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
,
__x
 = (Ë(
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39
__v
 =
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (Ë(
x
); \

51
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

56 
	#__bsw≠_c⁄°™t_32
(
x
) \

57 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

58 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

60 #i‡
deföed

__GNUC__
 && __GNUC__ >= 2

61 #i‡
__WORDSIZE
 =64 || (
deföed

__i486__
 || deföed
__≥¡ium__
 \

62 ||
deföed

	g__≥¡ium¥o__
 || deföed
	g__≥¡ium4__
 \

63 ||
deföed

	g__k8__
 || deföed
	g__©hl⁄__
 \

64 ||
deföed

	g__k6__
 || deföed
	g__noc⁄a__
 \

65 ||
deföed

	g__c‹e2__
 || deföed
	g__geode__
 \

66 ||
deföed

	g__amdÁm10__
)

69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
,
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73
__v
 =
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

76
__v
; }))

	)

78 
	#__bsw≠_32
(
x
) \

79 (
__exãnsi⁄__
 \

80 ({ 
__v
,
__x
 = (
x
); \

81 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

82
__v
 =
	`__bsw≠_c⁄°™t_32
 (
__x
); \

84
	`__asm__
 ("rorw $8, %w0;" \

87 : "Ù" (
__v
) \

88 : "0" (
__x
) \

90
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
);
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

99 #i‡
deföed

__GNUC__
 && __GNUC__ >= 2

101 
	#__bsw≠_c⁄°™t_64
(
x
) \

102 ((((
x
) & 0xff00000000000000ull) >> 56) \

103 | (((
x
) & 0x00ff000000000000ull) >> 40) \

104 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

105 | (((
x
) & 0x000000ff00000000ull) >> 8) \

106 | (((
x
) & 0x00000000ff000000ull) << 8) \

107 | (((
x
) & 0x0000000000ff0000ull) << 24) \

108 | (((
x
) & 0x000000000000ff00ull) << 40) \

109 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

111 #i‡
__WORDSIZE
 == 64

112 
	#__bsw≠_64
(
x
) \

113 (
__exãnsi⁄__
 \

114 ({ 
__v
,
__x
 = (
x
); \

115 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

116
__v
 =
	`__bsw≠_c⁄°™t_64
 (
__x
); \

118
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

119
__v
; }))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ {
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; }
__w
,
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126
__r
.
__Œ
 =
	`__bsw≠_c⁄°™t_64
 (
x
); \

129
__w
.
__Œ
 = (
x
); \

130
__r
.
__l
[0] =
	`__bsw≠_32
 (
__w
.__l[1]); \

131
__r
.
__l
[1] =
	`__bsw≠_32
 (
__w
.__l[0]); \

133
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER

__LITTLE_ENDIAN


	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef
__USE_ISOC99


25
__BEGIN_NAMESPACE_C99


26
	$__LDBL_REDIR1_DECL
 (
°πﬁd
,
°πod
)

27
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
,
°πod_l
)

34 #i‡
deföed

__USE_SVID
 || deföed
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36
	$__LDBL_REDIR1_DECL
 (
qecvt
,
ecvt
)

37
	$__LDBL_REDIR1_DECL
 (
qfcvt
,
fcvt
)

38
	$__LDBL_REDIR1_DECL
 (
qgcvt
,
gcvt
)

39
	$__LDBL_REDIR1_DECL
 (
qecvt_r
,
ecvt_r
)

40
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
,
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘

__«me
,

25 *
__ª°ri˘

__ªsﬁved
,

26
size_t

__ªsﬁvedÀn
Ë
__THROW

__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘

__«me
,

29 *
__ª°ri˘

__ªsﬁved
),
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘

__«me
,

32 *
__ª°ri˘

__ªsﬁved
,

33
size_t

__ªsﬁvedÀn
),
__ªÆ∑th_chk
Ë
__wur


34
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37
__exã∫_Æways_ölöe

__wur
 *

38
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘

__«me
, *__ª°ri˘
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed

_LIBC_LIMITS_H_
 && deföed
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë<
PATH_MAX
)

44 
	`__ªÆ∑th_chk_w¨n
 (
__«me
,
__ªsﬁved
,
	`__bos
 (__resolved));

46 
	`__ªÆ∑th_chk
 (
__«me
,
__ªsﬁved
,
	`__bos
 (__resolved));

49 
	`__ªÆ∑th_Æüs
 (
__«me
,
__ªsﬁved
);

50
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
,
size_t

__buÊí
,

54
size_t

__ƒól
Ë
__THROW

	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56
size_t

__buÊí
),
±¢ame_r
)

57
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
,
size_t

__buÊí
,

60
size_t

__ƒól
),
__±¢ame_r_chk
)

61
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64
__exã∫_Æways_ölöe
 

65
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
,
size_t

__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70 
	`__±¢ame_r_chk
 (
__fd
,
__buf
,
__buÊí
,
	`__bos
 (__buf));

71 i‡(
__buÊí
 >
	`__bos
 (
__buf
))

72 
	`__±¢ame_r_chk_w¨n
 (
__fd
,
__buf
,
__buÊí
,
	`__bos
 (__buf));

74 
	`__±¢ame_r_Æüs
 (
__fd
,
__buf
,
__buÊí
);

75
	}
}

78 
	$__w˘omb_chk
 (*
__s
,
wch¨_t

__wch¨
,
size_t

__buÊí
)

79
__THROW

__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
,
wch¨_t

__wch¨
),

81
w˘omb
Ë
__wur
;

83
__exã∫_Æways_ölöe

__wur
 

84
	`__NTH
 (
	$w˘omb
 (*
__s
,
wch¨_t

__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed

MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 &&
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94 
	`__w˘omb_chk
 (
__s
,
__wch¨
,
	`__bos
 (__s));

95 
	`__w˘omb_Æüs
 (
__s
,
__wch¨
);

96
	}
}

99 
size_t

	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘

__d°
,

100
__c⁄°
 *
__ª°ri˘

__§c
,

101
size_t

__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t

	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘

__d°
,

104
__c⁄°
 *
__ª°ri˘

__§c
,

105
size_t

__Àn
),
mb°owcs
);

106 
size_t

	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘

__d°
,

108
__c⁄°
 *
__ª°ri˘

__§c
,

109
size_t

__Àn
, size_à
__d°Àn
),
__mb°owcs_chk
)

110
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113
__exã∫_Æways_ölöe

size_t


114
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘

__d°
,
__c⁄°
 *__ª°ri˘
__§c
,

115
size_t

__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120 
	`__mb°owcs_chk
 (
__d°
,
__§c
,
__Àn
,

121
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 >
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124 
	`__mb°owcs_chk_w¨n
 (
__d°
,
__§c
,
__Àn
,

125
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127 
	`__mb°owcs_Æüs
 (
__d°
,
__§c
,
__Àn
);

128
	}
}

131 
size_t

	$__wc°ombs_chk
 (*
__ª°ri˘

__d°
,

132
__c⁄°

wch¨_t
 *
__ª°ri˘

__§c
,

133
size_t

__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t

	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘

__d°
,

136
__c⁄°

wch¨_t
 *
__ª°ri˘

__§c
,

137
size_t

__Àn
),
wc°ombs
);

138 
size_t

	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘

__d°
,

140
__c⁄°

wch¨_t
 *
__ª°ri˘

__§c
,

141
size_t

__Àn
, size_à
__d°Àn
),
__wc°ombs_chk
)

142
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144
__exã∫_Æways_ölöe

size_t


145
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘

__d°
,
__c⁄°

wch¨_t
 *__ª°ri˘
__§c
,

146
size_t

__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151 
	`__wc°ombs_chk
 (
__d°
,
__§c
,
__Àn
,
	`__bos
 (__dst));

152 i‡(
__Àn
 >
	`__bos
 (
__d°
))

153 
	`__wc°ombs_chk_w¨n
 (
__d°
,
__§c
,
__Àn
,
	`__bos
 (__dst));

155 
	`__wc°ombs_Æüs
 (
__d°
,
__§c
,
__Àn
);

156
	}
}

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE

__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE

__U32_TYPE


	)

32 
	#__GID_T_TYPE

__U32_TYPE


	)

33 
	#__INO_T_TYPE

__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE

__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE

__U32_TYPE


	)

36 
	#__NLINK_T_TYPE

__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE

__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE

__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE

__S32_TYPE


	)

40 
	#__RLIM_T_TYPE

__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE

__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE

__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE

__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE

__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE

__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE

__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE

__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE

__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE

__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE

__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE

__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE

__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE

__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE

__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE

__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE

__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE

__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE

__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed

_SYS_WAIT_H
 && !deföed
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed

_SYS_WAIT_H
 && !deföed
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË&
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
,
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 }
	m__waô_ãrmö©ed
;

87 #if
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 }
	m__waô_°›≥d
;

100 
	#w_ãrmsig

__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump

__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode

__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig

__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ

__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed

__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹
Aµliˇti⁄s

may

nŸ

deföe

the

ma¸o

_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹
Aµliˇti⁄s

may

nŸ

deföe

the

ma¸o

_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/sys/types.h

24 #i‚def
_SYS_TYPES_H


25 
	#_SYS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

29
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifdef
__USE_BSD


34 #i‚de‡
__u_ch¨_deföed


35 
__u_ch¨

	tu_ch¨
;

36 
__u_sh‹t

	tu_sh‹t
;

37 
__u_öt

	tu_öt
;

38 
__u_l⁄g

	tu_l⁄g
;

39 
__quad_t

	tquad_t
;

40 
__u_quad_t

	tu_quad_t
;

41 
__fsid_t

	tfsid_t
;

42 
	#__u_ch¨_deföed


	)

46 
__loff_t

	tloff_t
;

48 #i‚de‡
__öo_t_deföed


49 #i‚de‡
__USE_FILE_OFFSET64


50 
__öo_t

	töo_t
;

52 
__öo64_t

	töo_t
;

54 
	#__öo_t_deföed


	)

56 #i‡
deföed

__USE_LARGEFILE64
 && !deföed
__öo64_t_deföed


57 
__öo64_t

	töo64_t
;

58 
	#__öo64_t_deföed


	)

61 #i‚de‡
__dev_t_deföed


62 
__dev_t

	tdev_t
;

63 
	#__dev_t_deföed


	)

66 #i‚de‡
__gid_t_deföed


67 
__gid_t

	tgid_t
;

68 
	#__gid_t_deföed


	)

71 #i‚de‡
__mode_t_deföed


72 
__mode_t

	tmode_t
;

73 
	#__mode_t_deföed


	)

76 #i‚de‡
__∆ök_t_deföed


77 
__∆ök_t

	t∆ök_t
;

78 
	#__∆ök_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t

	tuid_t
;

83 
	#__uid_t_deföed


	)

86 #i‚de‡
__off_t_deföed


87 #i‚de‡
__USE_FILE_OFFSET64


88 
__off_t

	toff_t
;

90 
__off64_t

	toff_t
;

92 
	#__off_t_deföed


	)

94 #i‡
deföed

__USE_LARGEFILE64
 && !deföed
__off64_t_deföed


95 
__off64_t

	toff64_t
;

96 
	#__off64_t_deföed


	)

99 #i‚de‡
__pid_t_deföed


100 
__pid_t

	tpid_t
;

101 
	#__pid_t_deföed


	)

104 #i‡(
deföed

__USE_SVID
 || deföed
__USE_XOPEN
Ë&& !deföed
__id_t_deföed


105 
__id_t

	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t

	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t

	tdaddr_t
;

117 
__ˇddr_t

	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed

__USE_SVID
 || deföed
__USE_XOPEN
Ë&& !deföed
__key_t_deföed


123 
__key_t

	tkey_t
;

124 
	#__key_t_deföed


	)

127 #ifde‡
__USE_XOPEN


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t

	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t

	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
,
MODE
) \

189 ##
	tN
##
	t_t

	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
,
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t

	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195
	t__ötN_t
 (8,
	t__QI__
);

196
__ötN_t
 (16,
__HI__
);

197
__ötN_t
 (32,
__SI__
);

198
__ötN_t
 (64,
__DI__
);

201
__u_ötN_t
 (8,
__QI__
);

202
__u_ötN_t
 (16,
__HI__
);

203
__u_ötN_t
 (32,
__SI__
);

204
__u_ötN_t
 (64,
__DI__
);

206 
	tªgi°î_t

	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡
deföed

__USE_UNIX98
 && !deföed
__blksize_t_deföed


228 
__blksize_t

	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t

	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t

	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t

	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t

	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t

	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t

	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t

	tblk˙t64_t
;

263 
__fsblk˙t64_t

	tfsblk˙t64_t
;

264 
__fsfû˙t64_t

	tfsfû˙t64_t
;

269 #i‡
deföed

__USE_POSIX199506
 || deföed
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273
	g__END_DECLS


	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 }
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 }
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 }
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91
__±hªad_li°_t

	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95
__exãnsi⁄__
 union

97 
	m__•ös
;

98
__±hªad_¶i°_t

	m__li°
;

101 }
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 }
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 }
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122
__exãnsi⁄__
 
	m__wakeup_£q
;

123
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 }
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129
__exãnsi⁄__
 
	m__Æign
;

130 }
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 }
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed

__USE_UNIX98
 || deföed
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 }
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 }
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 }
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 }
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 }
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 }
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã

	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t

	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t

	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË%
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72
__fd_mask

	mfds_bôs
[
__FD_SETSIZE
 /
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75
__fd_mask

	m__fds_bôs
[
__FD_SETSIZE
 /
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 }
	tfd_£t
;

81 
	#FD_SETSIZE

__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask

	tfd_mask
;

88 
	#NFDBITS

__NFDBITS


	)

93 
	#FD_SET
(
fd
,
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
,
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
,
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99
__BEGIN_DECLS


109 
£À˘
 (
__nfds
,
fd_£t
 *
__ª°ri˘

__ªadfds
,

110
fd_£t
 *
__ª°ri˘

__wrôefds
,

111
fd_£t
 *
__ª°ri˘

__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘

__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
,
fd_£t
 *
__ª°ri˘

__ªadfds
,

122
fd_£t
 *
__ª°ri˘

__wrôefds
,

123
fd_£t
 *
__ª°ri˘

__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘

__timeout
,

125 c⁄°
__sig£t_t
 *
__ª°ri˘

__sigmask
);

128
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32
__THROW
;

33
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35
__THROW
;

36
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39
__THROW
;

41 #i‡
deföed

__GNUC__
 && __GNUC__ >2 && deföed
__USE_EXTERN_INLINES


42
__exãnsi⁄__

__exã∫_ölöe
 

43
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46
	}
}

48
__exãnsi⁄__

__exã∫_ölöe
 

49
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52
	}
}

54
__exãnsi⁄__

__exã∫_ölöe
 

55
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
,
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/time.h

23 #i‚def
_TIME_H


25 #i‡(!
deföed

__√ed_time_t
 && !deföed
__√ed_˛ock_t
 && \

26 !
deföed

	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30
	g__BEGIN_DECLS


34 #ifdef
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed

__STRICT_ANSI__
 && !deföed
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK

CLOCKS_PER_SEC


	)

53 #i‡!
deföed

__˛ock_t_deföed
 && (deföed
_TIME_H
 || deföed
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58
__BEGIN_NAMESPACE_STD


60 
__˛ock_t

	t˛ock_t
;

61
	g__END_NAMESPACE_STD


62 #i‡
deföed

__USE_XOPEN
 || deföed
__USE_POSIX
 || deföed
__USE_MISC


63
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed

__time_t_deföed
 && (deföed
_TIME_H
 || deföed
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74
__BEGIN_NAMESPACE_STD


76 
__time_t

	ttime_t
;

77
__END_NAMESPACE_STD


78 #i‡
deföed

__USE_POSIX
 || deföed
__USE_MISC
 || deföed
__USE_SVID


79
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed

__˛ockid_t_deföed
 && \

86 ((
deföed

_TIME_H
 && deföed
__USE_POSIX199309
Ë|| deföed
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t

	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed

__timî_t_deföed
 && \

98 ((
deföed

_TIME_H
 && deföed
__USE_POSIX199309
Ë|| deföed
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t

	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed

__time•ec_deföed
 && \

111 ((
deföed

_TIME_H
 && \

112 (
deföed

__USE_POSIX199309
 || deföed
__USE_MISC
)) || \

113
deföed

__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122
__time_t

tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef
_TIME_H


131
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef
__USE_BSD


146 
tm_gmtoff
;

147
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150
__c⁄°
 *
__tm_z⁄e
;

153
__END_NAMESPACE_STD


154 #i‡
deföed

__USE_XOPEN
 || deföed
__USE_POSIX
 || deföed
__USE_MISC


155
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec

ô_öãrvÆ
;

164 
time•ec

ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t

	tpid_t
;

175 
	#__pid_t_deföed


	)

180
__BEGIN_NAMESPACE_STD


183 
˛ock_t

	$˛ock
 (Ë
__THROW
;

186 
time_t

	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t

__time1
,Åime_à
__time0
)

190
__THROW

	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t

	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t

	$°r·ime
 (*
__ª°ri˘

__s
,
size_t

__maxsize
,

200
__c⁄°
 *
__ª°ri˘

__f‹m©
,

201
__c⁄°
 
tm
 *
__ª°ri˘

__ç
Ë
__THROW
;

202
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘

__s
,

208
__c⁄°
 *
__ª°ri˘

__fmt
, 
tm
 *
__ç
)

209
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t

	$°r·ime_l
 (*
__ª°ri˘

__s
,
size_t

__maxsize
,

218
__c⁄°
 *
__ª°ri˘

__f‹m©
,

219
__c⁄°
 
tm
 *
__ª°ri˘

__ç
,

220
__loˇÀ_t

__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘

__s
,

225
__c⁄°
 *
__ª°ri˘

__fmt
, 
tm
 *
__ç
,

226
__loˇÀ_t

__loc
Ë
__THROW
;

230
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°

time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°

time_t
 *
__timî
Ë
__THROW
;

238
__END_NAMESPACE_STD


240 #i‡
deföed

__USE_POSIX
 || deföed
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°

time_t
 *
__ª°ri˘

__timî
,

244 
tm
 *
__ª°ri˘

__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°

time_t
 *
__ª°ri˘

__timî
,

249 
tm
 *
__ª°ri˘

__ç
Ë
__THROW
;

252
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°

time_t
 *
__timî
Ë
__THROW
;

259
__END_NAMESPACE_STD


261 #i‡
deföed

__USE_POSIX
 || deföed
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘

__ç
,

267 *
__ª°ri˘

__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°

time_t
 *
__ª°ri˘

__timî
,

271 *
__ª°ri˘

__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed

__USE_SVID
 || deföed
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°

time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t

	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t

	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW

	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t

__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t

__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t

__˛ock_id
,
__c⁄°
 
time•ec
 *
__ç
)

340
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t

__˛ock_id
, 
__Êags
,

348
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t

__pid
,
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t

__˛ock_id
,

358 
sigevít
 *
__ª°ri˘

__evp
,

359
timî_t
 *
__ª°ri˘

__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t

__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t

__timîid
, 
__Êags
,

366
__c⁄°
 
ôimî•ec
 *
__ª°ri˘

__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘

__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t

__timîid
, 
ôimî•ec
 *
__vÆue
)

371
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t

__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘

__°rög
,

414 
tm
 *
__ª°ri˘

__ªsbuÂ
);

417
__END_DECLS


	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed

__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
,
__d1
; \

37
__asm__

	`__vﬁ©ûe__
 ("˛d;Ñï; "
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
,
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

60 
	#__FD_CLR
(
d
,
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

61 
	#__FD_ISSET
(
d
,
£t
) \

62 ((
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] &
	`__FDMASK
 (d)Ë!0)

	)

	@/usr/include/bits/sigset.h

21 #i‚def
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 }
	t__sig£t_t
;

43 #i‡!
deföed

_SIGSET_H_‚s
 && deföed
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE

__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed

__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 =
_SIGSET_NWORDS
; \

60
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 =
_SIGSET_NWORDS
; \

65
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 =
_SIGSET_NWORDS
; \

75 c⁄°
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 =
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78
__ªt
 =
__£t
->
__vÆ
[
__˙t
]; \

79
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
,
À·
,
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 =
_SIGSET_NWORDS
; \

82
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄°
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄°
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 &
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
,
À·
,
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 =
_SIGSET_NWORDS
; \

91
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄°
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄°
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 |
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°

__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
,
BODY
,
CONST
) \

110
_EXTERN_INLINE
 \

111
	`NAME
 (
CONST

__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 =
	`__sigmask
 (
__sig
); \

114 
__w‹d
 =
	`__sigw‹d
 (
__sig
); \

115 
BODY
; \

116 }

	)

118
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] &
__mask
Ë? 1 : 0,
__c⁄°
)

119
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed

__STRICT_ANSI__
 && !deföed
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71
__time_t

	mtv_£c
;

72
__su£c⁄ds_t

	mtv_u£c
;

	@
1
.
1
/usr/include
70
1187
config.c
config.h
controller.c
controller.h
cpuid.c
cpuid.h
defs.h
dmi.c
dmi.h
elf.h
error.c
extra.c
extra.h
init.c
io.h
jedec_id.h
lib.c
linuxbios.c
linuxbios_tables.h
main.c
memsize.c
msr.h
patn.c
pci.c
pci.h
random.c
reloc.c
screen_buffer.c
screen_buffer.h
serial.h
smp.c
smp.h
spd.c
spd.h
stdint.h
test.c
test.h
/usr/include/inttypes.h
/usr/include/string.h
/usr/include/sys/io.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/features.h
/usr/include/xlocale.h
/usr/include/bits/predefs.h
/usr/include/bits/types.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/stdlib.h
/usr/include/sys/cdefs.h
/usr/include/alloca.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/typesizes.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wordsize.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/sys/types.h
/usr/include/bits/pthreadtypes.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/time.h
/usr/include/bits/select.h
/usr/include/bits/sigset.h
/usr/include/bits/time.h
